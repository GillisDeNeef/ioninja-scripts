//..............................................................................
//
// SSH Connection session
//

import "io_base.jncx"
import "io_ssh.jncx"
import "io_Socket.jnc"
import "io_MappedFile.jnc"
import "io_SocketAddressResolver.jnc"
import "doc_Plugin.jnc"
import "gui_Dialog.jnc"
import "gui_History.jnc"

using extension gui.ComboBoxHistory;

//..............................................................................

class SshChannelSession: doc.Session
{
protected:
	enum State
	{
		Closed,
		Resolving,
		TcpConnecting,
		SshHandshaking,
		SshAuthenticating,
		WaitingLoginDlg,
		SshOpeningChannel,
		SshRequestingPty,
		SshStartingProcess,
		Connected,
	}

	static char const* m_stateStringTable [] =
	{
		"Closed",
		"Resolving...",
		"Connecting...",
		"Handhsaking...",
		"Authenticating...",
		"Authenticating...",
		"Opening channel...",
		"Requesting PTY...",
		"Starting process...",
		"Connected",
	}

	enum ActionId
	{
		Connect,
		_Count,
	}

	enum IconId
	{
		Connect,
		Disconnect,
		_Count,
	}

	enum StatusPaneId
	{
		RemoteAddress,
		State,
		_Count,
	}

protected:
	// ssh

	State bindable m_state;
	io.SshChannel m_channel;
	io.SocketAddressResolver m_resolver;
	io.SocketAddress m_remoteAddress;
	uint_t m_syncId;

	// toolbar, status bar & menu

	gui.Action* m_actionTable [ActionId._Count];
	gui.Icon* m_iconTable [IconId._Count];
	gui.StatusPane* m_statusPaneTable [StatusPaneId._Count];
	gui.ComboBox* m_addressCombo;
	gui.LoginDlg* m_loginDlg;

	// property grid

	gui.StringProperty* m_addressProp;
	gui.StringProperty* m_userNameProp;
	gui.EnumProperty* m_authenticationMethodProp;
	gui.FileProperty* m_privateKeyFileProp;
	gui.StringProperty* m_channelTypeProp;
	gui.StringProperty* m_processTypeProp;
	gui.StringProperty* m_ptyTypeProp;
	gui.EnumProperty* m_closeKindProp;
	gui.BoolProperty* m_isNagleEnabledProp;
	gui.BoolProperty* m_useLocalAddressProp;
	gui.EnumProperty* m_adapterProp;
	gui.IntProperty* m_localPortProp;
	gui.IntProperty* m_remotePortProp;

public:
	construct (doc.PluginHost* pluginHost);

	bool errorcode connect ();
	bool errorcode connect (io.SocketAddress const* address);
	disconnect ();

	override void load (doc.Storage* storage);
	override void save (doc.Storage* storage);
	override void updateProperties ();
	override bool errorcode applyProperties ();
	override void restoreDefaultProperties ();

	override size_t errorcode transmit (
		void const* p,
		size_t size
		);

protected:
	handleConnectError (std.Error const* error);
	handleSshAuthenticateError (std.Error const* error);

	onConnect ();

	onSshEvent (
		uint_t syncId,
		io.SshEvents triggeredEvents
		);

	onResolverEvent (io.SocketAddressResolverEventParams const* params);
	onLoginDlgCompleted (gui.StdDlgButton button);
	onConsoleSizeChanged ();

	waitForSshEvents ();

	createUi ();
	reactor m_uiReactor ();
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

SshChannelSession.construct (doc.PluginHost* pluginHost)
{
	basetype.construct (pluginHost);

	pluginHost.m_log.attachRepresenter (representSshChannelLog);

	m_state = State.Closed;
	m_resolver.m_onResolverEvent += onResolverEvent @ pluginHost.m_mainThreadScheduler;
	m_pluginHost.m_terminal.m_onConsoleSizeChanged += onConsoleSizeChanged;

	createUi ();
}

SshChannelSession.createUi ()
{
	// toolbar

	m_pluginHost.m_toolBar.addLabel ("Address:");
	m_addressCombo = m_pluginHost.m_toolBar.addComboBox (-1);
	m_addressCombo.m_isEditable = true;
	m_addressCombo.m_onEnter += connect;

	m_iconTable [IconId.Connect] = new gui.Icon ("images/connect.png");
	m_iconTable [IconId.Disconnect] = new gui.Icon ("images/disconnect.png");

	m_actionTable [ActionId.Connect] = createAction ("Connect", m_iconTable [IconId.Connect]);
	m_actionTable [ActionId.Connect].m_onTriggered += onConnect;

	// status bar

	m_statusPaneTable [StatusPaneId.RemoteAddress] = m_pluginHost.m_statusBar.addPane (, 100);
	m_statusPaneTable [StatusPaneId.RemoteAddress].m_color = gui.StdColor.Blue;
	m_statusPaneTable [StatusPaneId.State] = m_pluginHost.m_statusBar.addPane (, 80);

	// property grid

	m_addressProp = m_pluginHost.m_propertyGrid.createStringProperty (
		"Remote address",
		"Remote address to connect to (IP-address or host-name followed by ':' port)"
		);

	m_remotePortProp = m_pluginHost.m_propertyGrid.createIntProperty (
		"Remote TCP port (default)",
		"Remote TCP port to connect to (if not specified in remote address)"
		);

	m_userNameProp = m_pluginHost.m_propertyGrid.createStringProperty (
		"User name",
		"User name for SSH authentification"
		);

	static gui.EnumPropertyOption authenticationMethodTable [] =
	{
		{ "Password",    gui.AuthenticationMethod.Password },
		{ "Private key", gui.AuthenticationMethod.PrivateKey },
	}

	m_authenticationMethodProp = m_pluginHost.m_propertyGrid.createEnumProperty (
		"User authentication",
		"How to authentify a user (password / private key)",
		authenticationMethodTable,
		countof (authenticationMethodTable)
		);

	m_privateKeyFileProp = m_pluginHost.m_propertyGrid.createFileProperty (
		"Private key file",
		"Private key file (PEM) for SSH authentification"
		);

	m_privateKeyFileProp.m_fileDialogCaption = "Select Private Key File";
	m_privateKeyFileProp.m_filter = "SSH identity files (id_dsa id_rsa);;PEM files (*.pem);;All files (*.*)";

	m_channelTypeProp = m_pluginHost.m_propertyGrid.createStringProperty (
		"SSH channel",
		"Type of requested SSH channel"
		);

	m_processTypeProp = m_pluginHost.m_propertyGrid.createStringProperty (
		"SSH process",
		"Type of requested SSH process"
		);

	m_ptyTypeProp = m_pluginHost.m_propertyGrid.createStringProperty (
		"Pseudoterminal",
		"Type of requested pseudoterminal (PTY)"
		);

	static gui.EnumPropertyOption closeKindTable [] =
	{
		{ "Reset",    io.SocketCloseKind.Reset },
		{ "Graceful", io.SocketCloseKind.Graceful },
	}

	m_closeKindProp = m_pluginHost.m_propertyGrid.createEnumProperty (
		"TCP disconnect",
		"How to close TCP connection (graceful / reset)",
		closeKindTable,
		countof (closeKindTable)
		);

	m_isNagleEnabledProp = m_pluginHost.m_propertyGrid.createBoolProperty (
		"Use TCP Nagle algorithm",
		"Specify whether to reduce the number of small TCP packets being sent"
		);

	m_useLocalAddressProp = m_pluginHost.m_propertyGrid.createBoolProperty (
		"Use local TCP address",
		"Bind socket to the specified local address before connect"
		);

	m_adapterProp = io.createNetworkAdapterProperty (
		m_pluginHost.m_propertyGrid,
		io.NetworkAdapterUsage.Connection,
		"Adapter",
		"Adapter to bind to before connect"
		);

	m_localPortProp = m_pluginHost.m_propertyGrid.createIntProperty (
		"Local TCP port",
		"Local TCP port to bind to before connect"
		);

	m_uiReactor.start ();
}

SshChannelSession.onConnect ()
{
	if (m_state)
		disconnect ();
	else try
		connect ();
}

bool errorcode SshChannelSession.connect ()
{
	disconnect ();
	startSession ();

	char const* addressString = m_addressCombo.m_editText;
	m_addressCombo.addEditTextToHistory ();

	io.SocketAddress address;
	bool isDirectAddress = try address.parse (addressString);
	if (isDirectAddress)
	{
		if (!address.m_ip4.m_port) // IPv4 & IPv6 share the same port location
			address.m_ip4.m_port = m_remotePortProp.m_value;

		return try connect (&address);
	}

	m_state = State.Resolving;

	writeLog (
		SshChannelLogRecordCode.Resolving,
		addressString,
		strlen (addressString)
		);

	io.AddressFamily addressFamily = io.AddressFamily.Undefined;
	if (m_useLocalAddressProp.m_value)
	{
		io.SocketAddress const* adapterAddress = m_adapterProp.m_value;
		if (adapterAddress)
			addressFamily = adapterAddress.m_family;
	}

	m_resolver.m_syncId = m_syncId;
	m_resolver.resolve (addressString, addressFamily);
	return true;

catch:
	handleConnectError (std.getLastError ());
	return false;
}

bool errorcode SshChannelSession.connect (io.SocketAddress const* remoteAddress)
{
	disconnect ();

	if (!m_useLocalAddressProp.m_value)
	{
		m_channel.open (); // any address
	}
	else
	{
		io.SocketAddress localAddress;
		io.SocketAddress const* adapterAddress = m_adapterProp.m_value;
		if (adapterAddress)
			localAddress = *adapterAddress;
		else
			localAddress.m_family = remoteAddress.m_family;

		localAddress.m_ip4.m_port = (uint16_t) m_localPortProp.m_value; // same for IPv4/IPv6

		m_channel.open (&localAddress);
	}

	m_state = State.TcpConnecting;
	m_remoteAddress = *remoteAddress;

	writeLog (
		SshChannelLogRecordCode.TcpConnecting,
		remoteAddress,
		sizeof (io.SocketAddress)
		);

	void const* privateKey;
	char const* password;

	if (m_authenticationMethodProp.m_value == gui.AuthenticationMethod.PrivateKey)
	{
		privateKey = loadFile (m_privateKeyFileProp.m_value);
		password = m_loginDlg ? m_loginDlg.m_privateKeyPassphrase : null;
	}
	else
	{
		privateKey = null;
		password = m_loginDlg ? m_loginDlg.m_password : null;
	}

	m_channel.connect (
		remoteAddress,
		m_userNameProp.m_value,
		privateKey,
		dynamic sizeof (privateKey),
		password,
		m_channelTypeProp.m_value,
		m_processTypeProp.m_value,
		m_ptyTypeProp.m_value,
		m_pluginHost.m_terminal.m_consoleWidth,
		m_pluginHost.m_terminal.m_consoleHeight
		);

	waitForSshEvents ();
	return true;

catch:
	handleConnectError (std.getLastError ());
	return false;
}

SshChannelSession.waitForSshEvents ()
{
	io.SshEvents eventMask = io.SshEvents.IoError;

	switch (m_state)
	{
	case State.TcpConnecting:
		eventMask |= io.SshEvents.TcpConnectCompleted;
		break;

	case State.SshHandshaking:
		eventMask |= io.SshEvents.SshHandshakeCompleted;
		break;

	case State.SshAuthenticating:
		eventMask |= io.SshEvents.SshAuthenticateCompleted | io.SshEvents.SshAuthenticateError;
		break;

	case State.SshOpeningChannel:
		eventMask |= io.SshEvents.SshChannelOpened;
		break;

	case State.SshRequestingPty:
		eventMask |= io.SshEvents.SshPtyRequestCompleted;
		break;

	case State.SshStartingProcess:
		eventMask |= io.SshEvents.SshConnectCompleted;
		break;

	case State.Connected:
		eventMask |=
			io.SshEvents.TcpDisconnected |
			io.SshEvents.IncomingData |
			io.SshEvents.ReceiveBufferFull;

		if (!m_isTransmitEnabled)
			eventMask |= io.SshEvents.TransmitBufferReady;

		break;
	}

	m_channel.wait (eventMask, onSshEvent ~(++m_syncId) @ m_pluginHost.m_mainThreadScheduler);
}

SshChannelSession.handleConnectError (std.Error const* error)
{
	writeLog (
		SshChannelLogRecordCode.ConnectError,
		error,
		error.m_size
		);

	m_channel.close ();
	m_state = State.Closed;
}

SshChannelSession.handleSshAuthenticateError (std.Error const* error)
{
	writeLog (
		SshChannelLogRecordCode.ConnectError,
		error,
		error.m_size
		);

	if (!m_loginDlg)
	{
		m_loginDlg = new gui.LoginDlg;
		m_loginDlg.m_onCompleted += onLoginDlgCompleted;
	}

	m_loginDlg.m_userName = m_userNameProp.m_value;
	m_loginDlg.m_authenticationMethod = m_authenticationMethodProp.m_value;
	m_loginDlg.m_privateKeyFileName = m_privateKeyFileProp.m_value;
	m_loginDlg.show ();

	m_state = State.WaitingLoginDlg;
}

SshChannelSession.onLoginDlgCompleted (gui.StdDlgButton button)
{
	if (m_state != State.WaitingLoginDlg)
		return;

	if (button != gui.StdDlgButton.Ok)
	{
		m_channel.close ();
		m_state = State.Closed;
		return;
	}

	printf ("ADD RE-AUTH/RE-CONNECT LOGIC!\n");

	writeLog (SshChannelLogRecordCode.SshAuthenticating);
//	writeLog (SshChannelLogRecordCode.Reconnecting);

	switch (m_loginDlg.m_authenticationMethod)
	{
	case gui.AuthenticationMethod.Password:
		m_channel.authenticate (m_loginDlg.m_userName, null, 0, m_loginDlg.m_password);
		break;

	case gui.AuthenticationMethod.PrivateKey:
		void const* privateKey = loadFile (m_loginDlg.m_privateKeyFileName);

		m_channel.authenticate (
			m_loginDlg.m_userName,
			privateKey,
			dynamic sizeof (privateKey),
			m_loginDlg.m_privateKeyPassphrase
			);
		break;
	}

	m_userNameProp.m_value = m_loginDlg.m_userName;
	m_authenticationMethodProp.m_value = m_loginDlg.m_authenticationMethod;
	m_privateKeyFileProp.m_value = m_loginDlg.m_privateKeyFileName;
	m_state = State.SshAuthenticating;
	waitForSshEvents ();

catch:
	m_channel.close ();
	m_state = State.Closed;
}

SshChannelSession.onConsoleSizeChanged ()
{
	m_channel.resizePty (
		m_pluginHost.m_terminal.m_consoleWidth,
		m_pluginHost.m_terminal.m_consoleHeight
		);
}

SshChannelSession.disconnect ()
{
	switch (m_state)
	{
	case State.Closed:
		return;

	case State.Resolving:
	case State.TcpConnecting:
	case State.SshHandshaking:
	case State.SshAuthenticating:
	case State.WaitingLoginDlg:
	case State.SshOpeningChannel:
	case State.SshRequestingPty:
	case State.SshStartingProcess:
		writeLog (SshChannelLogRecordCode.ConnectCancelled);
		break;

	case State.Connected:
		writeLog (
			SshChannelLogRecordCode.Disconnected,
			&m_remoteAddress,
			sizeof (m_remoteAddress)
			);
		break;
	}

	m_channel.close ();
	m_state = State.Closed;
}

void SshChannelSession.load (doc.Storage* storage)
{
	m_addressCombo.loadHistory (storage, "addressHistory");
	m_addressCombo.m_editText = storage.readString ("address");
	m_userNameProp.m_value = storage.readString ("userName");
	m_authenticationMethodProp.m_value = storage.readInt ("authenticationMethod");
	m_privateKeyFileProp.m_value = storage.readString ("privateKeyFile");
	m_channelTypeProp.m_value = storage.readString ("channelType");
	m_processTypeProp.m_value = storage.readString ("processType");
	m_ptyTypeProp.m_value = storage.readString ("ptyType");
	m_closeKindProp.m_value = storage.readInt ("closeKindProp");
	m_isNagleEnabledProp.m_value = storage.readBool ("isNagleEnabledProp");
	m_useLocalAddressProp.m_value = storage.readBool ("useLocalAddress");
	m_adapterProp.m_value = storage.readInt ("adapterIp");
	m_localPortProp.m_value = storage.readInt ("localPort");
	m_remotePortProp.m_value = storage.readInt ("remotePort", 22);
}

void SshChannelSession.save (doc.Storage* storage)
{
	m_addressCombo.saveHistory (storage, "addressHistory");
	storage.writeString ("address", m_addressCombo.m_editText);
	storage.writeString ("userName", m_userNameProp.m_value);
	storage.writeInt ("authenticationMethod", m_authenticationMethodProp.m_value);
	storage.writeString ("privateKeyFile", m_privateKeyFileProp.m_value);
	storage.writeString ("channelType", m_channelTypeProp.m_value);
	storage.writeString ("processType", m_processTypeProp.m_value);
	storage.writeString ("ptyType", m_ptyTypeProp.m_value);
	storage.writeInt ("closeKindProp", m_closeKindProp.m_value);
	storage.writeBool ("isNagleEnabledProp", m_isNagleEnabledProp.m_value);
	storage.writeBool ("useLocalAddress", m_useLocalAddressProp.m_value);
	storage.writeInt ("adapterIp", m_adapterProp.m_value);
	storage.writeInt ("localPort", m_localPortProp.m_value);
	storage.writeInt ("remotePort", m_remotePortProp.m_value);
}

void SshChannelSession.updateProperties ()
{
	m_addressProp.m_value = m_addressCombo.m_editText;
}

bool errorcode SshChannelSession.applyProperties ()
{
	m_addressCombo.m_editText = m_addressProp.m_value;
	return true;
}

void SshChannelSession.restoreDefaultProperties ()
{
	m_addressProp.m_value = "sdf.org:22";
	m_userNameProp.m_value = "new";
	m_authenticationMethodProp.m_value = gui.AuthenticationMethod.Password;
	m_privateKeyFileProp.m_value = "";
	m_channelTypeProp.m_value = "session";
	m_processTypeProp.m_value = "shell";
	m_ptyTypeProp.m_value = "xterm";
	m_closeKindProp.m_value = io.SocketCloseKind.Graceful;
	m_isNagleEnabledProp.m_value = true;
	m_useLocalAddressProp.m_value = false;
	m_adapterProp.m_value = 0;
	m_localPortProp.m_value = 0;
	m_remotePortProp.m_value = 22;
}

size_t errorcode SshChannelSession.transmit (
	void const* p,
	size_t size
	)
{
	if (m_state != State.Connected)
		return -1;

	size_t result = m_channel.write (p, size);
	if (result)
		writeLog (log.StdRecordCode.Tx, p, result);

	return result;
}

SshChannelSession.onSshEvent (
	uint_t syncId,
	io.SshEvents triggeredEvents
	)
{
	if (syncId != m_syncId)
		return;

	if (triggeredEvents & io.SshEvents.IoError)
	{
		handleConnectError (m_channel.m_ioError);
		return;
	}

	if (triggeredEvents & io.SshEvents.SshAuthenticateError)
	{
		handleSshAuthenticateError (m_channel.m_ioError);
		return;
	}

	if (triggeredEvents & io.SshEvents.TcpConnectCompleted)
	{
		writeLog (SshChannelLogRecordCode.TcpConnectCompleted);
		m_state = State.SshHandshaking;
	}

	if (triggeredEvents & io.SshEvents.SshHandshakeCompleted)
	{
		writeLog (SshChannelLogRecordCode.SshHandshakeCompleted);
		m_state = State.SshAuthenticating;
	}

	if (triggeredEvents & io.SshEvents.SshAuthenticateCompleted)
	{
		writeLog (SshChannelLogRecordCode.SshAuthCompleted);
		m_state = State.SshOpeningChannel;
	}

	if (triggeredEvents & io.SshEvents.SshChannelOpened)
	{
		writeLog (SshChannelLogRecordCode.SshChannelOpened);
		m_state = State.SshRequestingPty;
	}

	if (triggeredEvents & io.SshEvents.SshPtyRequestCompleted)
	{
		writeLog (SshChannelLogRecordCode.SshPtyRequested);
		m_state = State.SshStartingProcess;
	}

	if (triggeredEvents & io.SshEvents.SshConnectCompleted)
	{
		writeLog (SshChannelLogRecordCode.SshProcessStarted);
		writeLog (SshChannelLogRecordCode.ConnectCompleted);
		m_state = State.Connected;
	}

	if (triggeredEvents & io.SshEvents.TcpDisconnected)
	{
		writeLog (
			SshChannelLogRecordCode.Disconnected,
			&m_remoteAddress,
			sizeof (m_remoteAddress)
			);

		m_channel.close ();
		m_state = State.Closed;
		return;
	}

	if (triggeredEvents & io.SshEvents.IncomingData)
	{
		static char buffer [512];
		size_t result = try m_channel.read (buffer, sizeof (buffer));
		if (result != -1)
			writeLog (log.StdRecordCode.Rx, buffer, result);
	}

	if (io.SshEvents.TransmitBufferReady)
		m_isTransmitEnabled = true;

	waitForSshEvents ();
}

SshChannelSession.onResolverEvent (io.SocketAddressResolverEventParams const* params)
{
	if (params.m_syncId != m_syncId)
		return;

	switch (params.m_eventCode)
	{
	case io.SocketAddressResolverEventCode.ResolveCompleted:
		writeLog (
			SshChannelLogRecordCode.ResolveCompleted,
			params.m_addressTable,
			sizeof (io.SocketAddress)
			);

		m_state = State.Closed;

		io.SocketAddress address = params.m_addressTable [0];
		if (!address.m_ip4.m_port) // IPv4 & IPv6 share the same port location
			address.m_ip4.m_port = m_remotePortProp.m_value;

		try connect (&address);
		break;

	case io.SocketAddressResolverEventCode.ResolveError:
		handleConnectError (params.m_error);
		break;
	}

catch:
	handleConnectError (std.getLastError ());
}

reactor SshChannelSession.m_uiReactor ()
{
	m_title = $"SSH $(m_addressCombo.m_currentText)";
	m_isTransmitEnabled = m_state == State.Connected;
	m_privateKeyFileProp.m_isEnabled = m_authenticationMethodProp.m_value == gui.AuthenticationMethod.PrivateKey;
	m_adapterProp.m_isEnabled = m_useLocalAddressProp.m_value;
	m_localPortProp.m_isEnabled = m_useLocalAddressProp.m_value;
	m_actionTable [ActionId.Connect].m_text = m_state ? "Disconnect" : "Connect";
	m_actionTable [ActionId.Connect].m_icon = m_iconTable [m_state ? IconId.Disconnect : IconId.Connect];
	m_statusPaneTable [StatusPaneId.State].m_text = m_stateStringTable [m_state];
	m_statusPaneTable [StatusPaneId.RemoteAddress].m_text = m_state > State.Resolving ? m_remoteAddress.getString () : "<peer-address>";
	m_statusPaneTable [StatusPaneId.RemoteAddress].m_isVisible = m_state > State.Resolving;
}

//..............................................................................

// simple helper to load private key files (returning null is OK)

void const* loadFile (char const* fileName)
{
	if (!fileName || !*fileName)
		return null;

	io.File file;
	file.open (fileName, io.FileOpenFlags.ReadOnly);
	size_t size = file.m_size; // cache size (file may change)
	void* p = new char [size];
	file.read (p, size);
	return p;

catch:
	return null;
}

//..............................................................................

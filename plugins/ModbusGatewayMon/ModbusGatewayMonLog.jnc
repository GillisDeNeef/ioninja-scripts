//..............................................................................
//
// TCP Connection log packet declarations and representer
//

//..............................................................................

enum ModbusGatewayMonLogRecordCode
{
	Resolving,
	Connecting,
	ConnectingFrom,
	ResolveCompleted,
	ConnectCompleted,
	ConnectCancelled,
	ConnectError,
	CommandError,
	Disconnected,
	DumpPacket,
	Log,
}

enum ModbusGatewayMonPartCode
{
	Connecting       = 1 | log.PartCodeFlags.MergeableForward,
	ConnectCompleted = 1 | log.PartCodeFlags.MergeableBackward,
}

bitflag enum TcpDisconnectLogRecordFlags
{
	Remote,
	Reset,
}

struct TcpDisconnectLogRecordParams
{
	io.SocketAddress m_address;
	uint_t m_flags;
}

//..............................................................................

bool representModbusGatewayMonLog (
	log.RepresenterTarget* target,
	uint_t recordCode,
	void const* p,
	size_t size,
	uint_t foldFlags
	)
{
	switch (recordCode)
	{
	case ModbusGatewayMonLogRecordCode.Resolving:
		char const* addressString = (char const*) p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText (ModbusGatewayMonPartCode.Connecting, $"Resolving \e[34m$addressString\e[m...");
		break;

	case ModbusGatewayMonLogRecordCode.Connecting:
		char const* addressString = ((io.SocketAddress const*) p).getString ();
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText (ModbusGatewayMonPartCode.Connecting, $"Connecting to \e[34m$addressString\e[m...");
		break;

	case ModbusGatewayMonLogRecordCode.ConnectingFrom:
		char const* remoteAddressString = ((io.SocketAddress const*) p).getString ();
		char const* localAddressString = ((io.SocketAddress const*) p + 1).getString ();
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText (ModbusGatewayMonPartCode.Connecting, $"Connecting to \e[34m$remoteAddressString\e[m from \e[34m$localAddressString\e[m...");
		break;

	case ModbusGatewayMonLogRecordCode.ResolveCompleted:
		char const* addressString = ((io.SocketAddress const*) p).getString ();
		target.addHyperText (ModbusGatewayMonPartCode.ConnectCompleted, $"ok (\e[34m$addressString\e[m)");
		break;

	case ModbusGatewayMonLogRecordCode.ConnectCompleted:
		target.m_lineAttr.m_flags = log.LineAttrFlags.Override;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Connect;
		target.m_lineAttr.m_backColor = log.StdLogColor.Connect;
		target.addHyperText (ModbusGatewayMonPartCode.ConnectCompleted, "ok");
		break;

	case ModbusGatewayMonLogRecordCode.ConnectCancelled:
		target.addHyperText (ModbusGatewayMonPartCode.ConnectCompleted, "cancelled");
		break;

	case ModbusGatewayMonLogRecordCode.ConnectError:
		target.m_lineAttr.m_flags = log.LineAttrFlags.Override;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		target.m_lineAttr.m_backColor = log.StdLogColor.Error;

		std.Error const* error = (std.Error const*) p;
		target.addHyperText (ModbusGatewayMonPartCode.ConnectCompleted, $"error: $(error.m_description)");
		break;

	case ModbusGatewayMonLogRecordCode.CommandError:
		target.m_lineAttr.m_flags = log.LineAttrFlags.Override;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		target.m_lineAttr.m_backColor = log.StdLogColor.Error;
		target.addHyperText (ModbusGatewayMonPartCode.ConnectCompleted, $"error: Unable send command to device");
		break;

	case ModbusGatewayMonLogRecordCode.Disconnected:
		TcpDisconnectLogRecordParams const* params = (TcpDisconnectLogRecordParams const*) p;
		char const* addressString = params.m_address.getString ();
		char const* closeKind = (params.m_flags & TcpDisconnectLogRecordFlags.Reset) ? "reset" : "closed";
		char const* initiator = (params.m_flags & TcpDisconnectLogRecordFlags.Remote) ? "remote" : "local";

		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Disconnect;
		target.m_lineAttr.m_backColor = log.StdLogColor.Disconnect;
		target.addHyperText ($"Disconnected from \e[34m$addressString\e[m ($closeKind by $initiator node)");
		break;

	case ModbusGatewayMonLogRecordCode.DumpPacket:
		if ((*(char const*)p & 0x80) == 0x00) {   // IN direction
			target.m_lineAttr.m_iconIdx = log.StdLogIcon.RxPacket;
			target.m_lineAttr.m_backColor = log.StdLogColor.Info;
			target.m_lineAttr.m_textColor = log.StdLogColor.Rx;
		} else {            // OUT direction
			target.m_lineAttr.m_iconIdx = log.StdLogIcon.TxPacket;
			target.m_lineAttr.m_backColor = log.StdLogColor.Info;
			target.m_lineAttr.m_textColor = log.StdLogColor.Tx;
		}

		char *_type;
		char _id;
		switch ((*(char const*)p) & 0x7f) {
			case 0x00:  // TCP Request
				_type = "TCP Req";
				break;

			case 0x01:  // TCP Responce
				_type = "TCP Resp";
				break;

			case 0x02:  // TCP Exception
				_type = "TCP Exception";
				break;

			case 0x03:  // RTU Request
				_type = "RTU Req";
				_id = *(char const*)(p + 2);
				break;

			case 0x04:  // RTU Responce
				_type = "RTU Resp";
				_id = *(char const*)(p + 2);
				break;

			case 0x05:  // ASCII Request
				_type = "ASCII Req";
				_id = (*(char const*)(p + 2) - 0x30)*16 + *(char const*)(p + 3) - 0x30;
				break;

			case 0x06:  // ASCII Responce
				_type = "ASCII Resp";
				_id = (*(char const*)(p + 2) - 0x30)*16 + *(char const*)(p + 3) - 0x30;
				break;

			default:
				_type = "Unknown";
				break;
		}

		char const channel = (*(char const*)(p + 1)) & 0x7f;
		if ((*(char const*)(p + 1) & 0x80) == 0x00) {   // TCP channel
			// Get IP and PORT info from packet
			char _strAddr[22];
			char _i = 0;
			do {
				_strAddr[_i] = *(char const*)(p + _i + 2);
				_i++;
			} while(((*(char const*)(p + _i + 1)) != 0) && (_i < 22));

			// Get Slave ID
			_id = *(char const*)(p + _i + 8);
			target.addHyperText ($"$_type TCP $_strAddr SlaveID #$_id");
			target.m_lineAttr.m_backColor = gui.StdColor.White;
			target.addBin (p + 2 + _i, size - 2 - _i);
		} else {                                    // Serial channel
			// Get SlaveID
			target.addHyperText ($"$_type Port#$channel SlaveID #$_id");
			target.m_lineAttr.m_backColor = gui.StdColor.White;
			target.addBin (p + 2, size - 2);
		}
		break;

	case ModbusGatewayMonLogRecordCode.Log:
		char const* str = (char const*)p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText ($"Log: $str");
		break;

	default:
		return false;
	}

	return true;
}

//..............................................................................

//..............................................................................
//
// J-Link RTT session
//

import "doc_Session.jnc"
import "io_JLink.jnc"
import "ui_History.jnc"
import "ui_BufferPropertySet.jnc"
import "ui_StdSessionInfoSet.jnc"
import "log_ThroughputCalc.jnc"
import "log_ChecksumCalc.jnc"
import "std_Buffer.jnc"
import "sys_Thread.jnc"

using extension ui.ComboBoxHistory;

//..............................................................................

class JLinkRttSession: doc.Session
{
protected:
	enum State
	{
		Closed,
		Opened,
	}

	enum ActionId
	{
		Open,
		_Count,
	}

	enum IconId
	{
		Open,
		Close,
		_Count,
	}

	enum StatusPaneId
	{
		State,
		_Count,
	}

	enum ConnectionType
	{
		Usb,
		TcpIp,
	}

	enum Defaults
	{
		ConnectionType       = JLinkRttSession.ConnectionType.Usb,
		Interface            = io.JLINKARM_TIF_SWD,
		Speed                = 4000,
		AutoDetectRttAddress = true,
		RttChannel           = 0,
		ReadDelay            = 100,
	}

protected:
	// J-Link

	State bindable m_state;
	io.JLinkLib m_jlink;
	sys.Thread m_readThread;
	size_t m_readBufferSize;
	uint_t m_readDelay;
	bool volatile m_readThreadStopFlag;
	int m_rttChannel;

	// toolbar, status bar & menu

	ui.Action* m_actionTable[ActionId._Count];
	ui.Icon* m_iconTable[IconId._Count];
	ui.StatusPane* m_statusPaneTable[StatusPaneId._Count];
	ui.ComboBox* m_connectionTypeCombo;
	ui.ComboBox* m_addressCombo;
	ui.ComboBox* m_deviceCombo;

	// property grid

	ui.FileProperty* m_jlinkLibPathProp;
	ui.EnumProperty* m_connectionTypeProp;
	ui.StringProperty* m_addressProp;
	ui.StringProperty* m_deviceProp;
	ui.EnumProperty* m_interfaceProp;
	ui.IntProperty* m_speedProp;
	ui.BoolProperty* m_autoDetectRttAddressProp;
	ui.StringProperty* m_rttAddressProp;
	ui.IntProperty* m_rttChannelProp;
	ui.BufferPropertySet m_bufferPropertySet;
	ui.IntProperty* m_readDelayProp;

	// information grid

	ui.StdSessionInfoSet m_stdSessionInfoSet;
	ui.ThroughputInfoSet m_throughputInfoSet;
	ui.ChecksumInfoSet m_checksumInfoSet;

	// ui reactor

	reactor m_uiReactor;

public:
	construct(doc.PluginHost* pluginHost);
	destruct();

	bool errorcode open();
	close();

	override void load(doc.Storage* storage);
	override void save(doc.Storage* storage);
	override void updateProperties();
	override bool errorcode applyProperties();
	override void restoreDefaultProperties();

	override size_t errorcode transmit(
		void const* p,
		size_t size
		);

protected:
	createUi();

	onOpen()
	{
		m_state ? close() : try open();
	}

	onNameComboEnter()
	{
		try open();
	}

	readThreadFunc();

	static void jlinkLogInfo(char const thin* p)
	{
		printf("JLINK INFO: %s\n", p);
	}

	static void jlinkLogError(char const thin* p)
	{
		printf("JLINK ERROR: %s\n", p);
	}
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

JLinkRttSession.construct(doc.PluginHost* pluginHost)
{
	basetype.construct(pluginHost);

	createUi();

	pluginHost.m_log.addSelectionProcessor(log.ThroughputCalcRangeProcessor.factory ~(m_throughputInfoSet));
	pluginHost.m_log.addSelectionProcessor(log.ChecksumCalcRangeProcessor.factory ~(m_checksumInfoSet));
	m_stdSessionInfoSet.addLogListener(pluginHost.m_log);
}

JLinkRttSession.destruct()
{
	m_readThreadStopFlag = true;
	m_readThread.waitAndClose();

	if (m_jlink.m_isOpen)
	{
		m_jlink.lib.JLINK_Close();
		m_jlink.close();
	}
}

JLinkRttSession.createUi()
{
	// toolbar

	ui.EnumPropertyOption connectionTypeTable[] =
	{
		{ "USB",    ConnectionType.Usb },
		{ "TCP/IP", ConnectionType.TcpIp },
	}

	ui.EnumPropertyOption interfaceTypeTable[] =
	{
		{ "JTAG",  io.JLINKARM_TIF_JTAG },
		{ "SWD",   io.JLINKARM_TIF_SWD },
		{ "FINE",  io.JLINKARM_TIF_FINE },
		{ "cJTAG", io.JLINKARM_TIF_CJTAG },
	}

	m_connectionTypeCombo = m_pluginHost.m_toolBar.addComboBox(
		"Connection:",
		connectionTypeTable,
		countof(connectionTypeTable)
		);

	m_pluginHost.m_toolBar.addLabel("Address:");
	m_addressCombo = m_pluginHost.m_toolBar.addComboBox(-1);
	m_addressCombo.m_isEditable = true;

	m_pluginHost.m_toolBar.addLabel("Device:");
	m_deviceCombo = m_pluginHost.m_toolBar.addComboBox(-1);
	m_deviceCombo.m_isEditable = true;

	m_iconTable[IconId.Open] = new ui.Icon("images/open.png");
	m_iconTable[IconId.Close] = new ui.Icon("images/close.png");

	m_actionTable[ActionId.Open] = createAction("Open", m_iconTable[IconId.Open]);
	m_actionTable[ActionId.Open].m_onTriggered += onOpen;

	// status bar

	m_statusPaneTable[StatusPaneId.State] = m_pluginHost.m_statusBar.addPane(, 80);

	// property grid

	m_jlinkLibPathProp = m_pluginHost.m_propertyGrid.createFileProperty(
		"J-Link library",
		"Specify the path to J-Link library"
		);

	m_jlinkLibPathProp.m_fileDialogCaption = "Locate J-Link Library";

	switch (sys.g_systemInfo.m_osKind)
	{
	case sys.OsKind.Windows:
		char const* cpuSuffix = sys.g_systemInfo.m_cpuKind == sys.CpuKind.Amd64 ? "_x64" : "ARM";
		m_jlinkLibPathProp.m_filter = $"J-Link library (JLink$cpuSuffix.dll);;Dynamic-link libraries (*.dll);;All files (*.*)";
		break;

	case sys.OsKind.Linux:
		m_jlinkLibPathProp.m_filter = "J-Link library (libjlinkarm.so);;Shared objects (*.so);;All files (*.*)";
		break;

	case sys.OsKind.Mac:
		m_jlinkLibPathProp.m_filter = "J-Link library (libjlinkarm.dylib);;Dynamic libraries (*.dylib);;All files (*.*)";
		break;
	};

	ui.GroupProperty* group = m_pluginHost.m_propertyGrid.createGroupProperty(
		"Connection",
		"J-Link connection settings"
		);

	m_connectionTypeProp = m_pluginHost.m_propertyGrid.createEnumProperty(
		group,,
		"Connection type",
		"Specify the whether to use USB connection or TCP/IP server",
		connectionTypeTable,
		countof(connectionTypeTable)
		);

	m_addressProp = m_pluginHost.m_propertyGrid.createStringProperty(
		group,,
		"TCP/IP server",
		"Specify the address of mailslot to open"
		);

	m_deviceProp = m_pluginHost.m_propertyGrid.createStringProperty(
		group,,
		"Device type",
		"Specify the target device type"
		);

	m_interfaceProp = m_pluginHost.m_propertyGrid.createEnumProperty(
		group,,
		"Interface type",
		"Specify the J-Link-to-device communication interface type",
		interfaceTypeTable,
		countof(interfaceTypeTable)
		);

	m_speedProp = m_pluginHost.m_propertyGrid.createIntProperty(
		group,,
		"Interface speed (kHz)",
		"Specify the J-Link-to-device communication speed"
		);

	group = m_pluginHost.m_propertyGrid.createGroupProperty(
		"RTT",
		"Segger J-Link RTT settings"
		);

	m_autoDetectRttAddressProp = m_pluginHost.m_propertyGrid.createBoolProperty(
		group,,
		"Auto-detect RTT address",
		"J-Link automatically detects the RTT control block"
		);

	m_rttAddressProp = m_pluginHost.m_propertyGrid.createStringProperty(
		group,,
		"RTT address",
		"Specify the address of RTT control block"
		);

	m_rttChannelProp = m_pluginHost.m_propertyGrid.createIntProperty(
		group,,
		"RTT channel",
		"Specify the index of RTT channel"
		);

	group = m_bufferPropertySet.createPropertiesGrouped(
		m_pluginHost.m_propertyGrid,,,
		ui.BufferPropertySet.PropertyId.ReadBlockSize
		);

	m_readDelayProp = m_pluginHost.m_propertyGrid.createIntProperty(
		group,,
		"Read delay (ms)",
		"Specify the sleep time between read requests"
		);

	// information grid

	ui.InformationGroup* infoGroup = m_pluginHost.m_informationGrid.createGroup("JLinkRtt");

	m_stdSessionInfoSet.createInformationValues(
		m_pluginHost.m_informationGrid,
		infoGroup,,
		ui.StdSessionInfoSet.InfoId.SessionTime |
		ui.StdSessionInfoSet.InfoId.RxTotalSize
		);

	m_throughputInfoSet.createInformationValuesGrouped(m_pluginHost.m_informationGrid);
	m_checksumInfoSet.createInformationValuesGrouped(m_pluginHost.m_informationGrid);

	m_pluginHost.m_informationGrid.resizeNameColumnToContents();

	m_uiReactor.start();
}

reactor JLinkRttSession.m_uiReactor
{
	m_title = $"J-Link RTT $(m_connectionTypeCombo.m_currentText)";
	m_isTransmitEnabled = m_state == State.Opened;
	m_actionTable[ActionId.Open].m_text = m_state ? "Close" : "Open";
	m_actionTable[ActionId.Open].m_icon = m_iconTable[m_state ? IconId.Close : IconId.Open];
	m_statusPaneTable[StatusPaneId.State].m_text = m_state ? "Opened" : "Closed";
	m_addressCombo.m_isEnabled = m_connectionTypeCombo.m_currentData == ConnectionType.TcpIp;
	m_addressProp.m_isEnabled = m_connectionTypeProp.m_value == ConnectionType.TcpIp;
	m_rttAddressProp.m_isEnabled = !m_autoDetectRttAddressProp.m_value;
}

bool errorcode JLinkRttSession.open()
{
	close();
	startSession();

	m_addressCombo.addEditTextToHistory();
	m_jlink.open(m_jlinkLibPathProp.m_value);

	if (m_connectionTypeCombo.m_currentData == ConnectionType.TcpIp)
		m_jlink.lib.JLINK_SelectIP(m_addressCombo.m_currentText, 0);

	char const thin* errorString = m_jlink.lib.JLINK_OpenEx(jlinkLogInfo, jlinkLogError);
	if (errorString)
	{
		std.setError(std.format("J-Link open failed: %s", errorString));
		throw;
	}

	char const* deviceName = m_deviceCombo.m_currentText;
	char buffer[256];

	int result = m_jlink.lib.JLINK_ExecCommand($"Device = $deviceName", buffer, sizeof(buffer) - 1);
	if (buffer[0])
	{
		std.setError(buffer);
		throw;
	}

	m_jlink.lib.JLINK_TIF_Select(m_interfaceProp.m_value);
	m_jlink.lib.JLINK_SetSpeed(m_speedProp.m_value);

	result = m_jlink.lib.JLINK_Connect();
	if (result)
	{
		std.setError("J-Link connect failed");
		throw;
	}

	int connectionCount = m_jlink.lib.JLINK_EMU_GetNumConnections();
	int isHalted = m_jlink.lib.JLINK_IsHalted();
	if (connectionCount == 1 && isHalted)
		m_jlink.lib.JLINK_Go();

	m_jlink.lib.JLINK_RTTERMINAL_Control(io.JLINKARM_RTTERMINAL_CMD_START, null);

	m_readThreadStopFlag = false;
	m_readBufferSize = m_bufferPropertySet.m_defaultReadBlockSize;
	m_readDelay = m_readDelayProp.m_value;
	m_rttChannel = m_rttChannelProp.m_value;
	m_readThread.start(readThreadFunc);

	writeLogString(JLinkRttLogRecordCode.Opened, deviceName);
	m_state = State.Opened;
	m_stdSessionInfoSet.startSession(m_pluginHost.m_mainThreadScheduler);
	return true;

catch:
	std.Error const* error = std.getLastError();
	writeLog(
		JLinkRttLogRecordCode.OpenError,
		error,
		error.m_size
		);

	if (m_jlink.m_isOpen)
		m_jlink.lib.JLINK_Close();

	m_jlink.close();
	return false;
}

JLinkRttSession.close()
{
	if (m_state != State.Opened)
		return;

	m_readThreadStopFlag = true;
	m_readThread.waitAndClose();
	m_jlink.lib.JLINK_Close();
	m_jlink.close();
	writeLog(JLinkRttLogRecordCode.Closed);
	m_state = State.Closed;
	m_stdSessionInfoSet.endSession();
}

void JLinkRttSession.load(doc.Storage* storage)
{
	m_addressCombo.loadHistory(storage, "addressHistory");
	m_jlinkLibPathProp.m_value = storage.readString("jlinkLibPath");
	m_connectionTypeCombo.m_currentData = storage.readInt("connectionType", Defaults.ConnectionType);
	m_addressCombo.m_editText = storage.readString("address", "localhost");
	m_deviceCombo.m_editText = storage.readString("device");
	m_interfaceProp.m_value = storage.readInt("interface", Defaults.Interface);
	m_speedProp.m_value = storage.readInt("speed", Defaults.Speed);
	m_autoDetectRttAddressProp.m_value = storage.readBool("autoDetectRttAddress");
	m_rttAddressProp.m_value = storage.readString("rttAddress");
	m_rttChannelProp.m_value = storage.readInt("rttChannel", Defaults.RttChannel);
	m_readDelayProp.m_value = storage.readInt("readDelay", Defaults.ReadDelay);
	m_bufferPropertySet.load(storage);
}

void JLinkRttSession.save(doc.Storage* storage)
{
	m_bufferPropertySet.save(storage);
	m_addressCombo.saveHistory(storage, "addressHistory");
	storage.writeString("jlinkLibPath", m_jlinkLibPathProp.m_value);
	storage.writeInt("connectionType", m_connectionTypeCombo.m_currentData);
	storage.writeString("address", m_addressCombo.m_editText);
	storage.writeString("device", m_deviceCombo.m_editText);
	storage.writeInt("interface", m_interfaceProp.m_value);
	storage.writeInt("speed", m_speedProp.m_value);
	storage.writeBool("autoDetectRttAddress", m_autoDetectRttAddressProp.m_value);
	storage.writeString("rttAddress", m_rttAddressProp.m_value);
	storage.writeInt("rttChannel", m_rttChannelProp.m_value);
	storage.writeInt("readDelay", m_readDelayProp.m_value);
}

void JLinkRttSession.updateProperties()
{
	m_connectionTypeProp.m_currentIndex = m_connectionTypeCombo.m_currentIndex;
	m_addressProp.m_value = m_addressCombo.m_editText;
	m_deviceProp.m_value = m_deviceCombo.m_editText;
}

bool errorcode JLinkRttSession.applyProperties()
{
	m_connectionTypeCombo.m_currentIndex = m_connectionTypeProp.m_currentIndex;
	m_addressCombo.m_editText = m_addressProp.m_value;
	m_deviceCombo.m_editText = m_deviceProp.m_value;
	m_readBufferSize = m_bufferPropertySet.m_readBlockSizeProp.m_value;
	m_readDelay = m_readDelayProp.m_value;
	m_rttChannel = m_rttChannelProp.m_value;
	return true;
}

void JLinkRttSession.restoreDefaultProperties()
{
	m_connectionTypeProp.m_value = Defaults.ConnectionType;
	m_interfaceProp.m_value = Defaults.Interface;
	m_speedProp.m_value = Defaults.Speed;
	m_autoDetectRttAddressProp.m_value = Defaults.AutoDetectRttAddress;
	m_rttChannelProp.m_value = Defaults.RttChannel;
	m_readDelayProp.m_value = Defaults.ReadDelay;
	m_bufferPropertySet.restoreDefaults();
}

size_t errorcode JLinkRttSession.transmit(
	void const* p,
	size_t size
	)
{
	return m_jlink.m_isOpen ?
		m_jlink.lib.JLINK_RTTERMINAL_Write(m_rttChannel, p, size) :
		-1;
}

JLinkRttSession.readThreadFunc()
{
	std.Buffer readBuffer;
	readBuffer.setSize(m_readBufferSize);

	while (!m_readThreadStopFlag)
	{
		if (readBuffer.m_size != m_readBufferSize)
			readBuffer.setSize(m_readBufferSize);

		int result = m_jlink.lib.JLINK_RTTERMINAL_Read(
			m_rttChannel,
			readBuffer.m_p,
			readBuffer.m_size
			);

		if (result < 0)
		{
			std.setError("Error reading RTT data");
			writeLogLastError(log.StdRecordCode.Error);
			break;
		}

		writeLog(log.StdRecordCode.Rx, readBuffer.m_p, result);
		sys.sleep(m_readDelay);
	}
}

//..............................................................................

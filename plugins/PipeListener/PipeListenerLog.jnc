//.............................................................................
//
// Pipe Listener log packet declarations and representer
//

//.............................................................................

enum PipeListenerLogRecordCode
{
	Listening,
	ListenError,
	ListenStopped,
	ClientConnected,
	ClientDisconnected,
	ClientRejected,
}

//.............................................................................

bool representPipeListenerLog  (
	log.RepresenterTarget* target,
	uint_t recordCode,
	void const* p,
	size_t size,
	uint_t foldFlags
	)
{
	switch (recordCode)
	{
	case PipeListenerLogRecordCode.Listening:
		char const* name = (char const*) p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Play;
		target.m_lineAttr.m_backColor = log.StdLogColor.Start;
		target.addHyperText ($"Listening on \e[34m$name<>");
		break;

	case PipeListenerLogRecordCode.ListenError:
		std.Error const* error = (std.Error const*) p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		target.m_lineAttr.m_backColor = log.StdLogColor.Error;
		target.addHyperText ($"Cannot listen: $(error.m_description)");
		break;

	case PipeListenerLogRecordCode.ListenStopped:
		char const* name = (char const*) p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Pause;
		target.m_lineAttr.m_backColor = log.StdLogColor.Stop;
		target.addHyperText ($"Stopped listening on \e[34m$name");
		break;

	case PipeListenerLogRecordCode.ClientConnected:
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText ("Client connected");
		break;

	case PipeListenerLogRecordCode.ClientDisconnected:
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText ("Client disconnected");
		break;

	case PipeListenerLogRecordCode.ClientRejected:
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Warning;
		target.m_lineAttr.m_backColor = log.StdLogColor.Warning;
		target.addHyperText ("Client connected and rejected ");
		break;

	default:
		return false;
	}

	return true;
}

//.............................................................................

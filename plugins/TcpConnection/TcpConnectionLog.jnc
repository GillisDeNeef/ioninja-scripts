//.............................................................................
//
// TCP Connection log packet declarations and representer
//

//.............................................................................

enum TcpConnectionLogRecordCode
{
	Resolving,
	Connecting,
	ConnectingFrom,
	ResolveCompleted,
	ConnectCompleted,
	ConnectCancelled,
	ConnectError,
	Disconnected,
}

enum TcpConnectionPartCode
{
	Connecting       = 1 | log.PartCodeFlags.MergeableForward,
	ConnectCompleted = 1 | log.PartCodeFlags.MergeableBackward,
}

bitflag enum TcpDisconnectLogRecordFlags
{
	Remote,
	Reset,	
}

struct TcpDisconnectLogRecordParams
{
	io.SocketAddress m_address;
	uint_t m_flags;
}

//.............................................................................

class TcpConnectionLogRepresenter: log.Representer
{
	override bool represent (
		log.RepresenterTarget* target,
		uint_t recordCode,
		void const* p,
		size_t size,
		uint_t foldFlags
		);
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bool TcpConnectionLogRepresenter.represent (
	log.RepresenterTarget* target,
	uint_t recordCode,
	void const* p,
	size_t size,
	uint_t foldFlags
	)
{
	switch (recordCode)
	{
	case TcpConnectionLogRecordCode.Resolving:
		char const* addressString = (char const*) p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText (TcpConnectionPartCode.Connecting, $"Resolving \e[34m$addressString\e[m...");
		break;

	case TcpConnectionLogRecordCode.Connecting:
		char const* addressString = try io.formatSocketAddress ((io.SocketAddress const*) p);
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText (TcpConnectionPartCode.Connecting, $"Connecting to \e[34m$addressString\e[m...");
		break;
		
	case TcpConnectionLogRecordCode.ConnectingFrom:
		char const* remoteAddressString = try io.formatSocketAddress ((io.SocketAddress const*) p);
		char const* localAddressString = try io.formatSocketAddress ((io.SocketAddress const*) p + 1);
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText (TcpConnectionPartCode.Connecting, $"Connecting to \e[34m$remoteAddressString\e[m from \e[34m$localAddressString\e[m...");
		break;

	case TcpConnectionLogRecordCode.ResolveCompleted:
		char const* addressString = try io.formatSocketAddress ((io.SocketAddress const*) p);
		target.addHyperText (TcpConnectionPartCode.ConnectCompleted, $"ok (\e[34m$addressString\e[m)");
		break;

	case TcpConnectionLogRecordCode.ConnectCompleted:
		target.m_lineAttr.m_flags = log.LineAttrFlags.Override;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Play;
		target.m_lineAttr.m_backColor = log.StdLogColor.Start;
		target.addHyperText (TcpConnectionPartCode.ConnectCompleted, "ok");
		break;

	case TcpConnectionLogRecordCode.ConnectCancelled:
		target.addHyperText (TcpConnectionPartCode.ConnectCompleted, "cancelled");
		break;

	case TcpConnectionLogRecordCode.ConnectError:
		target.m_lineAttr.m_flags = log.LineAttrFlags.Override;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		target.m_lineAttr.m_backColor = log.StdLogColor.Error;

		jnc.Error const* Error = (jnc.Error const*) p;
		target.addHyperText (TcpConnectionPartCode.ConnectCompleted, $"error ($(Error.m_description))");
		break;

	case TcpConnectionLogRecordCode.Disconnected:
		TcpDisconnectLogRecordParams const* params = (TcpDisconnectLogRecordParams const*) p;
		char const* addressString = try io.formatSocketAddress (&params->m_address);
		char const* closeKind = (params.m_flags & TcpDisconnectLogRecordFlags.Reset) ? "reset" : "closed";
		char const* initiator = (params.m_flags & TcpDisconnectLogRecordFlags.Remote) ? "remote" : "local";

		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Pause;
		target.m_lineAttr.m_backColor = log.StdLogColor.Stop;	
		target.addHyperText ($"Disconnected from \e[34m$addressString\e[m ($closeKind by $initiator node)");
		break;

	default:
		return false;
	}

	return true;
}

//.............................................................................

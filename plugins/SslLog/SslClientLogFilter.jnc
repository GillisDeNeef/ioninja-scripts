//..............................................................................
//
// Socket client log filter (TCP Listener, TCP Proxy)
//

import "log_Filter.jnc"
import "SslLogRecordCode.jnc"

//..............................................................................

class SslClientLogFilter: SocketClientLogFilter
{
protected:
	override bool filter(
		uint64_t timestamp,
		uint64_t recordCode,
		void const* p,
		size_t size
		);
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bool SslClientLogFilter.filter(
	uint64_t timestamp,
	uint64_t recordCode,
	void const* p,
	size_t size
	)
{
	if (!m_filterAddress.m_family) // empty address means, filtering is off
		return true;

	bool result = basetype.filter(timestamp, recordCode, p, size);
	if (!result)
		return false;

	switch (recordCode)
	{
	case SslLogRecordCode.SslHandshaking:
	case SslLogRecordCode.SslHandshakeCompleted:
	case SslLogRecordCode.SslCertificate:
	case SslLogRecordCode.SslCipher:
	case SslLogRecordCode.SslConnectionCompleted:
		return m_isVisible;

	default:
		return true; // everything else is visible
	}
}

//..............................................................................

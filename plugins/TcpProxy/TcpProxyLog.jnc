//.............................................................................
//
// TCP Proxy log packet declarations and representer
//

//.............................................................................

enum TcpProxyLogRecordCode
{
	Listening,
	ListenError,
	ListenStopped,
	ListenCanceled,
	ClientConnected,
	ClientDisconnected,
	ClientRejected,
	TargetConnecting,
	TargetConnectCompleted,
	TargetConnectCancelled,
	TargetConnectError,
	TargetDisconnected,
	TargetResolving,
	TargetResolveCompleted,
	TargetResolvingError,
}

enum TcpProxyPartCode
{
	TargetConnecting       = 1 | log.PartCodeFlags.MergeableForward,
	TargetConnectCompleted = 1 | log.PartCodeFlags.MergeableBackward,
}

//.............................................................................

class TcpProxyLogRepresenter: log.Representer
{
	override bool represent (
		log.RepresenterTarget* target,
		uint_t recordCode,
		void const* p,
		size_t size,
		uint_t foldFlags
		);
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bool TcpProxyLogRepresenter.represent (
	log.RepresenterTarget* target,
	uint_t recordCode,
	void const* p,
	size_t size,
	uint_t foldFlags
	)
{
	switch (recordCode)
	{
	case TcpProxyLogRecordCode.Listening:
		char const* addressString = try io.formatSocketAddress ((io.SocketAddress const*) p);
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Play;
		target.m_lineAttr.m_backColor = log.StdLogColor.Start;
		target.addHyperText ($"Listening on \e[34m$addressString");
		break;

	case TcpProxyLogRecordCode.ListenError:
		jnc.Error const* Error = (jnc.Error const*) p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		target.m_lineAttr.m_backColor = log.StdLogColor.Error;
		target.addHyperText (TcpProxyPartCode.TargetConnectCompleted, $"Cannot listen ($(Error.m_description))");
		break;

	case TcpProxyLogRecordCode.ListenStopped:
		char const* addressString = try io.formatSocketAddress ((io.SocketAddress const*) p);
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Pause;
		target.m_lineAttr.m_backColor = log.StdLogColor.Stop;
		target.addHyperText ($"Stopped listening on \e[34m$addressString");
		break;

	case TcpProxyLogRecordCode.ListenCanceled:
		target.addHyperText (TcpProxyPartCode.TargetConnectCompleted, "cancelled");
		break;

	case TcpProxyLogRecordCode.ClientConnected:
		char const* addressString = try io.formatSocketAddress ((io.SocketAddress const*) p);
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText ($"Client connected from \e[34m$addressString");
		break;

	case TcpProxyLogRecordCode.ClientDisconnected:
		char const* addressString = try io.formatSocketAddress ((io.SocketAddress const*) p);
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText ($"Client \e[34m$addressString\e[m disconnected");
		break;

	case TcpProxyLogRecordCode.ClientRejected:
		char const* addressString = try io.formatSocketAddress ((io.SocketAddress const*) p);
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Warning;
		target.m_lineAttr.m_backColor = log.StdLogColor.Warning;
		target.addHyperText ($"Client \e[34m$addressString\e[m is rejected ");
		break;

	case TcpProxyLogRecordCode.TargetConnecting:
		char const* addressString = try io.formatSocketAddress ((io.SocketAddress const*) p);
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText (TcpProxyPartCode.TargetConnecting, $"Connecting to \e[34m$addressString\e[m...");
		break;

	case TcpProxyLogRecordCode.TargetConnectCompleted:
		target.m_lineAttr.m_flags = log.LineAttrFlags.Override;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Play;
		target.m_lineAttr.m_backColor = log.StdLogColor.Start;
		target.addHyperText (TcpProxyPartCode.TargetConnectCompleted, "ok");
		break;

	case TcpProxyLogRecordCode.TargetConnectCancelled:
		target.addHyperText (TcpProxyPartCode.TargetConnectCompleted, "cancelled");
		break;

	case TcpProxyLogRecordCode.TargetConnectError:
		target.m_lineAttr.m_flags = log.LineAttrFlags.Override;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		target.m_lineAttr.m_backColor = log.StdLogColor.Error;

		jnc.Error const* Error = (jnc.Error const*) p;
		target.addHyperText (TcpProxyPartCode.TargetConnectCompleted, $"error ($(Error.m_description))");
		break;

	case TcpProxyLogRecordCode.TargetDisconnected:
		char const* addressString = try io.formatSocketAddress ((io.SocketAddress const*) p);
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Pause;
		target.m_lineAttr.m_backColor = log.StdLogColor.Stop;
		target.addHyperText ($"Disconnected from \e[34m$addressString");
		break;
		
	case TcpProxyLogRecordCode.TargetResolving:
		char const* addressString = (char const*) p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText (TcpProxyPartCode.TargetConnecting, $"Resolving \e[34m$addressString\e[m...");
		break;
		
	case TcpProxyLogRecordCode.TargetResolveCompleted:
		char const* addressString = try io.formatSocketAddress ((io.SocketAddress const*) p);
		target.addHyperText (TcpProxyPartCode.TargetConnectCompleted, $"ok (\e[34m$addressString\e[m)");
		break;
		
	case TcpProxyLogRecordCode.TargetResolvingError:
		target.m_lineAttr.m_flags = log.LineAttrFlags.Override;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		target.m_lineAttr.m_backColor = log.StdLogColor.Error;

		jnc.Error const* Error = (jnc.Error const*) p;
		target.addHyperText (TcpProxyPartCode.TargetConnectCompleted, $"error ($(Error.m_description))");
		break;

	default:
		return false;
	}

	return true;
}

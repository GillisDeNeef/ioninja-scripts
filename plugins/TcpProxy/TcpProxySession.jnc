//..............................................................................
//
// TCP Proxy session
//

import "doc_Session.jnc"
import "io_base.jncx"
import "io_Socket.jnc"
import "io_HostNameResolver.jnc"
import "ui_History.jnc"
import "ui_SocketUi.jnc"
import "ui_BufferPropertySet.jnc"
import "ui_StdSessionInfoSet.jnc"
import "log_ThroughputCalc.jnc"
import "log_ChecksumCalc.jnc"
import "std_Buffer.jnc"
import "std_List.jnc"

using extension ui.ComboBoxHistory;

//..............................................................................

class TcpProxySession: doc.Session
{
protected:
	enum Defaults
	{
		LocalPort           = 8080,
		TxDisconnectTimeout = 1000, // wait TX on disconnect for at most 1 sec
	}

	enum ListenerState
	{
		Closed,
		Resolving,
		Listening,
	}

	static char const* m_listenerStateStringTable[] =
	{
		"Not listening",
		"Resolving...",
		"Listening",
	}

	enum ServerConnectionState
	{
		Closed,
		Connected,
	}

	enum ClientConnectionState
	{
		Closed,
		Connecting,
		Connected,
	}

	static char const* m_clientConnectionStateStringTable[] =
	{
		"Not connected",
		"Connecting...",
		"Connected",
	}

	enum ActionId
	{
		Listen,
		Disconnect,
		DisconnectAll,
		ApplyFilter,
		_Count,
	}

	enum IconId
	{
		Listen,
		StopListen,
		Disconnect,
		_Count,
	}

	enum StatusPaneId
	{
		ListenerState,
		TargetAddress,
		ClientCount,
		_Count,
	}

	class Client
	{
		std.ListEntry* m_entry;

		// server-side

		ServerConnectionState bindable m_serverConnectionState;
		io.Socket* m_serverConnectionSocket;
		io.SocketAddress m_serverRemoteAddress;
		std.Buffer m_serverPendingData;
		uint_t m_serverConnectionSyncId;

		// client-side

		ClientConnectionState bindable m_clientConnectionState;
		io.Socket m_clientConnectionSocket;
		io.SocketAddress m_clientRemoteAddress;
		uint_t m_clientConnectionSyncId;
	}

protected:
	// server listener socket

	ListenerState bindable m_listenerState;
	io.Socket m_listenerSocket;
	io.SocketAddress m_localAddress;
	uint_t m_listenerSyncId;
	std.List m_clientList;
	size_t bindable m_clientCount;
	io.SocketAddress m_targetAddress;
	io.SocketAddress m_currentClientAddress;
	std.Buffer m_readBuffer;
	SocketClientLogFilter m_filter;

	// resolver

	io.HostNameResolver m_resolver;
	uint_t m_resolverSyncId;
	bool m_isTargetAddressResolved;
	bool m_wasTargetAddressChangedWhileResolving;

	// toolbar, status bar & menu

	ui.Action* m_actionTable[ActionId._Count];
	ui.Icon* m_iconTable[IconId._Count];
	ui.StatusPane* m_statusPaneTable[StatusPaneId._Count];
	ui.ComboBox* m_adapterCombo;
	ui.ComboBox* m_serverPortCombo;
	ui.ComboBox* m_targetAddressCombo;
	ui.ComboBox* m_clientCombo;
	ui.ComboBox* m_clientFilterCombo;

	// property grid

	ui.SocketPropertySet m_listenerSocketPropertySet;
	ui.SocketPropertySet m_connectionSocketPropertySet;
	ui.BufferPropertySet m_bufferPropertySet;

	// information grid

	ui.StdSessionInfoSet m_stdSessionInfoSet;
	ui.ThroughputInfoSet m_throughputInfoSet;
	ui.ChecksumInfoSet m_checksumInfoSet;

	// ui reactor

	reactor m_uiReactor;

public:
	construct(doc.PluginHost* pluginHost);

	bool errorcode listen();
	stopListen();
	disconnect();
	disconnectAll();

	override void load(doc.Storage* storage);
	override void save(doc.Storage* storage);
	override void updateProperties();
	override bool errorcode applyProperties();
	override void restoreDefaultProperties();

protected:
	onListen();
	onTargetAddressChanged();

	onSetClientFilter()
	{
		try applyClientFilter(true);
	}

	onResolverEvent(
		uint_t syncId,
		io.HostNameResolverEvents triggeredEvents
		);

	onListenerSocketEvent(
		uint_t syncId,
		io.SocketEvents triggeredEvents
		);

	onServerConnectionSocketEvent(
		Client* client,
		uint_t syncId,
		io.SocketEvents triggeredEvents
		);

	onClientConnectionSocketEvent(
		Client* client,
		uint_t syncId,
		io.SocketEvents triggeredEvents
		);

	bool errorcode applyClientFilter(bool rebuildLog);
	bool connectTarget();
	disconnectTarget();

	createUi();
	listenImpl();
	handleListenError(std.Error const* error);
	handleConnectError(std.Error const* error);
	waitListenerSocketEvents();
	waitClientConnectionSocketEvents(Client* client);
	waitServerConnectionSocketEvents(Client* client);
	disconnect(Client* client);
	addClient(Client* client);
	removeClient(Client* client);
	setCurrentClient(Client* client);
	size_t errorcode forwardDataFromClientToServer();
	size_t errorcode forwardDataFromServerToClient();
}


// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

TcpProxySession.construct(doc.PluginHost* pluginHost)
{
	basetype.construct(pluginHost);

	createUi();

	pluginHost.m_log.addSelectionProcessor(log.ThroughputCalcRangeProcessor.factory~(m_throughputInfoSet));
	pluginHost.m_log.addSelectionProcessor(log.ChecksumCalcRangeProcessor.factory~(m_checksumInfoSet));
	pluginHost.m_log.addFilter(m_filter);
	m_stdSessionInfoSet.addLogListener(pluginHost.m_log);
}

TcpProxySession.createUi()
{
	// toolbar

	m_pluginHost.m_toolBar.addLabel("Filter:");
	m_clientFilterCombo = m_pluginHost.m_toolBar.addComboBox(-1);
	m_clientFilterCombo.m_isEditable = true;
	m_clientFilterCombo.m_onEnter += onSetClientFilter;
	m_clientFilterCombo.m_placeholderText = "Enter client address to filter...";
	m_clientFilterCombo.m_toolTipText = "View only communications with the specified client";

	m_actionTable[ActionId.ApplyFilter] = createAction("Apply filter", "images/apply.png");
	m_actionTable[ActionId.ApplyFilter].m_onTriggered += onSetClientFilter;

	m_pluginHost.m_toolBar.addLabel("Client:");
	m_clientCombo = m_pluginHost.m_toolBar.addComboBox(-1);

	m_actionTable[ActionId.Disconnect] = createAction("Disconnect", "images/disconnect.png");
	m_actionTable[ActionId.Disconnect].m_onTriggered += disconnect;
	m_actionTable[ActionId.DisconnectAll] = createAction("Disconnect All", "images/disconnect-all.png");
	m_actionTable[ActionId.DisconnectAll].m_onTriggered += disconnectAll;

	m_pluginHost.m_toolBar.addLabel("Adapter:");
	m_adapterCombo = ui.createNetworkAdapterComboBox(m_pluginHost.m_toolBar, ui.NetworkAdapterUsage.Listener);

	m_pluginHost.m_toolBar.addLabel("Port:");
	m_serverPortCombo = m_pluginHost.m_toolBar.addComboBox();
	m_serverPortCombo.m_isEditable = true;
	m_serverPortCombo.m_editText = "1001";

	m_pluginHost.m_toolBar.addLabel("Remote:");
	m_targetAddressCombo = m_pluginHost.m_toolBar.addComboBox(-1);
	m_targetAddressCombo.m_isEditable = true;
	m_targetAddressCombo.m_editText = "127.0.0.1:1002";
	m_targetAddressCombo.m_onChanged += onTargetAddressChanged;
	m_targetAddressCombo.m_placeholderText = "Enter a remote IP or hostname...";

	m_iconTable[IconId.Listen] = new ui.Icon("images/listen.png");
	m_iconTable[IconId.StopListen] = new ui.Icon("images/pause.png");
	m_actionTable[ActionId.Listen] = createAction("Listen", m_iconTable [IconId.Listen]);
	m_actionTable[ActionId.Listen].m_onTriggered += onListen;

	// status bar

	m_statusPaneTable[StatusPaneId.ListenerState] = m_pluginHost.m_statusBar.addPane(, 80);
	m_statusPaneTable[StatusPaneId.TargetAddress] = m_pluginHost.m_statusBar.addPane(, 100);
	m_statusPaneTable[StatusPaneId.TargetAddress].m_color = ui.StdColor.Blue;
	m_statusPaneTable[StatusPaneId.ClientCount] = m_pluginHost.m_statusBar.addPane(, 80);

	// property grid

	ui.GroupProperty* group = m_pluginHost.m_propertyGrid.createGroupProperty(
		"Server",
		"TCP server settings"
		);

	m_listenerSocketPropertySet.createProperties(
		m_pluginHost.m_propertyGrid,
		group,,
		ui.SocketPropertySet.PropertyId.AllTcpServer &
		~ui.SocketPropertySet.PropertyId.TcpOptions
		);

	m_listenerSocketPropertySet.m_defaultLocalPort = Defaults.LocalPort;

	group = m_pluginHost.m_propertyGrid.createGroupProperty(
		"Connection",
		"TCP connection settings"
		);

	m_connectionSocketPropertySet.createProperties(
		m_pluginHost.m_propertyGrid,
		group,,
		ui.SocketPropertySet.PropertyId.RemoteAddress |
		ui.SocketPropertySet.PropertyId.RemotePort |
		ui.SocketPropertySet.PropertyId.TcpOptions
		);

	m_bufferPropertySet.createPropertiesGrouped(m_pluginHost.m_propertyGrid);

	// information grid

	ui.InformationGroup* infoGroup = m_pluginHost.m_informationGrid.createGroup("TCP proxy");

	m_stdSessionInfoSet.createInformationValues(m_pluginHost.m_informationGrid, infoGroup);
	m_throughputInfoSet.createInformationValuesGrouped(m_pluginHost.m_informationGrid);
	m_checksumInfoSet.createInformationValuesGrouped(m_pluginHost.m_informationGrid);

	m_pluginHost.m_propertyGrid.resizeNameColumnToContents();
	m_pluginHost.m_informationGrid.resizeNameColumnToContents();

	m_uiReactor.start();
}

TcpProxySession.onListen()
{
	if (m_listenerState)
		stopListen();
	else
		try listen();
}

bool errorcode TcpProxySession.listen()
{
	stopListen();
	startSession();

	m_serverPortCombo.addEditTextToHistory();
	m_targetAddressCombo.addEditTextToHistory();

	char const* targetAddressString = m_targetAddressCombo.m_editText;

	io.SocketAddress targetAddress;
	bool isDirectAddress = try targetAddress.parse(targetAddressString);
	if (isDirectAddress || m_isTargetAddressResolved)
	{
		if (isDirectAddress)
		{
			if (!targetAddress.m_port)
				targetAddress.m_port = m_connectionSocketPropertySet.m_remotePortProp.m_value;

			m_targetAddress = targetAddress;
		}

		listenImpl();
	}
	else
	{
		m_logWriter.write(
			SocketLogRecordCode.Resolving,
			targetAddressString,
			strlen(targetAddressString)
			);

		m_resolver.resolve(targetAddressString);

		m_resolver.wait(
			io.HostNameResolverEvents.Resolved | io.HostNameResolverEvents.Error,
			onResolverEvent~(++m_resolverSyncId) @ m_pluginHost.m_mainThreadScheduler
			);

		m_listenerState = ListenerState.Resolving;
		m_isTargetAddressResolved = false;
		m_wasTargetAddressChangedWhileResolving = false;
	}

	return true;

catch:
	handleListenError(std.getLastError());
	return false;
}

TcpProxySession.listenImpl()
{
	io.SocketAddress address = *(io.SocketAddress const*)m_adapterCombo.m_currentData;
	address.m_port = (uint16_t)atoi(m_serverPortCombo.m_editText);

	m_listenerSocket.open(io.Protocol.Tcp, &address);
	m_listenerSocket.listen();

	m_logWriter.write(
		SocketLogRecordCode.Listening,
		&address,
		sizeof(address)
		);

	m_localAddress = address;
	m_listenerState = ListenerState.Listening;
	waitListenerSocketEvents();
	m_stdSessionInfoSet.startSession(m_pluginHost.m_mainThreadScheduler);

catch:
	handleListenError(std.getLastError());
}

TcpProxySession.stopListen()
{
	m_serverPortCombo.m_backgroundColor = ui.StdColor.White;
	m_targetAddressCombo.m_backgroundColor = ui.StdColor.White;

	switch (m_listenerState)
	{
		case ListenerState.Closed:
			return;

		case ListenerState.Resolving:
			m_logWriter.write(SocketLogRecordCode.ResolveCancelled);
			m_resolverSyncId++;
			break;

		case ListenerState.Listening:
			m_logWriter.write(
				SocketLogRecordCode.ListenStopped,
				&m_localAddress,
				sizeof(m_localAddress)
				);
			break;
	}

	m_listenerSocket.close();
	m_listenerState = ListenerState.Closed;
	m_listenerSyncId++;
	m_resolverSyncId++;
	m_stdSessionInfoSet.endSession();
}

TcpProxySession.disconnect()
{
	Client* client = m_clientCombo.m_currentData;
	if (client)
		disconnect(client);
}

TcpProxySession.disconnectAll()
{
	while (m_clientList.m_count)
		disconnect(m_clientList.m_head.m_data);
}

TcpProxySession.disconnect(TcpProxySession.Client* client)
{
	TcpDisconnectLogRecordParams params;
	params.m_address = client.m_clientRemoteAddress;
	params.m_flags = 0;

	if (m_connectionSocketPropertySet.m_tcpResetProp.m_value)
		params.m_flags |= TcpDisconnectLogRecordFlags.Reset;

	m_logWriter.write(
		SocketLogRecordCode.ClientDisconnected,
		&params,
		sizeof(params)
		);

	removeClient(client);
}

void TcpProxySession.addClient(TcpProxySession.Client* client)
{
	client.m_entry = m_clientList.add(client);
	m_clientCombo.addItemSetCurrent(client.m_clientRemoteAddress.getString(), client);
	m_clientCount = m_clientList.m_count;
	m_currentClientAddress = client.m_clientRemoteAddress;
}

void TcpProxySession.removeClient(TcpProxySession.Client* client)
{
	client.m_socket.close();
	client.m_syncId++;

	m_clientList.remove(client.m_entry);

	for (size_t i = 0; i < m_clientCombo.m_itemCount; i++)
		if (m_clientCombo.m_itemData[i] == client)
		{
			m_clientCombo.removeItem(i);
			break;
		}

	m_clientCount = m_clientList.m_count;
	m_currentClientAddress = null;
}

void TcpProxySession.setCurrentClient(TcpProxySession.Client* client)
{
	if (m_currentClientAddress.isEqual(client.m_address))
		return;

	m_logWriter.write(
		SocketLogRecordCode.ClientChanged,
		&client.m_address,
		sizeof(client.m_address)
		);

	m_currentClientAddress = client.m_address;
}

bool errorcode TcpProxySession.applyClientFilter(bool rebuildLog)
{
	m_pluginHost.m_log.suspend();
	bool result = try m_filter.setFilter(m_clientFilterCombo.m_editText);
	m_pluginHost.m_log.resume();

	if (!result)
	{
		m_clientFilterCombo.m_backgroundColor = ui.StdColor.PastelRed;
		return false;
	}

	m_clientFilterCombo.addEditTextToHistory();
	m_clientFilterCombo.m_backgroundColor = ui.ColorFlags.Transparent;

	if (rebuildLog)
		m_pluginHost.m_log.rebuild();

	return true;
}

bool TcpProxySession.connectTarget()
{
	disconnectTarget();

	m_logWriter.write(
		SocketLogRecordCode.Connecting,
		&m_targetAddress,
		sizeof(m_targetAddress)
		);

	m_clientConnectionSocket.open(m_targetAddress.m_family, io.Protocol.Tcp);
	m_clientConnectionSocket.connect(&m_targetAddress);

	m_clientConnectionState = ClientConnectionState.Connecting;
	waitClientConnectionSocketEvents();
	return true;

catch:
	handleConnectError(std.getLastError());
	return false;
}

TcpProxySession.disconnectTarget()
{
	if (m_clientConnectionState != ClientConnectionState.Connected)
		return;

	TcpDisconnectLogRecordParams params;
	params.m_address = m_targetAddress;

	m_logWriter.write(SocketLogRecordCode.Disconnected, &params, sizeof(params));

	m_clientConnectionSocket.close();
	m_clientConnectionState = ClientConnectionState.Closed;
}

override void TcpProxySession.load(doc.Storage* storage)
{
	m_serverPortCombo.loadHistory(storage, "portHistory");
	m_targetAddressCombo.loadHistory(storage, "targetAddressHistory");
	m_adapterCombo.m_currentIndex  = storage.readInt("adapterIdx");
	m_serverPortCombo.m_editText = storage.readString("port");
	m_targetAddressCombo.m_editText = storage.readString("targetAddress");

	m_listenerSocketPropertySet.load(storage);
	m_connectionSocketPropertySet.load(storage);
	m_bufferPropertySet.load(storage);
	m_readBuffer.setSize(m_bufferPropertySet.m_readBufferSizeProp.m_value);
}

override void TcpProxySession.save(doc.Storage* storage)
{
	m_serverPortCombo.saveHistory(storage, "portHistory");
	m_targetAddressCombo.saveHistory(storage, "targetAddressHistory");

	m_listenerSocketPropertySet.save(storage);
	m_connectionSocketPropertySet.save(storage);
	m_bufferPropertySet.save(storage);

	storage.writeInt("adapterIdx", (int) m_adapterCombo.m_currentIndex);
	storage.writeString("port", m_serverPortCombo.m_editText);
	storage.writeString("targetAddress", m_targetAddressCombo.m_editText);
}

override void TcpProxySession.updateProperties()
{
	m_listenerSocketPropertySet.m_adapterProp.m_currentIndex = m_adapterCombo.m_currentIndex;
	m_listenerSocketPropertySet.m_localPortProp.m_value = atoi(m_serverPortCombo.m_editText);
	m_connectionSocketPropertySet.m_remoteAddressProp.m_value = m_targetAddressCombo.m_editText;
}

override bool errorcode TcpProxySession.applyProperties()
{
	m_adapterCombo.m_currentIndex = m_listenerSocketPropertySet.m_adapterProp.m_currentIndex;
	m_serverPortCombo.m_editText = $"$(m_listenerSocketPropertySet.m_localPortProp.m_value)";
	m_targetAddressCombo.m_editText = m_connectionSocketPropertySet.m_remoteAddressProp.m_value;
	m_readBuffer.setSize(m_bufferPropertySet.m_readBufferSizeProp.m_value);
	return true;
}

override void TcpProxySession.restoreDefaultProperties()
{
	m_listenerSocketPropertySet.restoreDefaults();
	m_connectionSocketPropertySet.restoreDefaults();
	m_bufferPropertySet.restoreDefaults();
}

TcpProxySession.onTargetAddressChanged()
{
	m_isTargetAddressResolved = false;

	if (m_listenerState == ListenerState.Resolving)
		m_wasTargetAddressChangedWhileResolving = true;
}

TcpProxySession.onListenerSocketEvent(
	uint_t syncId,
	io.SocketEvents triggeredEvents
	)
{
	if (syncId != m_listenerSyncId)
		return;

	if (triggeredEvents & io.SocketEvents.IoError)
	{
		m_logWriter.write(log.StdRecordCode.Error, m_listenerSocket.m_ioError, m_listenerSocket.m_ioError.m_size);
		m_listenerSocket.close();
		m_listenerState = ListenerState.Closed;
		m_stdSessionInfoSet.endSession();
		return;
	}

	if (triggeredEvents & io.SocketEvents.IncomingConnection)
	{
		io.SocketAddress address;
		io.Socket* socket = m_listenerSocket.accept(&address, true);

		if (m_serverConnectionState == ServerConnectionState.Connected && !m_listenerSocketPropertySet.m_overrideConnectionProp.m_value)
		{
			socket.close();
			m_logWriter.write(SocketLogRecordCode.ClientRejected, &address, sizeof(address));
			return;
		}

		socket.m_readParallelism = m_bufferPropertySet.m_readParallelismProp.m_value;
		socket.m_readBlockSize = m_bufferPropertySet.m_readBlockSizeProp.m_value;
		socket.m_readBufferSize = m_bufferPropertySet.m_readBufferSizeProp.m_value;
		socket.m_writeBufferSize = m_bufferPropertySet.m_writeBufferSizeProp.m_value;
		socket.m_options = ui.getSocketOptions(m_connectionSocketPropertySet, m_bufferPropertySet);
		socket.unsuspend();

		disconnect();

		m_logWriter.write(SocketLogRecordCode.ClientConnected, &address, sizeof(address));

		m_serverRemoteAddress = address;
		m_serverConnectionSocket = socket;
		m_serverConnectionState = ServerConnectionState.Connected;
		m_serverPendingData.clear();
		waitServerConnectionSocketEvents();

		bool result = connectTarget();
		if (!result)
			disconnect();
	}

	waitListenerSocketEvents();
}

TcpProxySession.onServerConnectionSocketEvent(
	TcpProxySession.Client* client,
	uint_t syncId,
	io.SocketEvents triggeredEvents
	)
{
	if (syncId != m_serverConnectionSyncId)
		return;

	if (triggeredEvents & io.SocketEvents.IoError)
	{
		m_logWriter.write(log.StdRecordCode.Error, m_serverConnectionSocket.m_ioError, m_serverConnectionSocket.m_ioError.m_size);
		m_serverConnectionSocket.close();
		m_serverConnectionSocket = null;
		m_serverConnectionState = ServerConnectionState.Closed;
		disconnectTarget();
		return;
	}

	if (triggeredEvents & io.SocketEvents.Disconnected)
	{
		for (;;) // read all the buffered data
		{
			size_t result = forwardDataFromServerToClient();
			if (!result)
				break;
		}

		if (m_clientConnectionState == ClientConnectionState.Connected)
			m_clientConnectionSocket.blockingWait(io.SocketEvents.WriteBufferEmpty, Defaults.TxDisconnectTimeout);

		TcpDisconnectLogRecordParams params;
		params.m_address = m_serverRemoteAddress;
		params.m_flags = TcpDisconnectLogRecordFlags.Remote;

		if (triggeredEvents & io.SocketEvents.Reset)
			params.m_flags |= TcpDisconnectLogRecordFlags.Reset;

		m_logWriter.write(SocketLogRecordCode.Disconnected, &params, sizeof(params));

		m_serverConnectionSocket.close();
		m_serverConnectionSocket = null;
		m_serverConnectionState = ServerConnectionState.Closed;
		disconnectTarget();
		return;
	}

	if (triggeredEvents & io.SocketEvents.IncomingData)
		forwardDataFromServerToClient();

	waitServerConnectionSocketEvents();
}

TcpProxySession.onClientConnectionSocketEvent(
	TcpProxySession.Client* client,
	uint_t syncId,
	io.SocketEvents triggeredEvents
	)
{
	if (syncId != m_clientConnectionSyncId)
		return;

	if (triggeredEvents & io.SocketEvents.IoError)
	{
		handleConnectError(m_clientConnectionSocket.m_ioError);
		disconnect();
		return;
	}

	if (triggeredEvents & io.SocketEvents.Connected)
	{
		m_logWriter.write(SocketLogRecordCode.ConnectCompleted);
		m_clientConnectionState = ClientConnectionState.Connected;

		if (m_serverPendingData.m_size)
		{
			m_logWriter.write(log.StdRecordCode.Tx, m_serverPendingData.m_p, m_serverPendingData.m_size);
			m_clientConnectionSocket.write(m_serverPendingData.m_p, m_serverPendingData.m_size);
			m_serverPendingData.clear();
		}

		if (m_serverConnectionState != ServerConnectionState.Connected)
		{
			m_clientConnectionSocket.blockingWait(io.SocketEvents.WriteBufferEmpty, Defaults.TxDisconnectTimeout);
			disconnect();
			return;
		}
	}

	if (triggeredEvents & io.SocketEvents.Disconnected)
	{
		for (;;) // read all the buffered data
		{
			size_t result = forwardDataFromClientToServer();
			if (!result)
				break;
		}

		if (m_serverConnectionState == ClientConnectionState.Connected)
			m_serverConnectionSocket.blockingWait(io.SocketEvents.WriteBufferEmpty, Defaults.TxDisconnectTimeout);

		TcpDisconnectLogRecordParams params;
		params.m_address = m_targetAddress;
		params.m_flags = TcpDisconnectLogRecordFlags.Remote;

		if (triggeredEvents & io.SocketEvents.Reset)
			params.m_flags |= TcpDisconnectLogRecordFlags.Reset;

		m_logWriter.write(SocketLogRecordCode.Disconnected, &params, sizeof(params));

		m_clientConnectionSocket.close();
		m_clientConnectionState = ClientConnectionState.Closed;
		disconnect();
		return;
	}

	if (triggeredEvents & io.SocketEvents.IncomingData)
		forwardDataFromClientToServer();

	waitClientConnectionSocketEvents();
}

TcpProxySession.onResolverEvent(
	uint_t syncId,
	io.HostNameResolverEvents triggeredEvents
	)
{
	if (syncId != m_resolverSyncId)
		return;

	if (triggeredEvents & io.HostNameResolverEvents.Error)
	{
		m_logWriter.write(SocketLogRecordCode.ResolveError, m_resolver.m_error, m_resolver.m_error.m_size);
		m_listenerState = ListenerState.Closed;
		return;
	}

	m_logWriter.write(
		SocketLogRecordCode.ResolveCompleted,
		m_resolver.m_addressTable,
		sizeof(io.SocketAddress)
		);

	m_targetAddress = m_resolver.m_addressTable[0];
	if (!m_targetAddress.m_port)
		m_targetAddress.m_port = m_connectionSocketPropertySet.m_remotePortProp.m_value;

	if (!m_wasTargetAddressChangedWhileResolving)
		m_isTargetAddressResolved = true;

	listenImpl();
}

size_t errorcode TcpProxySession.forwardDataFromClientToServer()
{
	size_t result = m_clientConnectionSocket.read(m_readBuffer.m_p, m_readBuffer.m_size);
	if (!result)
		return 0;

	m_logWriter.write(log.StdRecordCode.Rx, m_readBuffer.m_p, result);

	if (m_serverConnectionState == ServerConnectionState.Connected)
		m_serverConnectionSocket.write(m_readBuffer.m_p, result);

	return result;
}

size_t errorcode TcpProxySession.forwardDataFromServerToClient()
{
	size_t result = m_serverConnectionSocket.read(m_readBuffer.m_p, m_readBuffer.m_size);
	if (!result)
		return 0;

	if (m_clientConnectionState != ClientConnectionState.Connected)
	{
		m_serverPendingData.append(m_readBuffer.m_p, result);
	}
	else
	{
		m_logWriter.write(log.StdRecordCode.Tx, m_readBuffer.m_p, result);
		m_clientConnectionSocket.write(m_readBuffer.m_p, result);
	}

	return result;
}

TcpProxySession.handleListenError(std.Error const* error)
{
	m_logWriter.write(
		SocketLogRecordCode.ListenError,
		error,
		error.m_size
		);

	m_listenerSocket.close();
	m_listenerState = ListenerState.Closed;
	m_listenerSyncId++;
	m_resolverSyncId++;
}

TcpProxySession.handleConnectError(std.Error const* error)
{
	m_logWriter.write(
		SocketLogRecordCode.ConnectError,
		error,
		error.m_size
		);

	client.m_clientConnectionSocket.close();
	client.m_clientConnectionState = ClientConnectionState.Closed;
}

TcpProxySession.waitListenerSocketEvents()
{
	m_listenerSocket.wait(
		io.SocketEvents.IoError |
		io.SocketEvents.IncomingConnection,
		onListenerSocketEvent~(++m_listenerSyncId) @ m_pluginHost.m_mainThreadScheduler
		);
}

TcpProxySession.waitServerConnectionSocketEvents(TcpProxySession.Client* client)
{
	client.m_serverConnectionSocket.wait(
		io.SocketEvents.IoError |
		io.SocketEvents.IncomingData |
		io.SocketEvents.Disconnected |
		io.SocketEvents.Reset,
		onServerConnectionSocketEvent~(client, ++client.m_serverConnectionSyncId) @ m_pluginHost.m_mainThreadScheduler
		);
}

TcpProxySession.waitClientConnectionSocketEvents(TcpProxySession.Client* client)
{
	io.SocketEvents eventMask = io.SocketEvents.IoError;

	if (client.m_clientConnectionState != ClientConnectionState.Connected)
		eventMask |= io.SocketEvents.Connected;
	else
		eventMask |=
			io.SocketEvents.IncomingData |
			io.SocketEvents.Disconnected |
			io.SocketEvents.Reset;

	client.m_clientConnectionSocket.wait(
		eventMask,
		onClientConnectionSocketEvent~(client, ++client.m_clientConnectionSyncId) @ m_pluginHost.m_mainThreadScheduler
		);
}

reactor TcpProxySession.m_uiReactor
{
	m_title = $"TCP @ $(m_serverPortCombo.m_editText) -> $(m_targetAddressCombo.m_editText)";
	m_actionTable[ActionId.Listen].m_text = m_listenerState ? "Stop Listening" : "Listen";
	m_actionTable[ActionId.Listen].m_icon = m_iconTable[m_listenerState ? IconId.StopListen : IconId.Listen];
	m_actionTable[ActionId.Disconnect].m_isEnabled =
	m_actionTable[ActionId.DisconnectAll].m_isEnabled = m_clientCombo.m_currentData;
	m_statusPaneTable[StatusPaneId.ListenerState].m_text = m_listenerStateStringTable[m_listenerState];
	m_statusPaneTable[StatusPaneId.ClientCount].m_text = $"$m_clientCount client(s)";
	m_statusPaneTable[StatusPaneId.TargetAddress].m_isVisible = m_clientCombo.m_currentData;
	m_statusPaneTable[StatusPaneId.TargetAddress].m_text =
		m_clientCombo.m_currentData ?
		((Client*)m_clientCombo.m_currentData).m_serverRemoteAddress.getString() : "<server-peer>";
}

//..............................................................................

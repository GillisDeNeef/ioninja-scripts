//.............................................................................
//
// TCP Proxy session
//

import "doc_Plugin.jnc"
import "io_Socket.jnc"
import "io_NetworkAdapter.jnc"

//.............................................................................

class TcpProxySession: doc.Session
{
protected:	
	enum ListenerState
	{
		Closed,
		Resolving,
		Listening,
	}

	static char const* m_listenerStateStringTable [] = 
	{
		"Not listening",
		"Resolving...",
		"Listening",
	};

	enum ServerConnectionState
	{
		Closed,
		Connected,
	}

	enum ClientConnectionState
	{
		Closed,
		Connecting,
		Connected,
	}

	static char const* m_clientConnectionStateStringTable [] = 
	{
		"Not connected",
		"Connecting...",
		"Connected",
	};

	enum ActionId
	{
		Listen,
		Disconnect,
		_Count,
	}

	enum IconId
	{
		Listen,
		StopListen,
		Disconnect,
		_Count,
	}

	enum StatusPaneId
	{
		ServerRemoteAddress,
		ListenerState,
		ClientConnectionState,
		_Count,
	}
	
protected:
	// server listener socket
	
	ListenerState bindable m_listenerState;
	io.Socket* m_listenerSocket;
	io.SocketAddress m_localAddress;
	
	// server connection socket
	
	ServerConnectionState bindable m_serverConnectionState;
	uint_t m_serverConnectionSyncId;
	io.Socket* m_serverConnectionSocket;
	io.SocketAddress m_serverRemoteAddress;
	
	// client connection socket
	
	ClientConnectionState bindable m_clientConnectionState;
	io.Socket* m_clientConnnectionSocket;
	io.SocketAddress m_clientRemoteAddress;
	io.SocketAddressResolver* m_resolver;
	uint_t m_resolverSyncId;
	bool m_isTargetAddressResolved;
	bool m_wasTargetAddressChangedWhileResolving;
		
	// toolbar, status bar & menu
	
	gui.Action* m_actionTable [ActionId._Count];
	gui.Icon* m_iconTable [IconId._Count];
	gui.StatusPane* m_statusPaneTable [StatusPaneId._Count];
	gui.ComboBox* m_serverPortCombo;
	gui.ComboBox* m_clientAddressCombo;
	
	// property grid
	
	gui.StringProperty* m_clientAddressProp;
	gui.IntProperty* m_serverPortProp;
	gui.EnumProperty* m_adapterProp;
	gui.BoolProperty* m_overrideConnectionProp;
	gui.BoolProperty* m_resetConnectionProp;
	
public:
	construct (doc.PluginHost* pluginHost);
	
	bool listen () throws;
	stopListen ();
	disconnect ();
	
	bool connectTarget ();
	disconnectTarget ();

	override void load (doc.Storage* storage);
	override void save (doc.Storage* storage);
	override void updateProperties ();
	override bool applyProperties () throws;
	override void restoreDefaultProperties ();

protected:
	handleListenerConnectError (jnc.Error const* error);
	handleTargetConnectError (jnc.Error const* error);
	
	onListen ();
	onListenerPortChanged ();
	onTargetAddressChanged ();
	onListenerSocketEvent (io.SocketEventParams const* params);
	onListenerConnectionSocketEvent (io.SocketEventParams const* params);
	onTargetSocketEvent (io.SocketEventParams const* params);
	onResolverEvent (io.SocketAddressResolverEventParams const* params);
	
	createUi ();
	reactor m_uiReactor ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

TcpProxySession.construct (doc.PluginHost* pluginHost)
{
	basetype.construct (pluginHost);

	pluginHost.m_log.m_representerFunc = representTcpProxyLog;
		
	// listener
	
	m_listenerState = ListenerState.Closed;
	m_listenerSocket = new io.Socket ();
	m_listenerSocket.m_onSocketEvent += onListenerSocketEvent @ m_pluginHost.m_mainThreadScheduler;
	
	// server connection
	
	m_serverConnectionState = ServerConnectionState.Closed;
	
	// client connection
	
	m_clientConnectionState = ClientConnectionState.Closed;
	m_clientConnnectionSocket = new io.Socket ();
	m_clientConnnectionSocket.m_onSocketEvent += onTargetSocketEvent @ m_pluginHost.m_mainThreadScheduler;
	m_resolver = new io.SocketAddressResolver ();
	m_resolver.m_onResolverEvent += onResolverEvent @ m_pluginHost.m_mainThreadScheduler;
	m_resolverSyncId = 0;
	m_isTargetAddressResolved = false;
	m_wasTargetAddressChangedWhileResolving = false;
	
	createUi ();
}

TcpProxySession.createUi ()
{
	// toolbar
	
	m_pluginHost.m_toolBar.addLabel ("Listen on: ");
	m_serverPortCombo = m_pluginHost.m_toolBar.addComboBox ();
	m_serverPortCombo.m_isEditable = true;
	m_serverPortCombo.m_editText = "1001";
	m_serverPortCombo.m_onChanged += onListenerPortChanged;
	
	m_pluginHost.m_toolBar.addLabel (" Connect to: ");
	m_clientAddressCombo = m_pluginHost.m_toolBar.addComboBox (-1);
	m_clientAddressCombo.m_isEditable = true;
	m_clientAddressCombo.m_editText = "127.0.0.1:1002";
	m_clientAddressCombo.m_onChanged += onTargetAddressChanged;

	m_iconTable [IconId.Listen] = new gui.Icon ("images/listen.png");
	m_iconTable [IconId.StopListen] = new gui.Icon ("images/pause.png");
	m_iconTable [IconId.Disconnect] = new gui.Icon ("images/disconnect.png");
	
	m_actionTable [ActionId.Listen] = createAction ("Listen", m_iconTable [IconId.Listen]);
	m_actionTable [ActionId.Listen].m_onTriggered += onListen;

	m_actionTable [ActionId.Disconnect] = createAction ("Disconnect", m_iconTable [IconId.Disconnect]);
	m_actionTable [ActionId.Disconnect].m_onTriggered += disconnect;
		
	// status bar

	m_statusPaneTable [StatusPaneId.ServerRemoteAddress] = m_pluginHost.m_statusBar.addPane (, 100);
	m_statusPaneTable [StatusPaneId.ServerRemoteAddress].m_color = gui.StdColor.Blue;
	m_statusPaneTable [StatusPaneId.ListenerState] = m_pluginHost.m_statusBar.addPane (, 80);
	m_statusPaneTable [StatusPaneId.ClientConnectionState] = m_pluginHost.m_statusBar.addPane (, 80);
		
	// property grid
			
	m_serverPortProp = m_pluginHost.m_propertyGrid.createIntProperty (
		"Port",
		"Port to listen on"
		);

	m_clientAddressProp = m_pluginHost.m_propertyGrid.createStringProperty (
		"Target Address",
		"Address to connect to"
		);

	m_adapterProp = io.createNetworkAdapterProperty (
		m_pluginHost.m_propertyGrid,
		"Interface",
		"Interface to bind to and to listen on for target connection"
		);

	m_overrideConnectionProp = m_pluginHost.m_propertyGrid.createBoolProperty (
		"Override Connections",
		"Accept incoming connection even if already connected"
		);

	m_resetConnectionProp = m_pluginHost.m_propertyGrid.createBoolProperty (
		"Reset Connections",
		"Use TCP RST to terminate connections (instead of TCP graceful disconnect)"
		);

	m_uiReactor.start ();
}

TcpProxySession.onListen ()
{
	if (m_listenerState)
		stopListen ();
	else 
		try listen ();
}

bool TcpProxySession.listen () throws
{
	stopListen ();

	//m_addressCombo.addEditTextToHistory ();
	//m_serverPortCombo.addEditTextToHistory ();

	char const* targetAddressString = m_clientAddressCombo.m_editText;

	io.SocketAddress targetAddress;
	bool isDirectAddress = try io.parseSocketAddress (targetAddressString, &targetAddress);
	if (isDirectAddress || m_isTargetAddressResolved)
	{
		if (isDirectAddress)
			m_clientRemoteAddress = targetAddress;
		
		io.SocketAddress address;
		address.m_family = io.AddressFamily.Ip4;
		address.m_ip4.m_address.m_i32 = m_adapterProp.m_value;
		address.m_ip4.m_port = (uint16_t) atoi (m_serverPortCombo.m_editText);

		m_listenerSocket.open (io.Protocol.Tcp, &address);
		m_listenerSocket.listen ();

		writeLog (
			TcpProxyLogRecordCode.Listening,
			&address,
			sizeof (address)
			);

		m_localAddress = address;
		m_listenerState = ListenerState.Listening;
	}
	else
	{
		writeLog (
			TcpProxyLogRecordCode.TargetResolving,
			targetAddressString,
			strlen (targetAddressString)
			);

		m_resolver.m_syncId = ++m_resolverSyncId;
		m_resolver.resolve (targetAddressString);
		
		m_listenerState = ListenerState.Resolving;
		m_isTargetAddressResolved = false;
		m_wasTargetAddressChangedWhileResolving = false;
	}

	return true;

catch:
	handleListenerConnectError (jnc.getLastError ());
	return false;
}

TcpProxySession.stopListen ()
{
	m_serverPortCombo.m_backgroundColor = gui.StdColor.White;
	m_clientAddressCombo.m_backgroundColor = gui.StdColor.White;
	
	switch (m_listenerState)
	{
		case ListenerState.Closed:
			return;
		
		case ListenerState.Resolving:
			writeLog (TcpProxyLogRecordCode.ListenCanceled);
			m_resolverSyncId++;
			break;
			
		case ListenerState.Listening:
			writeLog (
				TcpProxyLogRecordCode.ListenStopped,
				&m_localAddress,
				sizeof (m_localAddress)
				);
			break;
	}

	m_listenerSocket.close ();
	m_listenerState = ListenerState.Closed;
}

TcpProxySession.disconnect ()
{
	disconnectTarget ();

	if (m_serverConnectionState != ServerConnectionState.Connected)
		return;

	writeLog (
		TcpProxyLogRecordCode.ClientDisconnected,
		&m_serverRemoteAddress,
		sizeof (m_serverRemoteAddress)
		);
		
	m_serverConnectionSocket.close ();
	m_serverConnectionSocket = null;
	m_serverConnectionState = ServerConnectionState.Closed;
	m_serverConnectionSyncId++;
}

bool TcpProxySession.connectTarget ()
{
	disconnectTarget ();
	
	writeLog (
		TcpProxyLogRecordCode.TargetConnecting,
		&m_clientRemoteAddress,
		sizeof (m_clientRemoteAddress)
		);

	m_clientConnnectionSocket.open (io.Protocol.Tcp);
	m_clientConnnectionSocket.connect (&m_clientRemoteAddress);

	m_clientConnectionState = ClientConnectionState.Connecting;
	
	return true;
	
catch:
	handleTargetConnectError (jnc.getLastError ());
	return false;
}

TcpProxySession.disconnectTarget ()
{
	if (m_clientConnectionState != ClientConnectionState.Connected)
		return;
	
	writeLog (
		TcpProxyLogRecordCode.TargetDisconnected,
		&m_clientRemoteAddress,
		sizeof (m_clientRemoteAddress)
		);

	m_clientConnnectionSocket.close ();
	m_clientConnectionState = ClientConnectionState.Closed;
}

override void TcpProxySession.load (doc.Storage* storage)
{
	m_serverPortCombo.m_editText = storage.readString ("port");
	m_clientAddressCombo.m_editText = storage.readString ("targetAddress");
	m_adapterProp.m_value = storage.readInt ("adapterIp");
	m_overrideConnectionProp.m_value = storage.readBool ("overrideConnection");
	m_resetConnectionProp.m_value = storage.readBool ("resetConnection");
}

override void TcpProxySession.save (doc.Storage* storage)
{
	storage.writeString ("port", m_serverPortCombo.m_editText);
	storage.writeString ("targetAddress", m_clientAddressCombo.m_editText);
	storage.writeInt ("adapterIp", m_adapterProp.m_value);
	storage.writeBool ("overrideConnection", m_overrideConnectionProp.m_value);
	storage.writeBool ("resetConnection", m_resetConnectionProp.m_value);
}

override void TcpProxySession.updateProperties ()
{
	m_serverPortProp.m_value = atoi (m_serverPortCombo.m_editText);
	m_clientAddressProp.m_value = m_clientAddressCombo.m_editText;
}

override bool TcpProxySession.applyProperties () throws
{
	m_serverPortCombo.m_editText = $"$(m_serverPortProp.m_value)";
	m_clientAddressCombo.m_editText = m_clientAddressProp.m_value;
	return true;
}

override void TcpProxySession.restoreDefaultProperties ()
{
	m_serverPortProp.m_value = 1001;
	m_clientAddressProp.m_value = "127.0.0.1:1002";
	m_adapterProp.m_value = 0;
	m_overrideConnectionProp.m_value = true;
	m_resetConnectionProp.m_value = false;
}

TcpProxySession.onListenerPortChanged ()
{
	switch (m_listenerState)
	{
		case ListenerState.Listening:
		case ListenerState.Resolving:
			m_serverPortCombo.m_backgroundColor = gui.StdColor.PastelOrange;
			break;
	}	
}

TcpProxySession.onTargetAddressChanged ()
{
	m_isTargetAddressResolved = false;

	if (m_listenerState == ListenerState.Resolving)
		m_wasTargetAddressChangedWhileResolving = true;
	
	if (m_listenerState != ListenerState.Closed)
		m_clientAddressCombo.m_backgroundColor = gui.StdColor.PastelOrange;
}

TcpProxySession.onListenerSocketEvent (io.SocketEventParams const* params)
{
	if (params.m_syncId != m_listenerSocket.m_syncId)
		return;

	switch (params.m_eventKind)
	{
	case io.SocketEvent.IncomingConnection:
		io.SocketAddress address;
		io.Socket* socket = try m_listenerSocket.accept (&address);
		if (!socket)
			break;

		if (m_serverConnectionState == ServerConnectionState.Connected && !m_overrideConnectionProp.m_value)
		{
			socket.close ();
			writeLog (
				TcpProxyLogRecordCode.ClientRejected,
				&address,
				sizeof (address)
				);

			break;
		}

		disconnect ();

		writeLog (
			TcpProxyLogRecordCode.ClientConnected,
			&address,
			sizeof (address)
			);

		socket.m_syncId = m_serverConnectionSyncId;

		m_serverRemoteAddress = address;
		m_serverConnectionSocket = socket;
		m_serverConnectionState = ServerConnectionState.Connected;		
		
		bool result = try connectTarget ();
		if (!result)
		{
			disconnect ();
			break;
		}
		
		break;
	}
}

TcpProxySession.onListenerConnectionSocketEvent (io.SocketEventParams const* params)
{
	if (params.m_syncId != m_serverConnectionSyncId)
		return;

	switch (params.m_eventKind)
	{
	case io.SocketEvent.Disconnected:
		writeLog (
			TcpProxyLogRecordCode.ClientDisconnected,
			&m_serverRemoteAddress,
			sizeof (m_serverRemoteAddress)
			);
			
		m_serverConnectionSocket = null;
		m_serverConnectionState = ServerConnectionState.Closed;
		m_serverConnectionSyncId++;
		
		disconnectTarget ();
		break;

	case io.SocketEvent.IncomingData:
		heap char buffer [512];
		size_t result = try m_serverConnectionSocket.recv (buffer, sizeof (buffer));
		if (result != -1)
		{
			writeLog (log.StdRecordCode.Tx, buffer, result);
		
			if (m_clientConnectionState == ClientConnectionState.Connected)
				try m_clientConnnectionSocket.send (buffer, result);
		}
		
		break;
	}
}

TcpProxySession.onTargetSocketEvent (io.SocketEventParams const* params)
{
	if (params.m_syncId != m_clientConnnectionSocket.m_syncId)
		return;
	
	switch (params.m_eventKind)
	{
	case io.SocketEvent.ConnectCompleted:
		writeLog (TcpProxyLogRecordCode.TargetConnectCompleted);
		m_clientConnectionState = ClientConnectionState.Connected;
		
		// only once the connection to the target was successfully established
		// do we care about the listener connection
		
		if (m_serverConnectionSocket != null)
		{
			m_serverConnectionSocket.m_onSocketEvent += onListenerConnectionSocketEvent @ m_pluginHost.m_mainThreadScheduler;
			m_serverConnectionSocket.firePendingEvents ();
		}
		break;

	case io.SocketEvent.ConnectCancelled:
		writeLog (TcpProxyLogRecordCode.TargetConnectCancelled);
		m_clientConnectionState = ClientConnectionState.Closed;
		
		disconnect ();
		break;

	case io.SocketEvent.ConnectError:
		writeLog (
			TcpProxyLogRecordCode.TargetConnectError,
			params.m_error,
			params.m_error.m_size
			);
		m_clientConnectionState = ClientConnectionState.Closed;
		
		disconnect ();
		break;

	case io.SocketEvent.Disconnected:
		writeLog (
			TcpProxyLogRecordCode.TargetDisconnected,
			&m_clientRemoteAddress,
			sizeof (m_serverRemoteAddress)
			);
		m_clientConnectionState = ClientConnectionState.Closed;
		
		disconnect ();
		break;

	case io.SocketEvent.IncomingData:
		heap char buffer [512];
		size_t result = try m_clientConnnectionSocket.recv (buffer, sizeof (buffer));
		if (result != -1)
		{
			writeLog (log.StdRecordCode.Rx, buffer, result);
		
			if (m_serverConnectionState == ServerConnectionState.Connected)
				try m_serverConnectionSocket.send (buffer, result);
		}
		break;
	} 
}

TcpProxySession.onResolverEvent (io.SocketAddressResolverEventParams const* params)
{
	if (params.m_syncId != m_resolverSyncId)
		return;
	
	switch (params.m_eventKind)
	{
	case io.SocketAddressResolverEvent.ResolveCompleted:
		writeLog (
			TcpProxyLogRecordCode.TargetResolveCompleted,
			params.m_address,
			sizeof (io.SocketAddress)
			);
		
		m_clientRemoteAddress = *params.m_address;
		
		if (!m_wasTargetAddressChangedWhileResolving)
			m_isTargetAddressResolved = true;
				
		// start listening
		
		io.SocketAddress address;
		address.m_family = io.AddressFamily.Ip4;
		address.m_ip4.m_address.m_i32 = m_adapterProp.m_value;
		address.m_ip4.m_port = (uint16_t) atoi (m_serverPortCombo.m_editText);

		m_listenerSocket.open (io.Protocol.Tcp, &address);
		m_listenerSocket.listen ();

		writeLog (
			TcpProxyLogRecordCode.Listening,
			&address,
			sizeof (address)
			);

		m_localAddress = address;
		m_listenerState = ListenerState.Listening;
		break;

	case io.SocketAddressResolverEvent.ResolveError:
		writeLog (
			TcpProxyLogRecordCode.TargetResolvingError,
			params.m_error,
			params.m_error.m_size
			);
		m_listenerState = ListenerState.Closed;
		break;
	}

catch:
	handleListenerConnectError (jnc.getLastError ());
}

TcpProxySession.handleListenerConnectError (jnc.Error const* error)
{
	writeLog (
		TcpProxyLogRecordCode.ListenError,
		error,
		error.m_size
		);
		
	m_listenerSocket.close ();
	m_listenerState = ListenerState.Closed;
}

TcpProxySession.handleTargetConnectError (jnc.Error const* error)
{
	writeLog (
		TcpProxyLogRecordCode.TargetConnectError,
		error,
		error.m_size
		);
		
	m_clientConnnectionSocket.close ();
	m_clientConnectionState = ClientConnectionState.Closed;
}

reactor TcpProxySession.m_uiReactor ()
{
	m_title = $"TCP @ $(m_serverPortCombo.m_editText) -> $(m_clientAddressCombo.m_editText)";
	m_actionTable [ActionId.Listen].m_text = m_listenerState ? "Stop Listening" : "Listen";
	m_actionTable [ActionId.Listen].m_icon = m_iconTable [m_listenerState ? IconId.StopListen : IconId.Listen];
	m_actionTable [ActionId.Disconnect].m_isEnabled = m_serverConnectionState || m_clientConnectionState;
	m_statusPaneTable [StatusPaneId.ServerRemoteAddress].m_text = m_serverConnectionState ? try io.formatSocketAddress (&m_serverRemoteAddress) : "<server-peer>";
	m_statusPaneTable [StatusPaneId.ServerRemoteAddress].m_isVisible = m_serverConnectionState != ServerConnectionState.Closed;
	m_statusPaneTable [StatusPaneId.ListenerState].m_text = m_listenerStateStringTable [m_listenerState];
	m_statusPaneTable [StatusPaneId.ClientConnectionState].m_text = m_clientConnectionStateStringTable [m_clientConnectionState];
}

//.............................................................................

//..............................................................................
//
// Pipe Monitor log representer
//

import "log_Representation.jnc"
import "PipeMonLogRecordCode.jnc"

//..............................................................................

bool representPipeMonLog  (
	log.Representation* representation,
	uint64_t recordCode,
	void const* p,
	size_t size,
	uint_t foldFlags
	)
{
	switch (recordCode)
	{
	case PipeMonLogRecordCode.ServerFileOpened_old:
		uint32_t fileId = *(uint32_t const*) p;
		char const* name = (char const*) (p + sizeof(fileId));
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Connect;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Connect;
		representation.addHyperText($"File \e[34m#$fileId\e[m: Server file opened: \e[34m$name");
		break;

	case PipeMonLogRecordCode.ServerFileOpened:
		uint32_t fileId = *(uint32_t const*) p;
		uint32_t pid = *((uint32_t const*) p + 1);
		char const* name = (char const*) (p + sizeof(fileId) + sizeof(pid));
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Connect;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Connect;
		representation.addHyperText($"PID \e[34m#$pid\e[m file \e[34m#$fileId\e[m: Server file opened: \e[34m$name");
		break;

	case PipeMonLogRecordCode.ServerFileOpenError_old:
		std.Error const* error = (std.Error const*) p;
		char const* name = (char const*) (error + 1);
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Error;
		representation.addHyperText($"Cannot open server file \e[34m$name\e[m$: $(error.m_description)");
		break;

	case PipeMonLogRecordCode.ServerFileOpenError:
		uint32_t pid = *(uint32_t const*) p;
		std.Error const* error = (std.Error const*) (p + sizeof(pid));
		char const* name = (char const*) (error + 1);
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Error;
		representation.addHyperText($"PID \e[34m#$pid\e[m: Cannot open server file \e[34m$name\e[m$: $(error.m_description)");
		break;

	case PipeMonLogRecordCode.ClientFileOpened_old:
		uint32_t fileId = *(uint32_t const*) p;
		char const* name = (char const*) (p + sizeof(fileId));
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Connect;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Connect;
		representation.addHyperText($"File \e[34m#$fileId\e[m: Client file opened: \e[34m$name");
		break;

	case PipeMonLogRecordCode.ClientFileOpened:
		uint32_t fileId = *(uint32_t const*) p;
		uint32_t pid = *((uint32_t const*) p + 1);
		char const* name = (char const*) (p + sizeof(fileId) + sizeof(pid));
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Connect;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Connect;
		representation.addHyperText($"PID \e[34m#$pid\e[m file \e[34m#$fileId\e[m: Client file opened: \e[34m$name");
		break;

	case PipeMonLogRecordCode.ClientFileOpenError_old:
		std.Error const* error = (std.Error const*) p;
		char const* name = (char const*) (error + 1);
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Error;
		representation.addHyperText($"Cannot open client file \e[34m$name\e[m: $(error.m_description)");
		break;

	case PipeMonLogRecordCode.ClientFileOpenError:
		uint32_t pid = *(uint32_t const*) p;
		std.Error const* error = (std.Error const*) (p + sizeof(pid));
		char const* name = (char const*) (error + 1);
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Error;
		representation.addHyperText($"PID \e[34m#$pid\e[m: Cannot open client file \e[34m$name\e[m: $(error.m_description)");
		break;

	case PipeMonLogRecordCode.FileClosed:
		representation.m_lineAttr.m_flags = log.LineAttrFlags.Override;
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Disconnect;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Disconnect;
		representation.addHyperText(PipeMonLogPartCode.Suffix, "File closed");
		break;

	case PipeMonLogRecordCode.ConnectionAccepted:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Info;
		representation.addHyperText(PipeMonLogPartCode.Suffix, "Connection accepted");
		break;

	case PipeMonLogRecordCode.ConnectionClosed:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Info;
		representation.addHyperText(PipeMonLogPartCode.Suffix, "Connection closed");
		break;

	case PipeMonLogRecordCode.Transaction:
		PipeMonLogTransactionParams const* params = (PipeMonLogTransactionParams const*) p;
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.TxRx;
		representation.m_lineAttr.m_backColor = ui.StdColor.PastelGray;
		representation.addHyperText(PipeMonLogPartCode.Suffix, $"Pipe transaction: TX: \e[34m$(params.m_txDataSize)\e[m B; RX: \e[34m$(params.m_rxDataSize)\e[m B");
		break;

	case PipeMonLogRecordCode.FileIdChanged_old:
		uint32_t fileId = *(uint32_t const*) p;
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Info;
		representation.addHyperText(PipeMonLogPartCode.Prefix, $"File \e[34m#$fileId\e[m: ");
		break;

	case PipeMonLogRecordCode.FileIdChanged:
		uint32_t fileId = *(uint32_t const*) p;
		uint32_t pid = *((uint32_t const*) p + 1);
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Info;
		representation.addHyperText(PipeMonLogPartCode.Prefix, $"PID \e[34m#$pid\e[m file \e[34m#$fileId\e[m: ");
		break;

	default:
		return false;
	}

	return true;
}

//..............................................................................

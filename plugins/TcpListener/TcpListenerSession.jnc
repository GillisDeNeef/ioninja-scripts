//..............................................................................
//
// TCP Listener session
//

import "doc_Session.jnc"
import "io_base.jncx"
import "io_Socket.jnc"
import "ui_History.jnc"
import "ui_SocketUi.jnc"
import "ui_BufferPropertySet.jnc"
import "ui_StdSessionInfoSet.jnc"
import "log_ThroughputCalc.jnc"
import "log_ChecksumCalc.jnc"
import "std_Buffer.jnc"
import "std_List.jnc"

using extension ui.ComboBoxHistory;

//..............................................................................

class TcpListenerSession: doc.Session
{
protected:
	enum Defaults
	{
		LocalPort = 8080,
	}

	enum ListenerState
	{
		Closed,
		Listening,
	}

	enum ActionId
	{
		Listen,
		Disconnect,
		DisconnectAll,
		ApplyFilter,
		_Count,
	}

	enum IconId
	{
		Listen,
		StopListen,
		_Count,
	}

	enum StatusPaneId
	{
		ListenerState,
		ConnectionCount,
		_Count,
	}

	struct Connection
	{
		std.ListEntry* m_entry;
		io.Socket* m_socket;
		io.SocketAddress m_address;
		bool m_isTransmitEnabled;
		uint_t m_syncId;
	}

protected:
	// listener socket & list of connections

	ListenerState bindable m_listenerState;
	io.Socket m_listenerSocket;
	io.SocketAddress m_localAddress;
	uint_t m_listenerSyncId;
	std.List m_connectionList;
	size_t bindable m_connectionCount;
	io.SocketAddress m_currentConnectionAddress;
	std.Buffer m_readBuffer;

	// toolbar, status bar & menu

	ui.Action* m_actionTable[ActionId._Count];
	ui.Icon* m_iconTable[IconId._Count];
	ui.StatusPane* m_statusPaneTable[StatusPaneId._Count];
	ui.ComboBox* m_adapterCombo;
	ui.ComboBox* m_portCombo;
	ui.ComboBox* m_connectionCombo;
	ui.ComboBox* m_connectionFilterCombo;

	// property grid

	ui.SocketPropertySet m_socketPropertySet;
	ui.BufferPropertySet m_bufferPropertySet;

	// information grid

	ui.StdSessionInfoSet m_stdSessionInfoSet;
	ui.ThroughputInfoSet m_throughputInfoSet;
	ui.ChecksumInfoSet m_checksumInfoSet;

	// ui reactor

	reactor m_uiReactor;

public:
	construct(doc.PluginHost* pluginHost);

	bool errorcode listen();
	stopListen();
	disconnect();
	disconnectAll();

	override void load(doc.Storage* storage);
	override void save(doc.Storage* storage);
	override void updateProperties();
	override bool errorcode applyProperties();
	override void restoreDefaultProperties();

	override size_t errorcode transmit(
		void const* p,
		size_t size
		);

protected:
	onListen()
	{
		m_listenerState ? stopListen() : try listen();
	}

	onPortComboEnter()
	{
		try listen();
	}

	onSetConnectionFilter()
	{
	}

	onListenerSocketEvent(
		uint_t syncId,
		io.SocketEvents triggeredEvents
		);

	onConnectionSocketEvent(
		Connection* connection,
		uint_t syncId,
		io.SocketEvents triggeredEvents
		);

	createUi();
	waitListenerSocketEvents();
	waitConnectionSocketEvents(Connection* connection);
	disconnect(Connection* connection);
	addConnection(Connection* connection);
	removeConnection(Connection* connection);
	setCurrentConnection(Connection* connection);
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

TcpListenerSession.construct(doc.PluginHost* pluginHost)
{
	basetype.construct(pluginHost);

	createUi();

	pluginHost.m_log.addSelectionProcessor(log.ThroughputCalcRangeProcessor.factory~(m_throughputInfoSet));
	pluginHost.m_log.addSelectionProcessor(log.ChecksumCalcRangeProcessor.factory~(m_checksumInfoSet));
	m_stdSessionInfoSet.addLogListener(pluginHost.m_log);
}

TcpListenerSession.createUi()
{
	// toolbar

	m_pluginHost.m_toolBar.addLabel("Filter:");
	m_connectionFilterCombo = m_pluginHost.m_toolBar.addComboBox(-1);
	m_connectionFilterCombo.m_isEditable = true;
	m_connectionFilterCombo.m_onEnter += onSetConnectionFilter;
	m_connectionFilterCombo.m_placeholderText = "Enter client address to filter...";
	m_connectionFilterCombo.m_toolTipText = "View only communications with the specified client";

	m_actionTable[ActionId.ApplyFilter] = createAction("Apply filter", "images/apply.png");
	m_actionTable[ActionId.ApplyFilter].m_onTriggered += onSetConnectionFilter;

	m_pluginHost.m_toolBar.addLabel("Client:");
	m_connectionCombo = m_pluginHost.m_toolBar.addComboBox(-1);

	m_actionTable[ActionId.Disconnect] = createAction("Disconnect", "images/disconnect.png");
	m_actionTable[ActionId.Disconnect].m_onTriggered += disconnect;
	m_actionTable[ActionId.DisconnectAll] = createAction("Disconnect All", "images/disconnect-all.png");
	m_actionTable[ActionId.DisconnectAll].m_onTriggered += disconnectAll;

	m_pluginHost.m_toolBar.addLabel("Adapter:");
	m_adapterCombo = ui.createNetworkAdapterComboBox(m_pluginHost.m_toolBar, ui.NetworkAdapterUsage.Listener);

	m_pluginHost.m_toolBar.addLabel("Port:");
	m_portCombo = m_pluginHost.m_toolBar.addComboBox();
	m_portCombo.m_isEditable = true;
	m_portCombo.m_onEnter += onPortComboEnter;

	m_iconTable[IconId.Listen] = new ui.Icon("images/listen.png");
	m_iconTable[IconId.StopListen] = new ui.Icon("images/pause.png");
	m_actionTable[ActionId.Listen] = createAction("Listen", m_iconTable [IconId.Listen]);
	m_actionTable[ActionId.Listen].m_onTriggered += onListen;

	// status bar

	m_statusPaneTable[StatusPaneId.ListenerState] = m_pluginHost.m_statusBar.addPane(, 80);
	m_statusPaneTable[StatusPaneId.ConnectionCount] = m_pluginHost.m_statusBar.addPane(, 80);

	// property grid

	ui.GroupProperty* group = m_pluginHost.m_propertyGrid.createGroupProperty(
		"Connection",
		"TCP-specific connection settings"
		);

	m_socketPropertySet.createProperties(
		m_pluginHost.m_propertyGrid,
		group,,
		ui.SocketPropertySet.PropertyId.AllTcpServer
		);

	m_socketPropertySet.m_defaultLocalPort = Defaults.LocalPort;

	m_bufferPropertySet.createPropertiesGrouped(m_pluginHost.m_propertyGrid);

	// information grid

	ui.InformationGroup* infoGroup = m_pluginHost.m_informationGrid.createGroup("TCP listener");

	m_stdSessionInfoSet.createInformationValues(m_pluginHost.m_informationGrid, infoGroup);
	m_throughputInfoSet.createInformationValuesGrouped(m_pluginHost.m_informationGrid);
	m_checksumInfoSet.createInformationValuesGrouped(m_pluginHost.m_informationGrid);

	m_pluginHost.m_propertyGrid.resizeNameColumnToContents();
	m_pluginHost.m_informationGrid.resizeNameColumnToContents();

	m_uiReactor.start();
}

bool errorcode TcpListenerSession.listen()
{
	stopListen();
	startSession();

	m_portCombo.addEditTextToHistory();
	io.SocketAddress address = *(io.SocketAddress const*) m_adapterCombo.m_currentData;
	address.m_port = (uint16_t)atoi(m_portCombo.m_editText);

	m_listenerSocket.open(io.Protocol.Tcp, &address);
	m_listenerSocket.listen();

	address = m_listenerSocket.m_address;

	m_logWriter.write(
		SocketLogRecordCode.Listening,
		&address,
		sizeof(address)
		);

	m_localAddress = address;
	m_listenerState = ListenerState.Listening;
	waitListenerSocketEvents();
	m_stdSessionInfoSet.startSession(m_pluginHost.m_mainThreadScheduler);
	return true;

catch:
	std.Error const* error = std.getLastError();
	m_logWriter.write(
		SocketLogRecordCode.ListenError,
		error,
		error.m_size
		);

	m_listenerSocket.close();
	return false;
}

TcpListenerSession.stopListen()
{
	if (m_listenerState != ListenerState.Listening)
		return;

	m_logWriter.write(
		SocketLogRecordCode.ListenStopped,
		&m_localAddress,
		sizeof(m_localAddress)
		);
	m_listenerSocket.close();
	m_listenerState = ListenerState.Closed;
	m_listenerSyncId++;
	m_stdSessionInfoSet.endSession();
}

TcpListenerSession.disconnect()
{
	Connection* connection = m_connectionCombo.m_currentData;
	if (connection)
		disconnect(connection);
}

TcpListenerSession.disconnectAll()
{
	while (m_connectionList.m_count)
		disconnect(m_connectionList.m_head.m_data);
}

TcpListenerSession.disconnect(TcpListenerSession.Connection* connection)
{
	TcpDisconnectLogRecordParams params;
	params.m_address = connection.m_address;
	params.m_flags = 0;

	if (m_socketPropertySet.m_tcpResetProp.m_value)
		params.m_flags |= TcpDisconnectLogRecordFlags.Reset;

	m_logWriter.write(
		SocketLogRecordCode.ClientDisconnected,
		&params,
		sizeof(params)
		);

	removeConnection(connection);
}

void TcpListenerSession.addConnection(TcpListenerSession.Connection* connection)
{
	connection.m_entry = m_connectionList.add(connection);
	m_connectionCombo.addItemSetCurrent(connection.m_address.getString(), connection);
	m_connectionCount = m_connectionList.m_count;
	m_currentConnectionAddress = connection.m_address;
}

void TcpListenerSession.removeConnection(TcpListenerSession.Connection* connection)
{
	connection.m_socket.close();
	connection.m_syncId++;

	m_connectionList.remove(connection.m_entry);

	for (size_t i = 0; i < m_connectionCombo.m_itemCount; i++)
		if (m_connectionCombo.m_itemData[i] == connection)
		{
			m_connectionCombo.removeItem(i);
			break;
		}

	m_connectionCount = m_connectionList.m_count;
	m_currentConnectionAddress = null;
}

void TcpListenerSession.setCurrentConnection(TcpListenerSession.Connection* connection)
{
	if (m_currentConnectionAddress.isEqual(connection.m_address))
		return;

	m_logWriter.write(
		SocketLogRecordCode.ClientChanged,
		&connection.m_address,
		sizeof(connection.m_address)
		);

	m_currentConnectionAddress = connection.m_address;
}

void TcpListenerSession.load(doc.Storage* storage)
{
	m_portCombo.loadHistory(storage, "portHistory");
	m_adapterCombo.m_currentIndex  = storage.readInt("adapterIdx");
	m_portCombo.m_editText = storage.readString("port");

	m_socketPropertySet.load(storage);
	m_bufferPropertySet.load(storage);
	m_readBuffer.setSize(m_bufferPropertySet.m_readBufferSizeProp.m_value);
}

void TcpListenerSession.save(doc.Storage* storage)
{
	m_socketPropertySet.save(storage);
	m_bufferPropertySet.save(storage);

	m_portCombo.saveHistory(storage, "portHistory");
	storage.writeInt("adapterIdx", (int) m_adapterCombo.m_currentIndex);
	storage.writeString("port", m_portCombo.m_editText);
}

void TcpListenerSession.updateProperties()
{
	m_socketPropertySet.m_localPortProp.m_value = atoi(m_portCombo.m_editText);
	m_socketPropertySet.m_adapterProp.m_currentIndex = m_adapterCombo.m_currentIndex;
}

bool errorcode TcpListenerSession.applyProperties()
{
	m_portCombo.m_editText = $"$(m_socketPropertySet.m_localPortProp.m_value)";
	m_adapterCombo.m_currentIndex = m_socketPropertySet.m_adapterProp.m_currentIndex;
	m_readBuffer.setSize(m_bufferPropertySet.m_readBufferSizeProp.m_value);

	std.ListEntry* entry = m_connectionList.m_head;
	for (; entry; entry = entry.m_next)
	{
		Connection* connection = entry.m_data;
		connection.m_socket.m_readParallelism = m_bufferPropertySet.m_readParallelismProp.m_value;
		connection.m_socket.m_readBlockSize = m_bufferPropertySet.m_readBlockSizeProp.m_value;
		connection.m_socket.m_readBufferSize = m_bufferPropertySet.m_readBufferSizeProp.m_value;
		connection.m_socket.m_writeBufferSize = m_bufferPropertySet.m_writeBufferSizeProp.m_value;
		connection.m_socket.m_options = ui.getSocketOptions(m_socketPropertySet, m_bufferPropertySet);
	}

	return true;
}

void TcpListenerSession.restoreDefaultProperties()
{
	m_socketPropertySet.restoreDefaults();
	m_bufferPropertySet.restoreDefaults();
}

size_t errorcode TcpListenerSession.transmit(
	void const* p,
	size_t size
	)
{
	Connection* connection = m_connectionCombo.m_currentData;
	if (!connection)
		return -1;

	setCurrentConnection(connection);

	size_t result = connection.m_socket.write(p, size);
	if (result)
		m_logWriter.write(log.StdRecordCode.Tx, p, result);

	if (result < size)
		m_isTransmitEnabled = false;

	return result;
}

TcpListenerSession.waitListenerSocketEvents()
{
	m_listenerSocket.wait(
		io.SocketEvents.IoError |
		io.SocketEvents.IncomingConnection,
		onListenerSocketEvent~(++m_listenerSyncId) @ m_pluginHost.m_mainThreadScheduler
		);
}

void TcpListenerSession.waitConnectionSocketEvents(TcpListenerSession.Connection* connection)
{
	connection.m_socket.wait(
		io.SocketEvents.IoError |
		io.SocketEvents.IncomingData |
		io.SocketEvents.Disconnected |
		io.SocketEvents.Reset,
		onConnectionSocketEvent~(connection, ++connection.m_syncId) @ m_pluginHost.m_mainThreadScheduler
		);
}

TcpListenerSession.onListenerSocketEvent(
	uint_t syncId,
	io.SocketEvents triggeredEvents
	)
{
	if (syncId != m_listenerSyncId)
		return;

	if (triggeredEvents & io.SocketEvents.IoError)
	{
		m_logWriter.write(log.StdRecordCode.Error, m_listenerSocket.m_ioError, m_listenerSocket.m_ioError.m_size);
		m_listenerSocket.close();
		m_listenerState = ListenerState.Closed;
		m_stdSessionInfoSet.endSession();
		return;
	}

	if (triggeredEvents & io.SocketEvents.IncomingConnection)
	{
		io.SocketAddress address;
		io.Socket* socket = m_listenerSocket.accept(&address, true);
		socket.m_readParallelism = m_bufferPropertySet.m_readParallelismProp.m_value;
		socket.m_readBlockSize = m_bufferPropertySet.m_readBlockSizeProp.m_value;
		socket.m_readBufferSize = m_bufferPropertySet.m_readBufferSizeProp.m_value;
		socket.m_writeBufferSize = m_bufferPropertySet.m_writeBufferSizeProp.m_value;
		socket.m_options = ui.getSocketOptions(m_socketPropertySet, m_bufferPropertySet);
		socket.unsuspend();

		m_logWriter.write(SocketLogRecordCode.ClientConnected, &address, sizeof(address));

		Connection* connection = new Connection;
		connection.m_socket = socket;
		connection.m_address = address;
		connection.m_isTransmitEnabled = true;

		addConnection(connection);
		waitConnectionSocketEvents(connection);
	}

	waitListenerSocketEvents();
}

TcpListenerSession.onConnectionSocketEvent(
	TcpListenerSession.Connection* connection,
	uint_t syncId,
	io.SocketEvents triggeredEvents
	)
{
	if (syncId != connection.m_syncId)
		return;

	if (triggeredEvents & io.SocketEvents.IoError)
	{
		setCurrentConnection(connection);

		m_logWriter.write(
			log.StdRecordCode.Error,
			connection.m_socket.m_ioError,
			connection.m_socket.m_ioError.m_size
			);

		removeConnection(connection);
		return;
	}

	if (triggeredEvents & io.SocketEvents.Disconnected)
	{
		for (;;) // read all the buffered data
		{
			size_t result = connection.m_socket.read(m_readBuffer.m_p, m_readBuffer.m_size);
			if (!result)
				break;

			setCurrentConnection(connection);
			m_logWriter.write(log.StdRecordCode.Rx, m_readBuffer.m_p, result);
		}

		TcpDisconnectLogRecordParams recordParams;
		recordParams.m_address = connection.m_address;
		recordParams.m_flags = TcpDisconnectLogRecordFlags.Remote;

		if (triggeredEvents & io.SocketEvents.Reset)
			recordParams.m_flags |= TcpDisconnectLogRecordFlags.Reset;

		m_logWriter.write(
			SocketLogRecordCode.ClientDisconnected,
			&recordParams,
			sizeof(recordParams)
			);

		removeConnection(connection);
		return;
	}

	if (triggeredEvents & io.SocketEvents.IncomingData)
	{
		setCurrentConnection(connection);
		m_connectionCombo.m_currentData = connection;

		size_t result = connection.m_socket.read(m_readBuffer.m_p, m_readBuffer.m_size);
		if (result)
			m_logWriter.write(log.StdRecordCode.Rx, m_readBuffer.m_p, result);
	}

	if (io.SocketEvents.WriteBufferReady)
		m_isTransmitEnabled = true;

	waitConnectionSocketEvents(connection);
}

reactor TcpListenerSession.m_uiReactor
{
	m_title = $"TCP @ $(m_portCombo.m_editText)";
	m_actionTable[ActionId.Listen].m_text = m_listenerState ? "Stop Listening" : "Listen";
	m_actionTable[ActionId.Listen].m_icon = m_iconTable[m_listenerState ? IconId.StopListen : IconId.Listen];
	m_actionTable[ActionId.Disconnect].m_isEnabled =
	m_actionTable[ActionId.DisconnectAll].m_isEnabled = m_connectionCombo.m_currentData;
	m_statusPaneTable[StatusPaneId.ListenerState].m_text = m_listenerState ? "Listening" : "Not listening";
	m_statusPaneTable[StatusPaneId.ConnectionCount].m_text = $"$m_connectionCount client(s)";
}

//..............................................................................

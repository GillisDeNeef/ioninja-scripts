//.............................................................................
//
// TCP Monitor session
//

import "doc_Plugin.jnc"
import "io_PCap.jnc"
import "io_Packet.jnc"
import "io_SocketAddress.jnc"

//.............................................................................

class TcpFlowMonSession: doc.Session
{
protected:
	enum CaptureState
	{
		Closed,
		Resolving,
		Capturing,
	}

	enum TcpState
	{
		Disconnected,
		Syn,
		Connected,
		Fin,
	}

	enum ActionId
	{
		Capture,
		_Count,
	}

	enum IconId
	{
		Capture,
		StopCapture,
		_Count,
	}

	enum StatusPaneId
	{
		State,
		_Count, 
	}

	struct TcpPeer
	{
		io.SocketAddress m_address;
		uint32_t m_offset;
	};	

protected:
	// pcap

	CaptureState bindable m_captureState;
	io.PCap* m_pcap;	
	io.SocketAddressResolver* m_resolver;
	io.SocketAddress m_filterAddress;
	
	// tcp decoding
	
	TcpState m_tcpState;
	TcpPeer m_tcpPeer1;
	TcpPeer m_tcpPeer2;
	
	// toolbar, status bar & menu
	
	gui.Action* m_actionTable [ActionId._Count];
	gui.Icon* m_iconTable [IconId._Count];
	gui.StatusPane* m_statusPaneTable [StatusPaneId._Count];
	gui.ComboBox* m_deviceCombo;
	gui.ComboBox* m_filterCombo;
	
	// property grid
	
	gui.StringProperty* m_deviceProp;
	gui.BoolProperty* m_promisciousProp;
	gui.StringProperty* m_filterProp;

public:
	construct (doc.PluginHost* pluginHost);

	bool capture () throws;
	bool capture (io.SocketAddress const* filterAddress) throws;
	stopCapture ();

	override void load (doc.Storage* storage);
	override void save (doc.Storage* storage);
	override void updateProperties ();
	override bool applyProperties () throws;
	override void restoreDefaultProperties ();

protected:
	onCapture ();	
	onReadyRead (uint_t syncId);
	onResolverEvent (io.SocketAddressResolverEventParams const* params);

	handleCaptureError (jnc.Error const* error);

	bool decodePacket (
		void const* p,
		size_t size
		);

	bool decodeTcpPacket (
		TcpPeer* peer,		
		log.StdRecordCode recordCode,
		io.TcpHdr const* tcpHdr,
		void const* p,
		size_t size
		);

	createUi ();
	reactor m_uiReactor ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

TcpFlowMonSession.construct (doc.PluginHost* pluginHost)
{
	basetype.construct (pluginHost);

	pluginHost.m_log.m_representerFunc = representTcpFlowMonLog;

	m_captureState = CaptureState.Closed;
	m_tcpState = TcpState.Disconnected;
	m_pcap = new io.PCap ();
	m_pcap.m_onReadyRead += onReadyRead @ m_pluginHost.m_mainThreadScheduler;
	m_resolver = new io.SocketAddressResolver ();
	m_resolver.m_onResolverEvent += onResolverEvent @ m_pluginHost.m_mainThreadScheduler;

	createUi ();
}

TcpFlowMonSession.createUi ()
{
	// toolbar

	m_pluginHost.m_toolBar.addLabel ("Device:");
	m_deviceCombo = m_pluginHost.m_toolBar.addComboBox (-1);
	m_deviceCombo.m_onEnter += capture;

	m_pluginHost.m_toolBar.addLabel ("Filter:");
	m_filterCombo = m_pluginHost.m_toolBar.addComboBox (-1);
	m_filterCombo.m_isEditable = true;

	io.PCapDeviceDesc const* device = io.createPCapDeviceDescList ();

	for (; device; device = device->m_next)
	{
		char const* itemName = $"%1 (%2)" (
			device->m_description ? device->m_description : device->m_name,
			device->m_address.m_address.getString ()
			);

		m_deviceCombo.addItem (itemName, device);
	}

	m_iconTable [IconId.Capture] = new gui.Icon ("images/capture.png");
	m_iconTable [IconId.StopCapture] = new gui.Icon ("images/pause.png");

	m_actionTable [ActionId.Capture] = createAction ("Capture", m_iconTable [IconId.Capture]);
	m_actionTable [ActionId.Capture].m_onTriggered += onCapture;

	// status bar
	
	m_statusPaneTable [StatusPaneId.State] = m_pluginHost.m_statusBar.addPane (, 80);

	// property grid

	m_deviceProp = m_pluginHost.m_propertyGrid.createStringProperty (
		"Device",
		"Specify the device to capture on"
		);

	m_promisciousProp = m_pluginHost.m_propertyGrid.createBoolProperty (
		"Promiscious Mode",
		"Put the capturing interface into promiscious mode"
		);

	m_filterProp = m_pluginHost.m_propertyGrid.createStringProperty (
		"Address Filter",
		"Specify the address to monitor"
		);

	m_uiReactor.start ();
}

TcpFlowMonSession.onCapture ()
{
	if (m_captureState)
		stopCapture ();
	else
		try capture ();
}

bool TcpFlowMonSession.capture () throws
{
	stopCapture ();

	io.PCapDeviceDesc const* device = m_deviceCombo.m_currentData;
	if (!device)
		return false;

	char const* filterString = m_filterCombo.m_editText;
	m_filterCombo.addEditTextToHistory ();

	io.SocketAddress filterAddress;
	bool isDirectAddress = try filterAddress.parse (filterString);
	if (isDirectAddress)
		return try capture (&filterAddress);

	m_captureState = CaptureState.Resolving;

	writeLogString (
		TcpFlowMonLogRecordCode.Resolving,
		filterString
		);

	m_resolver.m_syncId = m_pcap.m_syncId;
	m_resolver.resolve (filterString);
	return true;

catch:
	handleCaptureError (jnc.getLastError ());
	return false;
}

bool TcpFlowMonSession.capture (io.SocketAddress const* filterAddress) throws
{
	stopCapture ();
		
	io.PCapDeviceDesc const* device = m_deviceCombo.m_currentData;
	if (!device)
		return false;
	
	char const* filterString = 
		filterAddress.m_family == io.AddressFamily.Ip6 ? $"tcp and host $(filterAddress.m_ip6.m_address.getString ())" :
		filterAddress.m_ip4.m_address.m_i32 ? $"tcp and host $(filterAddress.m_ip4.m_address.getString ())" :
		"tcp";

	if (filterAddress.m_ip4.m_port)
		filterString = $"$filterString and port $(filterAddress.m_ip4.m_port)";
	
	m_pcap.open (
		device.m_name, 
		filterString,
		m_promisciousProp.m_value
		);

	m_captureState = CaptureState.Capturing;	
	m_filterAddress = *filterAddress;
	writeLogString (TcpFlowMonLogRecordCode.CaptureStarted, filterString);
	return true;

catch:
	handleCaptureError (jnc.getLastError ());
	return false;
}

TcpFlowMonSession.handleCaptureError (jnc.Error const* error)
{
	writeLog (
		TcpFlowMonLogRecordCode.CaptureError,
		error,
		error.m_size
		);

	m_pcap.close ();
	m_captureState = CaptureState.Closed;
	m_tcpState = TcpState.Disconnected;
}

TcpFlowMonSession.stopCapture ()
{
	if (!m_captureState)
		return;

	writeLog (TcpFlowMonLogRecordCode.CaptureStopped);
	m_pcap.close ();
	m_captureState = CaptureState.Closed;
	m_tcpState = TcpState.Disconnected;
}

void TcpFlowMonSession.load (doc.Storage* storage)
{
	m_deviceCombo.m_currentIndex = storage.readInt ("device");
	m_promisciousProp.m_value = storage.readBool ("promiscious");
	m_filterCombo.m_editText = storage.readString ("captureFilter");
}

void TcpFlowMonSession.save (doc.Storage* storage)
{
	storage.writeInt ("device", (int) m_deviceCombo.m_currentIndex);
	storage.writeBool ("promiscious", m_promisciousProp.m_value);
	storage.writeString ("captureFilter", m_filterCombo.m_editText);
}

void TcpFlowMonSession.updateProperties ()
{
	io.PCapDeviceDesc const* device = m_deviceCombo.m_currentData;
	if (!device)
		return;
		
	m_deviceProp.m_value = device.m_name;
}

bool TcpFlowMonSession.applyProperties () throws
{
	// m_deviceCombo.m_currentIndex = m_deviceProp.m_currentIndex;
	m_filterCombo.m_editText = m_filterProp.m_value;

	if (m_captureState == CaptureState.Capturing)
		m_pcap.m_filter = m_filterProp.m_value;

	return true;
}

void TcpFlowMonSession.restoreDefaultProperties ()
{
	m_deviceProp.m_value = m_deviceCombo.m_itemText [0];
	m_promisciousProp.m_value = false;
	m_filterProp.m_value = "tibbo.com:80";
}

TcpFlowMonSession.onResolverEvent (io.SocketAddressResolverEventParams const* params)
{
	if (params.m_syncId != m_pcap.m_syncId)
		return;

	switch (params.m_eventKind)
	{
	case io.SocketAddressResolverEvent.ResolveCompleted:
		writeLog (
			TcpFlowMonLogRecordCode.ResolveCompleted,
			params.m_addressTable,
			sizeof (io.SocketAddress)
			);

		m_captureState = CaptureState.Closed;
		try capture (params.m_addressTable);
		break;

	case io.SocketAddressResolverEvent.ResolveError:
		handleCaptureError (params.m_error);
		break;
	}
}

TcpFlowMonSession.onReadyRead (uint_t syncId)
{
	if (syncId != m_pcap.m_syncId)
		return;

	heap char buffer [512];
	size_t result = try m_pcap.read (buffer, sizeof (buffer));
	if (result != -1)
		decodePacket (buffer, result);
}

bool TcpFlowMonSession.decodePacket (
	void const* p,
	size_t size
	)
{
	if (size < sizeof (io.EthernetHdr))
		return false;
	
	io.EthernetHdr const* ethernetHdr = (io.EthernetHdr const*) p;
	p += sizeof (io.EthernetHdr);
	size -= sizeof (io.EthernetHdr);

	io.SocketAddress srcAddress;
	io.SocketAddress dstAddress;

	switch (ethernetHdr.m_type)
	{
	case io.EthernetType.Ip:
		if (size < sizeof (io.IpHdr))
			return false;
		
		io.IpHdr const* ipHdr = (io.IpHdr const*) p;

		if (ipHdr.m_protocol != io.Protocol.Tcp ||
			ipHdr.m_totalLength > size)
			return false;
		
		srcAddress.m_family = io.AddressFamily.Ip4;
		srcAddress.m_ip4.m_address.m_i32 = ipHdr.m_srcAddress;
		dstAddress.m_family = io.AddressFamily.Ip4;
		dstAddress.m_ip4.m_address.m_i32 = ipHdr.m_dstAddress;		

		p += sizeof (io.IpHdr);
		size = ipHdr.m_totalLength - sizeof (io.IpHdr);
		break;

	case io.EthernetType.Ip6:
		if (size < sizeof (io.Ip6Hdr))
			return false;
		
		io.Ip6Hdr const* ip6Hdr = (io.Ip6Hdr const*) p;

		if (ip6Hdr.m_nextHeader != io.Protocol.Tcp ||
			ip6Hdr.m_payloadLength + sizeof (io.Ip6Hdr) > size)
			return false;
		
		srcAddress.m_family = io.AddressFamily.Ip6;
		srcAddress.m_ip6.m_address = *(io.Address_ip6 const*) ip6Hdr.m_srcAddress;
		dstAddress.m_family = io.AddressFamily.Ip6;
		dstAddress.m_ip6.m_address = *(io.Address_ip6 const*) ip6Hdr.m_dstAddress;		

		p += sizeof (io.Ip6Hdr);
		size = ip6Hdr.m_payloadLength;
		break;

	default:
		return false;
	}	

	io.TcpHdr const* tcpHdr = (io.TcpHdr const*) p;
	size_t tcpHdrSize = tcpHdr.m_dataOffset * 4;
	if (tcpHdrSize > size)
		return false;

	p += tcpHdrSize;
	size -= tcpHdrSize;

	srcAddress.m_ip4.m_port = tcpHdr.m_srcPort;
	dstAddress.m_ip4.m_port = tcpHdr.m_dstPort;

	if (!m_tcpState)
	{
		if (!(tcpHdr.m_flags & io.TcpFlags.Syn) && !size)
			return false;

		if (srcAddress.isMatch (&m_filterAddress))
		{
			m_tcpPeer1.m_address = srcAddress;
			m_tcpPeer1.m_offset = tcpHdr.m_seqNumber;
			m_tcpPeer2.m_address = dstAddress;
			m_tcpPeer2.m_offset = 0;
		}
		else if (dstAddress.isMatch (&m_filterAddress))
		{
			m_tcpPeer1.m_address = dstAddress;
			m_tcpPeer1.m_offset = 0;
			m_tcpPeer2.m_address = srcAddress;
			m_tcpPeer2.m_offset = tcpHdr.m_seqNumber;
		}
		else 
		{
			return false;
		}
		
		char const* params = $"$(srcAddress; B)$(dstAddress; B)";
		
		if (!(tcpHdr.m_flags & io.TcpFlags.Syn))
		{
			writeLog (
				TcpFlowMonLogRecordCode.ConnectionPickedUp,
				params,
				dynamic sizeof (*params)
				);			

			m_tcpState = TcpState.Connected;
		}
		else if (!(tcpHdr.m_flags & io.TcpFlags.Ack))
		{
			writeLog (
				TcpFlowMonLogRecordCode.Connecting,
				params,
				dynamic sizeof (*params)
				);			
			
			m_tcpState = TcpState.Syn;
		}
		else if (m_tcpState == TcpState.Syn) 
		{
			writeLog (TcpFlowMonLogRecordCode.ConnectCompleted);						
			m_tcpState = TcpState.Connected;				
		}
		else
		{
			writeLog (
				TcpFlowMonLogRecordCode.ConnectionPickedUp,
				params,
				dynamic sizeof (*params)
				);			

			m_tcpState = TcpState.Connected;
		}
	}

	if (
		m_tcpPeer1.m_address.isEqual (&srcAddress) &&
		m_tcpPeer2.m_address.isEqual (&dstAddress))
	{
		decodeTcpPacket (&m_tcpPeer1, log.StdRecordCode.Rx, tcpHdr, p, size);
	}
	else if (
		m_tcpPeer2.m_address.isEqual (&srcAddress) &&
		m_tcpPeer1.m_address.isEqual (&dstAddress))
	{
		decodeTcpPacket (&m_tcpPeer2, log.StdRecordCode.Tx, tcpHdr, p, size);
	}
	else
	{	
		return false;
	}

	return true;
}		

bool TcpFlowMonSession.decodeTcpPacket (
	TcpFlowMonSession.TcpPeer* peer,
	log.StdRecordCode recordCode,
	io.TcpHdr const* tcpHdr,
	void const* p,
	size_t size
	)
{
	if ((tcpHdr.m_flags & io.TcpFlags.Rst) || 
		(tcpHdr.m_flags & io.TcpFlags.Fin))
	{
		writeLog (
			TcpFlowMonLogRecordCode.Disconnected,
			peer.m_address,
			sizeof (peer.m_address)
			);
		
		m_tcpState = TcpState.Disconnected;
	}
	else if (
		(tcpHdr.m_flags & io.TcpFlags.Syn) && 
		(tcpHdr.m_flags & io.TcpFlags.Ack) &&
		m_tcpState = TcpState.Syn)
	{
		writeLog (TcpFlowMonLogRecordCode.ConnectCompleted);		
		m_tcpState = TcpState.Connected;
	}
	else if (tcpHdr.m_seqNumber + size > peer.m_offset)
	{	
		if (tcpHdr.m_seqNumber < peer.m_offset)
		{
			size_t skip = peer.m_offset - tcpHdr.m_seqNumber;
			if (skip > size)
				return false;
				
			p += skip;
			size -= skip;
		}		
						
		writeLog (recordCode, p, size);
		peer.m_offset = tcpHdr.m_seqNumber + size;
	}

	return true;
}

reactor TcpFlowMonSession.m_uiReactor ()
{
	m_title = $"TCP Mon $(m_filterCombo.m_currentText)";
	m_actionTable [ActionId.Capture].m_text = m_captureState ? "Stop Capture" : "Capture";
	m_actionTable [ActionId.Capture].m_icon = m_iconTable [m_captureState ? IconId.StopCapture : IconId.Capture];
	m_statusPaneTable [StatusPaneId.State].m_text = m_captureState ? "Capturing" : "Closed";
}

//.............................................................................

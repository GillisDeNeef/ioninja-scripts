//..............................................................................
//
// Process log representer
//

import "log_Representation.jnc"
import "io_base.jncx"
import "ProcessLogRecordCode.jnc"

//..............................................................................

bool representProcessLog(
	log.Representation* representation,
	uint64_t recordCode,
	void const* p,
	size_t size,
	uint_t foldFlags
	)
{
	switch (recordCode)
	{
	case ProcessLogRecordCode.ProcessStarted:
		char const* fileName = (char const*) p;
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Connect;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Connect;
		representation.addHyperText($"Started process: \e[34m$fileName");
		break;

	case ProcessLogRecordCode.ProcessStartError:
		std.Error const* error = (std.Error const*) p;
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Error;
		representation.addHyperText($"Cannot open file: $(error.m_description)");
		break;

	case ProcessLogRecordCode.ProcessFinished:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Disconnect;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Disconnect;
		representation.addHyperText($"Process finished");
		break;

	case ProcessLogRecordCode.ProcessCrashed:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Disconnect;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Disconnect;
		representation.addHyperText($"Process crashed");
		break;

	case ProcessLogRecordCode.ProcessTerminated:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Info;
		representation.addHyperText("Process terminated");
		break;

	case ProcessLogRecordCode.Detached:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Disconnect;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Disconnect;
		representation.addHyperText($"Detached from the running process");
		break;

	default:
		return false;
	}

	return true;
}

//..............................................................................

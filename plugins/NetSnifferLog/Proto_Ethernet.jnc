//..............................................................................
//
// Sniffer log ethernet packets handling
//

import "Protocols.jnc"

//..............................................................................

char const* formatEthernetString(uint8_t const* ethernet)
{
	return std.format(
		"%02X:%02X:%02X:%02X:%02X:%02X",
		ethernet[0], ethernet[1], ethernet[2],
		ethernet[3], ethernet[4], ethernet[5]
		);
}

void representEthernetDigest(
	log.Representation* representation,
	void const* p,
	size_t size
	)
{
	io.EthernetHdr const* ethernetHdr = (io.EthernetHdr const*) p;

	representation.m_lineAttr.m_backColor = ui.StdColor.PastelGray;

	if (size < sizeof(io.EthernetHdr))
	{
		representation.addHyperText("\e[1mETHERNET [BROKEN FRAME]");
		return;
	}

	switch (ethernetHdr.m_type)
	{
	case io.EthernetType.Ip:
		representIpDigest(representation, p, size, sizeof(io.EthernetHdr));
		return;

	case io.EthernetType.Arp:
		representArpDigest(representation, p, size, sizeof(io.EthernetHdr));
		return;

	default:
		representation.addHyperText(std.format(
			"\e[1mETHERNET \e[10;34m%s\e[m > \e[34m%s\e[m [TYPE:%04Xh]",
			formatEthernetString(ethernetHdr.m_srcAddress),
			formatEthernetString(ethernetHdr.m_dstAddress),
			ethernetHdr.m_type
			));

		representPacketData(representation, p, size, sizeof(io.EthernetHdr), -1);
	}
}

void representEthernetHdr(
	log.Representation* representation,
	std.Array* protoRangeArray,
	void const* p,
	size_t size,
	uint_t foldFlags
	)
{
	representation.m_lineAttr.m_backColor = ProtoColor.Ethernet;

	if (size < sizeof(io.EthernetHdr))
	{
		representation.addHyperText("\e[1mETHERNET [BROKEN FRAME]");
		return;
	}

	ProtoRange range = { sizeof(io.EthernetHdr), ProtoColor.Ethernet };
	protoRangeArray.append(range);

	io.EthernetHdr const* ethernetHdr = (io.EthernetHdr const*) p;

	if (foldFlags & ProtoFoldFlag.Ethernet)
		representation.addHyperText(std.format(
			"[\e^-%d\e[34m-\e[m] \e[1mETHERNET\n"
			"    \e[90mTYPE: \e^!%d,%d\e[34m%04Xh\n"
			"    \e[90mSRC:  \e^!%d,%d\e[34m%s\n"
			"    \e[90mDST:  \e^!%d,%d\e[34m%s",

			ProtoFoldFlag.Ethernet,

			offsetof(ethernetHdr.m_type),
			sizeof(ethernetHdr.m_type),
			ethernetHdr.m_type,

			offsetof(ethernetHdr.m_srcAddress),
			sizeof(ethernetHdr.m_srcAddress),
			formatEthernetString(ethernetHdr.m_srcAddress),

			offsetof(ethernetHdr.m_dstAddress),
			sizeof(ethernetHdr.m_dstAddress),
			formatEthernetString(ethernetHdr.m_dstAddress)
			));
	else
		representation.addHyperText(std.format(
			"[\e^+%d\e[34m+\e[m] \e[1mETHERNET \e^!%d,%d\e[10;34m%s\e[m > \e^!%d,%d\e[34m%s\e[m",

			ProtoFoldFlag.Ethernet,

			offsetof(ethernetHdr.m_srcAddress),
			sizeof(ethernetHdr.m_srcAddress),
			formatEthernetString(ethernetHdr.m_srcAddress),

			offsetof(ethernetHdr.m_dstAddress),
			sizeof(ethernetHdr.m_dstAddress),
			formatEthernetString(ethernetHdr.m_dstAddress)
			));

	switch (ethernetHdr.m_type)
	{
	case io.EthernetType.Ip:
		representIpHdr(representation, protoRangeArray, p, size, sizeof(io.EthernetHdr), foldFlags);
		break;

	case io.EthernetType.Arp:
		representArpHdr(representation, protoRangeArray, p, size, sizeof(io.EthernetHdr), foldFlags);
		break;
	}
}

//..............................................................................

//..............................................................................
//
// Sniffer log ethernet packets handling
//

import "Protocols.jnc"
import "log_RepresentStruct.jnc"

//..............................................................................

void representEthernetDigest(
	log.Representation* representation,
	void const* p,
	size_t size,
	int payloadPreviewIconIdx = -1
	)
{
	if (size < sizeof(io.EthernetHdr))
	{
		representation.addHyperText("\e[1mETHERNET\e[m [INCOMPLETE]");
		return;
	}

	io.EthernetHdr const* ethernetHdr = (io.EthernetHdr const*) p;
	p += sizeof(io.EthernetHdr);
	size -= sizeof(io.EthernetHdr);

	switch (ethernetHdr.m_type)
	{
	case io.EthernetType.Ip:
		representIpDigest(representation, p, size, payloadPreviewIconIdx);
		return;

	case io.EthernetType.Ip6:
		representIp6Digest(representation, p, size, payloadPreviewIconIdx);
		return;

	case io.EthernetType.Arp:
		representArpDigest(representation, p, size);
		return;

	default:
		representation.addHyperText(
			$"\e[1mETHERNET \e[10;34m%1\e[m \u2192 \e[34m%2\e[m (type: \e[34m%3\e[m)"(
			io.formatEthernetAddress(ethernetHdr.m_srcAddress),
			io.formatEthernetAddress(ethernetHdr.m_dstAddress),
			typeof(io.EthernetType).getValueString(&ethernetHdr.m_type)
			));

		representPayloadPreview(representation, p, size, payloadPreviewIconIdx);
	}
}

void representEthernetHdr(
	log.Representation* representation,
	std.Array* protoRangeArray,
	void const* p,
	size_t size,
	size_t baseOffset,
	uint_t foldFlags
	)
{
	representation.m_lineAttr.m_backColor = ProtoColor.Ethernet;

	if (size < sizeof(io.EthernetHdr))
	{
		representation.addHyperText("\e[1nETHERNET\e[m [INCOMPLETE]");
		return;
	}

	log.representStruct(
		representation,
		typeof(io.EthernetHdr),
		NetSnifferLogPartCode.RawPacket,
		p,
		baseOffset,
		foldFlags,
		ProtoFoldFlag.Ethernet
		);

	ProtoRange range = { baseOffset, sizeof(io.EthernetHdr), ProtoColor.Ethernet };
	protoRangeArray.append(range);

	io.EthernetHdr const* ethernetHdr = (io.EthernetHdr const*) p;
	p += sizeof(io.EthernetHdr);
	size -= sizeof(io.EthernetHdr);
	baseOffset += sizeof(io.EthernetHdr);

	switch (ethernetHdr.m_type)
	{
	case io.EthernetType.Ip:
		representIpHdr(representation, protoRangeArray, p, size, baseOffset, foldFlags);
		break;

	case io.EthernetType.Ip6:
		representIp6Hdr(representation, protoRangeArray, p, size, baseOffset, foldFlags);
		break;

	case io.EthernetType.Arp:
		representArpHdr(representation, protoRangeArray, p, size, baseOffset, foldFlags);
		break;
	}
}

//..............................................................................

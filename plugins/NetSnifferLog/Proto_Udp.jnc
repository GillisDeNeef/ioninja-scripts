//..............................................................................
//
// Sniffer log UDP packets handling
//

//..............................................................................

void representUdpDigest(
	log.Representation* representation,
	char const* srcString,
	char const* dstString,
	void const* p,
	size_t size,
	int payloadPreviewIconIdx = -1
	)
{
	if (size < sizeof(io.UdpHdr))
	{
		representation.addHyperText(
			$"\e[1mUDP \e[10;34m%1\e[m \u2192 \e[34m%2\e[m [INCOMPLETE]"(
			srcString,
			dstString
			));
		return;
	}

	io.UdpHdr const* udpHdr = (io.UdpHdr const*)p;
	if (size < udpHdr.m_length || udpHdr.m_length < sizeof(io.UdpHdr))
	{
		representation.addHyperText(formatUdpDigest(udpHdr, srcString, dstString, " [BROKEN]"));
		return;
	}

	representation.addHyperText(formatUdpDigest(udpHdr, srcString, dstString));

	if (udpHdr.m_length == sizeof(io.UdpHdr))
		return;

	p += sizeof(io.UdpHdr);
	size = udpHdr.m_length - sizeof(io.UdpHdr);

	representPayloadPreview(representation, p, size, payloadPreviewIconIdx);
}

char const* formatUdpDigest(
	io.UdpHdr const* hdr,
	char const* srcString,
	char const* dstString,
	char const* extra = null
	)
{
	return
		$"\e[1mUDP \e[10;34m%1:%2\e[m \u2192 \e[10;34m%3:%4\e[m%5%6"(
		srcString,
		hdr.m_srcPort,
		dstString,
		hdr.m_dstPort,
		hdr.m_length > sizeof(io.UdpHdr) ? $" ($(hdr.m_length - sizeof(io.UdpHdr)) bytes)" : null,
		extra
		);
}

void representUdpHdr(
	log.Representation* representation,
	std.Array* protoRangeArray,
	void const* p,
	size_t size,
	size_t baseOffset,
	uint_t foldFlags
	)
{
	representation.m_lineAttr.m_backColor = ProtoColor.Udp;

	if (size < sizeof(io.UdpHdr))
	{
		representation.addHyperText("\e[1mUDP\e[m [INCOMPLETE]");
		return;
	}

	log.representStruct(
		representation,
		typeof(io.UdpHdr),
		NetSnifferLogPartCode.RawPacket,
		p,
		baseOffset,
		foldFlags,
		ProtoFoldFlag.Udp
		);

	ProtoRange range = { baseOffset, sizeof(io.UdpHdr), ProtoColor.Udp }
	protoRangeArray.append(range);

	io.UdpHdr const* udpHdr = (io.UdpHdr const*)p;
	if (size < udpHdr.m_length || udpHdr.m_length < sizeof(io.UdpHdr))
	{
		representation.addHyperText($"[BROKEN] size: %1 %2"(size, udpHdr.m_length));
		return;
	}

	if (udpHdr.m_length == sizeof(io.UdpHdr))
		return;

	p += sizeof(io.UdpHdr);
	size = udpHdr.m_length - sizeof(io.UdpHdr);
	baseOffset += sizeof(io.UdpHdr);

	representPayload(
		representation,
		protoRangeArray,
		"\e[1mUDP\e[m Payload",
		p,
		size,
		baseOffset,
		foldFlags,
		ProtoFoldFlag.UdpPayload,
		ProtoColor.UdpPayload
		);
}

//..............................................................................

//..............................................................................
//
// Sniffer log representer
//

import "log_Representation.jnc"
import "log_Writer.jnc"
import "io_TcpIp.jnc"
import "std_Array.jnc"
import "NetSnifferLogRecordCode.jnc"

//..............................................................................

bool representNetSnifferLog(
	log.Representation* representation,
	uint64_t recordCode,
	void const* p,
	size_t size,
	uint_t foldFlags
	)
{
	switch (recordCode)
	{
	case NetSnifferLogRecordCode.Packet:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Packet;
		representation.m_lineAttr.m_backColor = ui.StdColor.PastelGray;
		representPacketDigest(representation, p, size);
		break;

	case NetSnifferLogRecordCode.InjectedPacket:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.TxPacket;
		representation.m_lineAttr.m_backColor = ui.StdColor.PastelGray;
		representPacketDigest(representation, p, size, log.StdLogIcon.Tx);
		break;

	case NetSnifferLogRecordCode.DefragmentedIp:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Packet;
		representation.m_lineAttr.m_backColor = ui.StdColor.PastelGray;
		representDefragmentedIpDigest(representation, p, size);
		break;

	case NetSnifferLogRecordCode.PacketDetails:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Packet;
		representPacketDetails(representation, p, size, foldFlags);
		break;

	case NetSnifferLogRecordCode.DefragmentedIpDetails:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Packet;
		representDefragmentedIpDetails(representation, p, size, foldFlags);
		break;

	default:
		return false;
	}

	return true;
}

bool detailizeNetSnifferLog(
	log.Writer* writer,
	uint64_t recordCode,
	void const* p,
	size_t size
	)
{
	switch (recordCode)
	{
	case NetSnifferLogRecordCode.Packet:
	case NetSnifferLogRecordCode.InjectedPacket:
		writer.write(NetSnifferLogRecordCode.PacketDetails, p, size);
		break;

	case NetSnifferLogRecordCode.DefragmentedIp:
		writer.write(NetSnifferLogRecordCode.DefragmentedIpDetails, p, size);
		break;

	default:
		return false;
	}

	return true;
}

//..............................................................................

void representPacketDigest(
	log.Representation* representation,
	void const* p,
	size_t size,
	int payloadPreviewIconIdx = -1
	)
{
	representEthernetDigest(representation, p, size, payloadPreviewIconIdx);
}

void representPacketDetails(
	log.Representation* representation,
	void const* p,
	size_t size,
	uint_t foldFlags
	)
{
	std.Array protoRangeArray;
	representEthernetHdr(representation, protoRangeArray, p, size, 0, foldFlags);
	representation.addBreak();
	representRawPacketData(representation, protoRangeArray, p, size);
}

void representRawPacketData(
	log.Representation* representation,
	std.Array const* protoRangeArray,
	void const* p,
	size_t size
	)
{
	representation.m_lineAttr.m_textColor = ui.StdColor.Gray;
	representation.m_lineAttr.m_backColor = ui.ColorFlags.Transparent;
	representation.addBin(NetSnifferLogPartCode.RawPacket, p, size);

	ui.TextAttr attr;
	attr.m_backColor = ui.ColorFlags.Transparent;

	size_t protoCount = protoRangeArray.m_count;
	for (size_t i = 0; i < protoCount; i++)
	{
		ProtoRange range = protoRangeArray[i];
		attr.m_backColor = range.m_color;
		representation.retroColorize(range.m_offset - size, range.m_size, attr);
	}
}

void representPayload(
	log.Representation* representation,
	std.Array* protoRangeArray,
	char const* name,
	void const* p,
	size_t size,
	size_t baseOffset,
	uint_t foldFlags,
	uint_t payloadFoldFlag,
	uint_t color
	)
{
	representation.m_lineAttr.m_backColor = color;

	ProtoRange range = { baseOffset, size, color };
	protoRangeArray.append(range);

	if (foldFlags & payloadFoldFlag)
	{
		representation.addHyperText(
			$"[\e^-%1\e[34m-\e[m] %2"(
			payloadFoldFlag,
			name
			));

		representation.m_lineAttr.m_backColor = color;
		representation.addBin(p, size);
	}
	else
	{
		representation.addHyperText(
			$"[\e^+%1\e[34m+\e[m] %2 (%3 bytes)"(
			payloadFoldFlag,
			name,
			size
			));
	}
}

void representPayloadPreview(
	log.Representation* representation,
	void const* p,
	size_t size,
	int payloadPreviewIconIdx = -1
	)
{
	representation.m_lineAttr.m_iconIdx = payloadPreviewIconIdx;
	representation.m_lineAttr.m_flags = log.LineAttrFlags.TileIcon;
	representation.m_lineAttr.m_textColor = ui.StdColor.Gray;
	representation.m_lineAttr.m_backColor = ui.ColorFlags.Transparent;
	representation.addBinPreview(p, size);
}

//..............................................................................

//..............................................................................
//
// Serial Monitor log representer
//

import "log_Representation.jnc"
import "SerialMonLogRecordCode.jnc"

//..............................................................................

bool representSerialMonLog  (
	log.Representation* representation,
	uint64_t recordCode,
	void const* p,
	size_t size,
	uint_t foldFlags
	)
{
	switch (recordCode)
	{
	case SerialMonLogRecordCode.DeviceOpened_old:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Connect;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Connect;
		representation.addHyperText("Port opened");
		break;

	case SerialMonLogRecordCode.DeviceOpened:
		uint32_t pid = *(uint32_t const*) p;
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Connect;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Connect;
		representation.addHyperText($"PID \e[34m#$pid\e[m: Port opened");
		break;

	case SerialMonLogRecordCode.DeviceClosed:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Disconnect;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Disconnect;
		representation.addHyperText("Port closed");
		break;

	default:
		return false;
	}

	return true;
}

//..............................................................................

//..............................................................................
//
// Serial Monitor log packet declarations and representer
//

import "log_DeviceMon.jnc"

//..............................................................................

enum SerialMonLogRecordCode: uint64_t
{
	CaptureStarted   = 0x01d47d759805bae8,
	CaptureStopped   = 0x01d47d759805bae9,
	CaptureError     = 0x01d47d759805baea,
	DeviceOpened     = 0x01d47d759805baed,
	DeviceOpened_old = 0x01d47d759805baeb,
	DeviceClosed     = 0x01d47d759805baec,
}

//..............................................................................

bool representSerialMonLog  (
	log.RepresenterTarget* target,
	uint_t recordCode,
	void const* p,
	size_t size,
	uint_t foldFlags
	)
{
	switch (recordCode)
	{
	case SerialMonLogRecordCode.CaptureStarted:
		char const* name = (char const*) p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Listen;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText ($"Capture started on port \e[34m$name");
		break;

	case SerialMonLogRecordCode.CaptureStopped:
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.StopListen;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText ("Capture stopped");
		break;

	case SerialMonLogRecordCode.CaptureError:
		std.Error const* error = (std.Error const*) p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		target.m_lineAttr.m_backColor = log.StdLogColor.Error;
		target.addHyperText ($"Cannot start capture: $(error.m_description)");
		log.addDeviceMonCaptureErrorDetails (target, error);
		break;

	case SerialMonLogRecordCode.DeviceOpened_old:
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Connect;
		target.m_lineAttr.m_backColor = log.StdLogColor.Connect;
		target.addHyperText ("Port opened");
		break;

	case SerialMonLogRecordCode.DeviceOpened:
		uint32_t pid = *(uint32_t const*) p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Connect;
		target.m_lineAttr.m_backColor = log.StdLogColor.Connect;
		target.addHyperText ($"PID \e[34m#$pid\e[m: Port opened");
		break;

	case SerialMonLogRecordCode.DeviceClosed:
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Disconnect;
		target.m_lineAttr.m_backColor = log.StdLogColor.Disconnect;
		target.addHyperText ("Port closed");
		break;

	default:
		return representSerialLog (target, recordCode, p, size, foldFlags);
	}

	return true;
}

//..............................................................................

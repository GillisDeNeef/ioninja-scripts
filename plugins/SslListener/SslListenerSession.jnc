//..............................................................................
//
// SSL Listener session
//

import "doc_Session.jnc"
import "io_base.jncx"
import "io_ssl.jncx"
import "ui_History.jnc"
import "ui_SocketUi.jnc"
import "ui_SslPropertySet.jnc"
import "ui_BufferPropertySet.jnc"
import "ui_StdSessionInfoSet.jnc"
import "log_ThroughputCalc.jnc"
import "log_ChecksumCalc.jnc"
import "std_Buffer.jnc"

using extension ui.ComboBoxHistory;

//..............................................................................

class SslListenerSession: doc.Session
{
protected:
	enum Defaults
	{
		LocalPort = 8443,
	}

	enum ListenerState
	{
		Closed,
		Listening,
	}

	enum ConnectionState
	{
		Closed,
		SslHandshaking,
		Connected,
	}

	enum ActionId
	{
		Listen,
		Disconnect,
		_Count,
	}

	enum IconId
	{
		Listen,
		StopListen,
		Disconnect,
		_Count,
	}

	enum StatusPaneId
	{
		RemoteAddress,
		ListenerState,
		_Count,
	}

protected:
	// listener socket

	ListenerState bindable m_listenerState;
	io.SslSocket m_listenerSocket;
	io.SocketAddress m_localAddress;
	uint_t m_listenerSyncId;

	// connection socket

	ConnectionState bindable m_connectionState;
	io.SslSocket* m_connectionSocket;
	io.SocketAddress m_remoteAddress;
	std.Buffer m_readBuffer;
	uint_t m_connectionSyncId;

	// toolbar, status bar & menu

	ui.Action* m_actionTable[ActionId._Count];
	ui.Icon* m_iconTable[IconId._Count];
	ui.StatusPane* m_statusPaneTable[StatusPaneId._Count];
	ui.ComboBox* m_adapterCombo;
	ui.ComboBox* m_portCombo;

	// property grid

	ui.SocketPropertySet m_socketPropertySet;
	ui.SslPropertySet m_sslPropertySet;
	ui.BufferPropertySet m_bufferPropertySet;

	// information grid

	ui.StdSessionInfoSet m_stdSessionInfoSet;
	ui.ThroughputInfoSet m_throughputInfoSet;
	ui.ChecksumInfoSet m_checksumInfoSet;

	// ui reactor

	reactor m_uiReactor;

public:
	construct(doc.PluginHost* pluginHost);

	bool errorcode listen();
	stopListen();
	disconnect();

	override void load(doc.Storage* storage);
	override void save(doc.Storage* storage);
	override void updateProperties();
	override bool errorcode applyProperties();
	override void restoreDefaultProperties();

	override size_t errorcode transmit(
		void const* p,
		size_t size
		);

protected:
	onListen()
	{
		m_listenerState ? stopListen() : try listen();
	}

	onPortComboEnter()
	{
		try listen();
	}

	onListenerSocketEvent(
		uint_t syncId,
		io.SslSocketEvents triggeredEvents
		);

	onConnectionSocketEvent  (
		uint_t syncId,
		io.SslSocketEvents triggeredEvents
		);

	createUi();
	waitListenerSocketEvents();
	waitConnectionSocketEvents();
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

SslListenerSession.construct(doc.PluginHost* pluginHost)
{
	basetype.construct(pluginHost);

	createUi();

	pluginHost.m_log.addSelectionProcessor(log.ThroughputCalcRangeProcessor.factory~(m_throughputInfoSet));
	pluginHost.m_log.addSelectionProcessor(log.ChecksumCalcRangeProcessor.factory~(m_checksumInfoSet));
	m_stdSessionInfoSet.addLogListener(pluginHost.m_log);
}

SslListenerSession.createUi()
{
	// toolbar

	m_pluginHost.m_toolBar.addLabel("Adapter:");
	m_adapterCombo = ui.createNetworkAdapterComboBox(m_pluginHost.m_toolBar, ui.NetworkAdapterUsage.Listener);

	m_pluginHost.m_toolBar.addLabel("Port:");
	m_portCombo = m_pluginHost.m_toolBar.addComboBox();
	m_portCombo.m_isEditable = true;
	m_portCombo.m_onEnter += onPortComboEnter;

	// status bar

	m_statusPaneTable[StatusPaneId.RemoteAddress] = m_pluginHost.m_statusBar.addPane(, 100);
	m_statusPaneTable[StatusPaneId.RemoteAddress].m_color = ui.StdColor.Blue;
	m_statusPaneTable[StatusPaneId.ListenerState] = m_pluginHost.m_statusBar.addPane(, 80);

	// action buttons

	m_iconTable[IconId.Listen] = new ui.Icon("images/listen.png");
	m_iconTable[IconId.StopListen] = new ui.Icon("images/pause.png");
	m_iconTable[IconId.Disconnect] = new ui.Icon("images/disconnect.png");

	m_actionTable[ActionId.Listen] = createAction("Listen", m_iconTable [IconId.Listen]);
	m_actionTable[ActionId.Listen].m_onTriggered += onListen;

	m_actionTable[ActionId.Disconnect] = createAction("Disconnect", m_iconTable [IconId.Disconnect]);
	m_actionTable[ActionId.Disconnect].m_onTriggered += disconnect;

	// property grid

	ui.GroupProperty* group = m_pluginHost.m_propertyGrid.createGroupProperty(
		"Connection",
		"SSL-specific connection settings"
		);

	m_socketPropertySet.createProperties(
		m_pluginHost.m_propertyGrid,
		group,,
		ui.SocketPropertySet.PropertyId.AllTcpServer
		);

	m_socketPropertySet.m_defaultLocalPort = Defaults.LocalPort;

	m_sslPropertySet.createProperties(
		m_pluginHost.m_propertyGrid,
		group,,
		ui.SslPropertySet.PropertyId.AllServer
		);

	m_bufferPropertySet.createPropertiesGrouped(
		m_pluginHost.m_propertyGrid,,,
		ui.BufferPropertySet.PropertyId.All & ~ui.BufferPropertySet.PropertyId.ReadParallelism
		);

	// information grid

	ui.InformationGroup* infoGroup = m_pluginHost.m_informationGrid.createGroup("SSL listener");

	m_stdSessionInfoSet.createInformationValues(m_pluginHost.m_informationGrid, infoGroup);
	m_throughputInfoSet.createInformationValuesGrouped(m_pluginHost.m_informationGrid);
	m_checksumInfoSet.createInformationValuesGrouped(m_pluginHost.m_informationGrid);

	m_pluginHost.m_propertyGrid.resizeNameColumnToContents();
	m_pluginHost.m_informationGrid.resizeNameColumnToContents();

	m_uiReactor.start();
}

bool errorcode SslListenerSession.listen()
{
	stopListen();
	startSession();

	m_portCombo.addEditTextToHistory();
	io.SocketAddress address = *(io.SocketAddress const*) m_adapterCombo.m_currentData;
	address.m_port = (uint16_t)atoi(m_portCombo.m_editText);

	m_listenerSocket.open(&address);
	m_listenerSocket.listen();

	address = m_listenerSocket.m_address;

	m_logWriter.write(
		SocketLogRecordCode.Listening,
		&address,
		sizeof(address)
		);

	m_localAddress = address;
	m_listenerState = ListenerState.Listening;
	waitListenerSocketEvents();
	m_stdSessionInfoSet.startSession(m_pluginHost.m_mainThreadScheduler);
	return true;

catch:
	std.Error const* error = std.getLastError();
	m_logWriter.write(
		SocketLogRecordCode.ListenError,
		error,
		error.m_size
		);

	m_listenerSocket.close();
	return false;
}

SslListenerSession.stopListen()
{
	if (m_listenerState != ListenerState.Listening)
		return;

	m_logWriter.write(
		SocketLogRecordCode.ListenStopped,
		&m_localAddress,
		sizeof(m_localAddress)
		);
	m_listenerSocket.close();
	m_listenerState = ListenerState.Closed;
	m_listenerSyncId++;
	m_stdSessionInfoSet.endSession();
}

SslListenerSession.disconnect()
{
	if (m_connectionState != ConnectionState.Connected)
		return;

	TcpDisconnectLogRecordParams params;
	params.m_address = m_remoteAddress;
	params.m_flags = 0;

	if (m_socketPropertySet.m_tcpResetProp.m_value)
		params.m_flags |= TcpDisconnectLogRecordFlags.Reset;

	m_logWriter.write(
		SocketLogRecordCode.ClientDisconnected,
		&params,
		sizeof(params)
		);

	m_connectionSocket.close();
	m_connectionSocket = null;
	m_connectionState = ConnectionState.Closed;
	m_connectionSyncId++;
}

void SslListenerSession.load(doc.Storage* storage)
{
	m_portCombo.loadHistory(storage, "portHistory");
	m_adapterCombo.m_currentIndex  = storage.readInt("adapterIdx");
	m_portCombo.m_editText = storage.readString("port");

	m_socketPropertySet.load(storage);
	m_sslPropertySet.load(storage);
	m_bufferPropertySet.load(storage);
	m_readBuffer.setSize(m_bufferPropertySet.m_readBufferSizeProp.m_value);
}

void SslListenerSession.save(doc.Storage* storage)
{
	m_socketPropertySet.save(storage);
	m_sslPropertySet.save(storage);
	m_bufferPropertySet.save(storage);

	m_portCombo.saveHistory(storage, "portHistory");
	storage.writeInt("adapterIdx", (int) m_adapterCombo.m_currentIndex);
	storage.writeString("port", m_portCombo.m_editText);
}

void SslListenerSession.updateProperties()
{
	m_socketPropertySet.m_localPortProp.m_value = atoi(m_portCombo.m_editText);
	m_socketPropertySet.m_adapterProp.m_currentIndex = m_adapterCombo.m_currentIndex;
}

bool errorcode SslListenerSession.applyProperties()
{
	m_portCombo.m_editText = $"$(m_socketPropertySet.m_localPortProp.m_value)";
	m_adapterCombo.m_currentIndex = m_socketPropertySet.m_adapterProp.m_currentIndex;
	m_readBuffer.setSize(m_bufferPropertySet.m_readBufferSizeProp.m_value);

	if (!m_connectionSocket)
		return true;

	m_connectionSocket.m_readBlockSize = m_bufferPropertySet.m_readBlockSizeProp.m_value;
	m_connectionSocket.m_readBufferSize = m_bufferPropertySet.m_readBufferSizeProp.m_value;
	m_connectionSocket.m_writeBufferSize = m_bufferPropertySet.m_writeBufferSizeProp.m_value;
	m_connectionSocket.m_options = ui.getSocketOptions(m_socketPropertySet, m_bufferPropertySet);
	return true;
}

void SslListenerSession.restoreDefaultProperties()
{
	m_socketPropertySet.restoreDefaults();
	m_sslPropertySet.restoreDefaults();
	m_bufferPropertySet.restoreDefaults();
}

size_t errorcode SslListenerSession.transmit(
	void const* p,
	size_t size
	)
{
	if (m_connectionState != ConnectionState.Connected)
		return -1;

	size_t result = m_connectionSocket.write(p, size);
	if (result)
		m_logWriter.write(log.StdRecordCode.Tx, p, result);

	if (result < size)
		m_isTransmitEnabled = false;

	return result;
}

SslListenerSession.waitListenerSocketEvents()
{
	m_listenerSocket.wait(
		io.SslSocketEvents.IoError |
		io.SslSocketEvents.IncomingConnection,
		onListenerSocketEvent~(++m_listenerSyncId) @ m_pluginHost.m_mainThreadScheduler
		);
}

SslListenerSession.waitConnectionSocketEvents()
{
	io.SslSocketEvents eventMask = io.SslSocketEvents.IoError;

	switch (m_connectionState)
	{
	case ConnectionState.SslHandshaking:
		eventMask |=
			io.SslSocketEvents.TcpDisconnected |
			io.SslSocketEvents.TcpReset |
			io.SslSocketEvents.SslHandshakeCompleted;
		break;

	case ConnectionState.Connected:
		eventMask |=
			io.SslSocketEvents.IncomingData |
			io.SslSocketEvents.TcpDisconnected |
			io.SslSocketEvents.TcpReset;

		if (!m_isTransmitEnabled)
			eventMask |= io.SslSocketEvents.WriteBufferReady;

		break;
	}

	m_connectionSocket.wait(
		eventMask,
		onConnectionSocketEvent~(++m_connectionSyncId) @ m_pluginHost.m_mainThreadScheduler
		);
}

SslListenerSession.onListenerSocketEvent(
	uint_t syncId,
	io.SslSocketEvents triggeredEvents
	)
{
	if (syncId != m_listenerSyncId)
		return;

	if (triggeredEvents & io.SslSocketEvents.IoError)
	{
		m_logWriter.write(log.StdRecordCode.Error, m_listenerSocket.m_ioError, m_listenerSocket.m_ioError.m_size);
		m_listenerSocket.close();
		m_listenerState = ListenerState.Closed;
		m_stdSessionInfoSet.endSession();
		return;
	}

	if (triggeredEvents & io.SslSocketEvents.IncomingConnection)
	{
		io.SslSocket* socket;

	nestedscope:
		io.SocketAddress address;
		socket = m_listenerSocket.accept(&address, true);

		if (m_connectionState == ConnectionState.Connected && !m_socketPropertySet.m_overrideConnectionProp.m_value)
		{
			socket.close();
			m_logWriter.write(SocketLogRecordCode.ClientRejected, &address, sizeof(address));
			waitListenerSocketEvents();
			return;
		}

		disconnect();

		m_logWriter.write(SocketLogRecordCode.ClientConnected, &address, sizeof(address));
		m_logWriter.write(SslLogRecordCode.SslHandshaking);

		socket.m_readBlockSize = m_bufferPropertySet.m_readBlockSizeProp.m_value;
		socket.m_readBufferSize = m_bufferPropertySet.m_readBufferSizeProp.m_value;
		socket.m_writeBufferSize = m_bufferPropertySet.m_writeBufferSizeProp.m_value;
		socket.m_options = ui.getSocketOptions(m_socketPropertySet, m_bufferPropertySet);
		socket.enableCiphers(m_sslPropertySet.m_cipherSetProp.m_value);

		if (m_sslPropertySet.m_useCertificateProp.m_value)
		{
			socket.loadCertificate(m_sslPropertySet.m_certificateFileProp.m_value);
			socket.loadPrivateKey(m_sslPropertySet.m_privateKeyFileProp.m_value);

			if (m_sslPropertySet.m_verifyCertificateProp.m_value)
			{
				socket.m_verifyMode = io.SslVerifyMode.VerifyPeerCertificate;
				socket.m_verifyDepth = m_sslPropertySet.m_verifyDepthProp.m_value;

				socket.loadVerifyLocations(
					m_sslPropertySet.m_verifyCaFileProp.m_value,
					m_sslPropertySet.m_verifyCaDirProp.m_value
					);
			}
		}
		else
		{
			if (m_sslPropertySet.m_useEphemeralDhProp.m_value)
				socket.setEphemeralDhStdParams(m_sslPropertySet.m_ephemeralDhStdParamsProp.m_value);

			if (m_sslPropertySet.m_useEphemeralEcdhProp.m_value)
				socket.setEphemeralEcdhCurve(m_sslPropertySet.m_ephemeralEcdhCurveProp.m_value);
		}

		socket.unsuspend();

		m_remoteAddress = address;
		m_connectionSocket = socket;
		m_connectionState = ConnectionState.SslHandshaking;

		waitConnectionSocketEvents();

	catch:
		m_logWriter.writeLastError(SocketLogRecordCode.ConnectError);

		if (socket)
			socket.close();
	}

	waitListenerSocketEvents();
}

SslListenerSession.onConnectionSocketEvent(
	uint_t syncId,
	io.SslSocketEvents triggeredEvents
	)
{
	if (syncId != m_connectionSyncId)
		return;

	if (triggeredEvents & io.SslSocketEvents.IoError)
	{
		m_logWriter.write(log.StdRecordCode.Error, m_connectionSocket.m_ioError, m_connectionSocket.m_ioError.m_size);
		m_connectionSocket.close();
		m_connectionSocket = null;
		m_connectionState = ConnectionState.Closed;
		m_isTransmitEnabled = false;
		return;
	}

	if (triggeredEvents & io.SslSocketEvents.SslHandshakeCompleted)
	{
		m_logWriter.write(SslLogRecordCode.SslHandshakeCompleted);

		std.Buffer buffer;
		size_t count = m_connectionSocket.m_peerCertificateChainLength;
		for (size_t i = 0; i < count; i++)
		{
			m_connectionSocket.m_peerCertificateChain[i].encode(buffer, io.SslCertFormat.Der);
			m_logWriter.write(SslLogRecordCode.SslCertificate, buffer.m_p, buffer.m_size);
		}

		io.SslCertificate const* cert = m_connectionSocket.m_peerCertificate;
		if (cert)
		{
			cert.encode(buffer, io.SslCertFormat.Der);
			m_logWriter.write(SslLogRecordCode.SslCertificate, buffer.m_p, buffer.m_size);
		}

		m_logWriter.write(SslLogRecordCode.SslCipher, m_connectionSocket.m_currentCipher.m_name);

		m_logWriter.write(SslLogRecordCode.SslConnectionCompleted);
		m_connectionState = ConnectionState.Connected;
		m_isTransmitEnabled = true;
		m_stdSessionInfoSet.startSession(m_pluginHost.m_mainThreadScheduler);
	}

	if (triggeredEvents & io.SslSocketEvents.TcpDisconnected)
	{
		for (;;) // read all the buffered data
		{
			size_t result = m_connectionSocket.read(m_readBuffer.m_p, m_readBuffer.m_size);
			if (!result)
				break;

			m_logWriter.write(log.StdRecordCode.Rx, m_readBuffer.m_p, result);
		}

		TcpDisconnectLogRecordParams recordParams;
		recordParams.m_address = m_remoteAddress;
		recordParams.m_flags = TcpDisconnectLogRecordFlags.Remote;

		if (triggeredEvents & io.SslSocketEvents.TcpReset)
			recordParams.m_flags |= TcpDisconnectLogRecordFlags.Reset;

		m_logWriter.write(
			SocketLogRecordCode.ClientDisconnected,
			&recordParams,
			sizeof(recordParams)
			);

		m_connectionSocket.close();
		m_connectionSocket = null;
		m_connectionState = ConnectionState.Closed;
		m_isTransmitEnabled = false;
		return;
	}

	if (triggeredEvents & io.SslSocketEvents.IncomingData)
	{
		size_t result = m_connectionSocket.read(m_readBuffer.m_p, m_readBuffer.m_size);
		if (result)
			m_logWriter.write(log.StdRecordCode.Rx, m_readBuffer.m_p, result);
	}

	if (io.SslSocketEvents.WriteBufferReady)
		m_isTransmitEnabled = true;

	waitConnectionSocketEvents();
}

reactor SslListenerSession.m_uiReactor
{
	m_title = $"SSL @ $(m_portCombo.m_editText)";
	m_actionTable[ActionId.Listen].m_text = m_listenerState ? "Stop Listening" : "Listen";
	m_actionTable[ActionId.Listen].m_icon = m_iconTable[m_listenerState ? IconId.StopListen : IconId.Listen];
	m_actionTable[ActionId.Disconnect].m_isEnabled = m_connectionState != ConnectionState.Closed;
	m_statusPaneTable[StatusPaneId.ListenerState].m_text = m_listenerState ? "Listening" : "Not listening";
	m_statusPaneTable[StatusPaneId.RemoteAddress].m_text = m_connectionState ? m_remoteAddress.getString() : "<peer>";
	m_statusPaneTable[StatusPaneId.RemoteAddress].m_isVisible = m_connectionState != ConnectionState.Closed;
}

//..............................................................................

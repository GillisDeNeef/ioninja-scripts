//.............................................................................
//
// UDP Flow Monitor session
//

import "doc_Plugin.jnc"
import "io_PCap.jnc"
import "io_Packet.jnc"
import "io_SocketAddress.jnc"

//.............................................................................

class UdpFlowMonSession: doc.Session
{
protected:
	bitflag enum State
	{
		Resolving,
		Capturing,
	}

	enum ActionId
	{
		Capture,
		_Count,
	}

	enum IconId
	{
		Capture,
		StopCapture,
		_Count,
	}

	enum StatusPaneId
	{
		State,
		_Count, 
	}

protected:
	// pcap

	State bindable m_state;
	io.PCap* m_pcap;	
	io.SocketAddressResolver* m_resolver;
	io.SocketAddress m_filterAddress;
	
	// toolbar, status bar & menu
	
	gui.Action* m_actionTable [ActionId._Count];
	gui.Icon* m_iconTable [IconId._Count];
	gui.StatusPane* m_statusPaneTable [StatusPaneId._Count];
	gui.ComboBox* m_deviceCombo;
	gui.ComboBox* m_filterCombo;
	
	// property grid
	
	gui.StringProperty* m_deviceProp;
	gui.BoolProperty* m_promisciousProp;
	gui.StringProperty* m_filterProp;

public:
	construct (doc.PluginHost* pluginHost);

	bool capture () throws;
	bool capture (io.SocketAddress const* filterAddress) throws;
	stopCapture ();

	override void load (doc.Storage* storage);
	override void save (doc.Storage* storage);
	override void updateProperties ();
	override bool applyProperties () throws;
	override void restoreDefaultProperties ();

protected:
	onCapture ();	
	onSetFilter ();
	onReadyRead (uint_t syncId);
	onResolverEvent (io.SocketAddressResolverEventParams const* params);

	char const* createFilterString (io.SocketAddress const* filterAddress);

	bool applyFilter () throws;
	bool setFilter (io.SocketAddress const* filterAddress) throws;

	bool decodePacket (
		void const* p,
		size_t size
		);

	createUi ();
	reactor m_uiReactor ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

UdpFlowMonSession.construct (doc.PluginHost* pluginHost)
{
	basetype.construct (pluginHost);

	pluginHost.m_log.m_representerFunc = representUdpFlowMonLog;

	m_state = 0;
	m_pcap = new io.PCap ();
	m_pcap.m_onReadyRead += onReadyRead @ m_pluginHost.m_mainThreadScheduler;
	m_resolver = new io.SocketAddressResolver ();
	m_resolver.m_onResolverEvent += onResolverEvent @ m_pluginHost.m_mainThreadScheduler;

	createUi ();
}

UdpFlowMonSession.createUi ()
{
	// toolbar

	m_pluginHost.m_toolBar.addLabel ("Device:");
	m_deviceCombo = m_pluginHost.m_toolBar.addComboBox (-1);
	m_deviceCombo.m_onEnter += onCapture;

	m_pluginHost.m_toolBar.addLabel ("Filter:");
	m_filterCombo = m_pluginHost.m_toolBar.addComboBox (-1);
	m_filterCombo.m_isEditable = true;
	m_filterCombo.m_onEnter += onSetFilter;

	io.PCapDeviceDesc const* device = io.createPCapDeviceDescList ();

	for (; device; device = device->m_next)
	{
		char const* itemName = $"%1 (%2)" (
			device->m_description ? device->m_description : device->m_name,
			device->m_address.m_address.getString ()
			);

		m_deviceCombo.addItem (itemName, device);
	}

	m_iconTable [IconId.Capture] = new gui.Icon ("images/capture.png");
	m_iconTable [IconId.StopCapture] = new gui.Icon ("images/pause.png");

	m_actionTable [ActionId.Capture] = createAction ("Capture", m_iconTable [IconId.Capture]);
	m_actionTable [ActionId.Capture].m_onTriggered += onCapture;

	// status bar
	
	m_statusPaneTable [StatusPaneId.State] = m_pluginHost.m_statusBar.addPane (, 80);

	// property grid

	m_deviceProp = m_pluginHost.m_propertyGrid.createStringProperty (
		"Device",
		"Specify the device to capture on"
		);

	m_promisciousProp = m_pluginHost.m_propertyGrid.createBoolProperty (
		"Promiscious Mode",
		"Put the capturing interface into promiscious mode"
		);

	m_filterProp = m_pluginHost.m_propertyGrid.createStringProperty (
		"Address Filter",
		"Specify the address to monitor"
		);

	m_uiReactor.start ();
}

UdpFlowMonSession.onCapture ()
{
	if (m_state)
		stopCapture ();
	else
		try capture ();
}

UdpFlowMonSession.onSetFilter ()
{
	if (!m_state)
		try capture ();
	else
		try applyFilter ();	
}

bool UdpFlowMonSession.capture () throws
{
	stopCapture ();

	io.PCapDeviceDesc const* device = m_deviceCombo.m_currentData;
	if (!device)
		return false;

	char const* addressString = m_filterCombo.m_editText;
	m_filterCombo.addEditTextToHistory ();

	io.SocketAddress filterAddress;
	bool isDirectAddress = try filterAddress.parse (addressString);
	if (isDirectAddress)
		return try capture (&filterAddress);

	writeLogString (UdpFlowMonLogRecordCode.Resolving, addressString);

	m_resolver.m_syncId = m_pcap.m_syncId;
	bool result = try m_resolver.resolve (addressString);
	if (!result)
	{
		writeLogLastError (UdpFlowMonLogRecordCode.ResolveError);
		return false;
	}

	m_state = State.Resolving;
	return true;
}

bool UdpFlowMonSession.capture (io.SocketAddress const* filterAddress) throws
{
	stopCapture ();
		
	io.PCapDeviceDesc const* device = m_deviceCombo.m_currentData;
	if (!device)
		return false;
	
	char const* filterString = createFilterString (filterAddress);
	writeLogString (UdpFlowMonLogRecordCode.StartingCapture, filterString);
	
	bool result = try m_pcap.open (
		device.m_name, 
		filterString,
		m_promisciousProp.m_value
		);
		
	if (!result)
	{
		writeLogLastError (UdpFlowMonLogRecordCode.CaptureError);
		return false;
	}

	m_state = State.Capturing;
	m_filterAddress = *filterAddress;
	writeLog (UdpFlowMonLogRecordCode.CaptureStarted);
	return true;
}

UdpFlowMonSession.stopCapture ()
{
	if (!m_state)
		return;

	if (m_state & State.Resolving)
		writeLog (UdpFlowMonLogRecordCode.ResolveCancelled);		
	
	if (m_state & State.Capturing)
		writeLog (UdpFlowMonLogRecordCode.CaptureStopped);
	
	m_pcap.close ();
	m_state = 0;
}

bool UdpFlowMonSession.applyFilter () throws
{
	char const* filterString = m_filterCombo.m_editText;
	m_filterCombo.addEditTextToHistory ();

	io.SocketAddress filterAddress;
	bool isDirectAddress = try filterAddress.parse (filterString);
	if (isDirectAddress)
	{
		m_state &= ~State.Resolving;
		return try setFilter (&filterAddress);	
	}

	writeLogString (UdpFlowMonLogRecordCode.Resolving, filterString);
		
	m_resolver.m_syncId = m_pcap.m_syncId;
	bool result = try m_resolver.resolve (filterString);
	if (!result)
	{
		writeLogLastError (UdpFlowMonLogRecordCode.ResolveError);
		return false;
	}
	
	m_state |= State.Resolving;
	return true;
}

bool UdpFlowMonSession.setFilter (io.SocketAddress const* filterAddress) throws
{
	if (!m_state.Capturing)
		return true;

	char const* filterString = createFilterString (filterAddress);
	writeLogString (UdpFlowMonLogRecordCode.ChangingFilter, filterString);
	bool result = try m_pcap.setFilter (filterString);
	if (!result)
	{
		writeLogLastError (UdpFlowMonLogRecordCode.FilterError);
		return false;
	}
	
	writeLog (UdpFlowMonLogRecordCode.FilterChanged);
	return true;
}

char const* UdpFlowMonSession.createFilterString (io.SocketAddress const* filterAddress)
{
	char const* filterString = 
		filterAddress.m_family == io.AddressFamily.Ip6 ? $"udp and host $(filterAddress.m_ip6.m_address.getString ())" :
		filterAddress.m_ip4.m_address.m_i32 ? $"udp and host $(filterAddress.m_ip4.m_address.getString ())" :
		"udp";

	if (filterAddress.m_ip4.m_port)
		filterString = $"$filterString and port $(filterAddress.m_ip4.m_port)";
	
	return filterString;
}

void UdpFlowMonSession.load (doc.Storage* storage)
{
	m_deviceCombo.m_currentIndex = storage.readInt ("device");
	m_promisciousProp.m_value = storage.readBool ("promiscious");
	m_filterCombo.m_editText = storage.readString ("captureFilter");
}

void UdpFlowMonSession.save (doc.Storage* storage)
{
	storage.writeInt ("device", (int) m_deviceCombo.m_currentIndex);
	storage.writeBool ("promiscious", m_promisciousProp.m_value);
	storage.writeString ("captureFilter", m_filterCombo.m_editText);
}

void UdpFlowMonSession.updateProperties ()
{
	io.PCapDeviceDesc const* device = m_deviceCombo.m_currentData;
	if (!device)
		return;
		
	m_deviceProp.m_value = device.m_name;
}

bool UdpFlowMonSession.applyProperties () throws
{
	// m_deviceCombo.m_currentIndex = m_deviceProp.m_currentIndex;
	m_filterCombo.m_editText = m_filterProp.m_value;

	if (m_state.Capturing)
		applyFilter ();

	return true;
}

void UdpFlowMonSession.restoreDefaultProperties ()
{
	m_deviceProp.m_value = m_deviceCombo.m_itemText [0];
	m_promisciousProp.m_value = false;
	m_filterProp.m_value = "65535";
}

UdpFlowMonSession.onResolverEvent (io.SocketAddressResolverEventParams const* params)
{
	if (params.m_syncId != m_pcap.m_syncId)
		return;

	m_state &= ~State.Resolving;

	switch (params.m_eventKind)
	{
	case io.SocketAddressResolverEvent.ResolveCompleted:
		writeLog (
			UdpFlowMonLogRecordCode.ResolveCompleted,
			params.m_addressTable,
			sizeof (io.SocketAddress)
			);

		if (m_state & State.Capturing)
			try setFilter (params.m_addressTable);
		else
			try capture (params.m_addressTable);
		break;

	case io.SocketAddressResolverEvent.ResolveError:
		writeLogError (UdpFlowMonLogRecordCode.ResolveError, params.m_error);
		break;
	}
}

UdpFlowMonSession.onReadyRead (uint_t syncId)
{
	if (syncId != m_pcap.m_syncId)
		return;

	static char buffer [1600]; // static is OK -- we read in main thread
	size_t result = try m_pcap.read (buffer, sizeof (buffer));
	if (result != -1)
		decodePacket (buffer, result);
}

bool UdpFlowMonSession.decodePacket (
	void const* p,
	size_t size
	)
{
	if (size < sizeof (io.EthernetHdr))
		return false;
	
	io.EthernetHdr const* ethernetHdr = (io.EthernetHdr const*) p;
	p += sizeof (io.EthernetHdr);
	size -= sizeof (io.EthernetHdr);

	io.SocketAddress srcAddress;
	io.SocketAddress dstAddress;

	switch (ethernetHdr.m_type)
	{
	case io.EthernetType.Ip:
		if (size < sizeof (io.IpHdr))
			return false;
		
		io.IpHdr const* ipHdr = (io.IpHdr const*) p;

		if (ipHdr.m_protocol != io.Protocol.Udp ||
			ipHdr.m_totalLength > size)
			return false;
		
		srcAddress.m_family = io.AddressFamily.Ip4;
		srcAddress.m_ip4.m_address.m_i32 = ipHdr.m_srcAddress;
		dstAddress.m_family = io.AddressFamily.Ip4;
		dstAddress.m_ip4.m_address.m_i32 = ipHdr.m_dstAddress;		

		p += sizeof (io.IpHdr);
		size = ipHdr.m_totalLength - sizeof (io.IpHdr);
		break;

	case io.EthernetType.Ip6:
		if (size < sizeof (io.Ip6Hdr))
			return false;
		
		io.Ip6Hdr const* ip6Hdr = (io.Ip6Hdr const*) p;

		if (ip6Hdr.m_nextHeader != io.Protocol.Udp ||
			ip6Hdr.m_payloadLength + sizeof (io.Ip6Hdr) > size)
			return false;
		
		srcAddress.m_family = io.AddressFamily.Ip6;
		srcAddress.m_ip6.m_address = *(io.Address_ip6 const*) ip6Hdr.m_srcAddress;
		dstAddress.m_family = io.AddressFamily.Ip6;
		dstAddress.m_ip6.m_address = *(io.Address_ip6 const*) ip6Hdr.m_dstAddress;		

		p += sizeof (io.Ip6Hdr);
		size = ip6Hdr.m_payloadLength;
		break;

	default:
		return false;
	}	

	io.UdpHdr const* udpHdr = (io.UdpHdr const*) p;
	if (udpHdr.m_length > size)
		return false;

	p += sizeof (io.UdpHdr);
	size = udpHdr.m_length - sizeof (io.UdpHdr);

	srcAddress.m_ip4.m_port = udpHdr.m_srcPort;
	dstAddress.m_ip4.m_port = udpHdr.m_dstPort;

	char const* params = $"$(srcAddress; B)$(dstAddress; B)";

	if (srcAddress.isMatch (&m_filterAddress))
	{
		writeLog (
			UdpFlowMonLogRecordCode.RxPacket,
			params,
			dynamic sizeof (*params)
			);
		
		writeLog (log.StdRecordCode.Rx, p, size);
	}
	else if (dstAddress.isMatch (&m_filterAddress))
	{
		writeLog (
			UdpFlowMonLogRecordCode.TxPacket,
			params,
			dynamic sizeof (*params)
			);

		writeLog (log.StdRecordCode.Tx, p, size);
	}
	else
	{
		return false;
	}

	return true;
}		

reactor UdpFlowMonSession.m_uiReactor ()
{
	m_title = $"UDP Mon $(m_filterCombo.m_currentText)";
	m_actionTable [ActionId.Capture].m_text = m_state ? "Stop Capture" : "Capture";
	m_actionTable [ActionId.Capture].m_icon = m_iconTable [m_state ? IconId.StopCapture : IconId.Capture];
	m_statusPaneTable [StatusPaneId.State].m_text = 
		(m_state & State.Capturing) ? "Capturing" : 
		(m_state & State.Resolving) ? "Resolving" :
		"Closed";
}

//.............................................................................

//.............................................................................
//
// Serial session
//

import "doc_Plugin.jnc"
import "io_Serial.jnc"

//.............................................................................

class SerialSession: doc.Session
{
protected:
	enum State
	{
		Closed,
		Opened,
	}

	enum ActionId
	{
		Open,
		Dtr,
		Rts,
		_Count,
	}

	enum IconId
	{
		Open,
		Close,
		_Count,
	}

	enum StatusPaneId
	{
		PortName,
		State,
		Dtr,
		Rts,
		Dsr,
		Cts,
		Dcd,
		_Count,
	}

protected:
	// serial port

	State bindable m_state;
	io.Serial m_serial;
	SerialLogFilter m_logFilter;
	char const* m_portName;
	uint_t bindable m_serialStatusLines;
	bool bindable m_serialDtr;
	bool bindable m_serialRts;

	// toolbar, status bar & menu

	gui.Action* m_actionTable [ActionId._Count];
	gui.Icon* m_iconTable [IconId._Count];
	gui.StatusPane* m_statusPaneTable [StatusPaneId._Count];
	gui.ComboBox* m_portCombo;
	gui.ComboBox* m_baudRateCombo;
	gui.ComboBox* m_flowControlCombo;

	// serial property grid

	gui.EnumProperty* m_portProp;
	gui.EnumProperty* m_baudRateProp;
	gui.EnumProperty* m_flowControlProp;
	gui.EnumProperty* m_dataBitsProp;
	gui.EnumProperty* m_stopBitsProp;
	gui.EnumProperty* m_parityProp;

	// filter property grid

	gui.BoolProperty* m_settingChangedVisibleProp;
	gui.BoolProperty* m_controlLineChangedVisibleProp;
	gui.BoolProperty* m_statusLineChangedVisibleProp;

public:
	construct (doc.PluginHost* pluginHost);

	bool open () throws;
	close ();

	override void load (doc.Storage* storage);
	override void save (doc.Storage* storage);
	override void updateProperties ();
	override bool applyProperties () throws;
	override void restoreDefaultProperties ();

	override size_t transmit (
		void const* p,
		size_t size
		) throws;

protected:
	onOpen ();	
	onSerialEvent (io.SerialEventParams const* params);
	onBaudRateChanged ();
	onFlowControlChanged ();
	onDtrChanged ();
	onRtsChanged ();

	createUi ();
	reactor m_uiReactor ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

SerialSession.construct (doc.PluginHost* pluginHost)
{
	basetype.construct (pluginHost);

	pluginHost.m_log.m_representerFunc = representSerialLog;
	pluginHost.m_log.attachFilter (m_logFilter);

	m_state = State.Closed;
	m_serial.m_onSerialEvent += onSerialEvent @ pluginHost.m_mainThreadScheduler;

	createUi ();
}

SerialSession.createUi ()
{
	static gui.EnumPropertyOption baudRateTable [] =
	{
		{ "110 bps",    110 },
		{ "300 bps",    300 },
		{ "600 bps",    600 },
		{ "1200 bps",   1200 },
		{ "2400 bps",   2400 },
		{ "4800 bps",   4800 },
		{ "9600 bps",   9600 },
		{ "14400 bps",  14400 },
		{ "19200 bps",  19200 },
		{ "38400 bps",  38400 },
		{ "56000 bps",  56000 },
		{ "57600 bps",  57600 },
		{ "115200 bps", 115200 },
		{ "128000 bps", 128000 },
		{ "256000 bps", 256000 },
	};
	
	static gui.EnumPropertyOption flowControlTable [] =
	{
		{ "None",     io.SerialFlowControl.None },
		{ "RTS/CTS",  io.SerialFlowControl.RtsCts },
		{ "XON/XOFF", io.SerialFlowControl.XOnXOff },
	};
	
	static gui.EnumPropertyOption dataBitsTable [] =
	{
		{ "7 bits", 7 },
		{ "8 bits", 8 },
	};
	
	static gui.EnumPropertyOption stopBitsTable [] =
	{
		{ "1 bit",    io.SerialStopBits._1 },
		{ "1.5 bits", io.SerialStopBits._15 },
		{ "2 bits",   io.SerialStopBits._2 },
	};
	
	static gui.EnumPropertyOption parityTable [] =
	{
		{ "None",  io.SerialParity.None },
		{ "Odd",   io.SerialParity.Odd },
		{ "Even",  io.SerialParity.Even },
		{ "Mark",  io.SerialParity.Mark },
		{ "Space", io.SerialParity.Space },
	};
	
	// toolbar

	m_pluginHost.m_toolBar.addLabel ("Port:");
	m_portCombo = m_pluginHost.m_toolBar.addComboBox ();
	m_portCombo.m_isEditable = true;
	
	size_t portCount;
	io.SerialPortDesc const* portList = io.createSerialPortDescList (&portCount);
	io.SerialPortDesc const* port = portList;
	for (; port; port = port.m_next)
		m_portCombo.addItem (port.m_name, null);

	m_portCombo.adjustSizeToContents ();
	m_portCombo.m_onEnter += open;

	m_pluginHost.m_toolBar.addLabel (" Baud rate:");
	m_baudRateCombo = m_pluginHost.m_toolBar.addComboBox ();

	for (size_t i = 0; i < countof (baudRateTable); i++)
		m_baudRateCombo.addItem (
			baudRateTable [i].m_text, 
			baudRateTable [i].m_value
			);		

	m_baudRateCombo.adjustSizeToContents ();
	m_baudRateCombo.m_onChanged += onBaudRateChanged;

	m_pluginHost.m_toolBar.addLabel (" Flow control:");
	m_flowControlCombo = m_pluginHost.m_toolBar.addComboBox ();

	for (size_t i = 0; i < countof (flowControlTable); i++)
		m_flowControlCombo.addItem (
			flowControlTable [i].m_text, 
			flowControlTable [i].m_value
			);

	m_flowControlCombo.adjustSizeToContents ();
	m_flowControlCombo.m_onChanged += onFlowControlChanged;

	m_iconTable [IconId.Open] = new gui.Icon ("images/connect.png");
	m_iconTable [IconId.Close] = new gui.Icon ("images/pause.png");

	m_actionTable [ActionId.Open]  = createAction ("Open", "images/connect.png");
	m_actionTable [ActionId.Open].m_onTriggered += onOpen;

	m_pluginHost.m_menu.addSeparator ();
	m_pluginHost.m_toolBar.addSeparator ();

	m_actionTable [ActionId.Dtr] = createAction ("DTR", "images/dtr.png", true, true);
	m_actionTable [ActionId.Dtr].m_onTriggered += onDtrChanged;
	
	m_actionTable [ActionId.Rts] = createAction ("RTS", "images/rts.png", true, false);
	m_actionTable [ActionId.Rts].m_onTriggered += onRtsChanged;

	// status bar

	m_statusPaneTable [StatusPaneId.PortName] = m_pluginHost.m_statusBar.addPane (, 50);
	m_statusPaneTable [StatusPaneId.PortName].m_color = gui.StdColor.Blue;
	m_statusPaneTable [StatusPaneId.State] = m_pluginHost.m_statusBar.addPane (, 80);
	m_statusPaneTable [StatusPaneId.Dtr] = m_pluginHost.m_statusBar.addPane ("DTR", 32);
	m_statusPaneTable [StatusPaneId.Dtr].m_color = gui.StdColor.Red;
	m_statusPaneTable [StatusPaneId.Rts] = m_pluginHost.m_statusBar.addPane ("RTS", 32);
	m_statusPaneTable [StatusPaneId.Rts].m_color = gui.StdColor.Red;
	m_statusPaneTable [StatusPaneId.Dsr] = m_pluginHost.m_statusBar.addPane ("DSR", 32);
	m_statusPaneTable [StatusPaneId.Dsr].m_color = gui.StdColor.Red;
	m_statusPaneTable [StatusPaneId.Cts] = m_pluginHost.m_statusBar.addPane ("CTS", 32);
	m_statusPaneTable [StatusPaneId.Cts].m_color = gui.StdColor.Red;
	m_statusPaneTable [StatusPaneId.Dcd] = m_pluginHost.m_statusBar.addPane ("DCD", 32);
	m_statusPaneTable [StatusPaneId.Dcd].m_color = gui.StdColor.Red;

	// property grid

	m_portProp = io.createSerialPortProperty (
		m_pluginHost.m_propertyGrid,
		"Port",
		"Specify serial port to use",
		portList,
		portCount
		);

	m_baudRateProp = m_pluginHost.m_propertyGrid.createEnumProperty (
		"Baud rate",
		"Serial baud rate",
		baudRateTable,
		countof (baudRateTable)
		);

	m_flowControlProp = m_pluginHost.m_propertyGrid.createEnumProperty (
		"Flow control",
		"Serial flow control",
		flowControlTable,
		countof (flowControlTable)
		);

	m_dataBitsProp = m_pluginHost.m_propertyGrid.createEnumProperty (
		"Data bits",
		"Serial data bit count (word size)",
		dataBitsTable,
		countof (dataBitsTable)
		);

	m_stopBitsProp = m_pluginHost.m_propertyGrid.createEnumProperty (
		"Stop bits",
		"Serial stop bit count",
		stopBitsTable,
		countof (stopBitsTable)
		);

	m_parityProp = m_pluginHost.m_propertyGrid.createEnumProperty (
		"Parity",
		"Serial parity check",
		parityTable,
		countof (parityTable)
		);

	// filter 

	m_settingChangedVisibleProp = m_pluginHost.m_propertyGrid.createBoolProperty (
		"Show setting changes",
		"Display setting change log records (or filter them out)"
		);

	m_controlLineChangedVisibleProp = m_pluginHost.m_propertyGrid.createBoolProperty (
		"Show control line changes",
		"Display control line change log records (or filter them out)"
		);

	m_statusLineChangedVisibleProp = m_pluginHost.m_propertyGrid.createBoolProperty (
		"Show status line changes",
		"Display status line change log records (or filter them out)"
		);

	m_uiReactor.start ();
}

SerialSession.onOpen ()
{
	if (m_state)
		close ();
	else
		try open ();
}

bool SerialSession.open () throws
{
	close ();

	char const* name = m_portCombo.m_currentText;

	// open and configure
	
	m_serial.open (name);
	m_serial.m_baudRate = m_baudRateCombo.m_currentData;
	m_serial.m_flowControl = (io.SerialFlowControl) m_flowControlCombo.m_currentData;
	m_serial.m_dataBits = m_dataBitsProp.m_value;
	m_serial.m_stopBits = (io.SerialStopBits) m_stopBitsProp.m_value;
	m_serial.m_parity = (io.SerialParity) m_parityProp.m_value;
	m_serial.m_dtr = m_actionTable [ActionId.Dtr].m_isChecked;
	m_serial.m_rts = m_actionTable [ActionId.Rts].m_isChecked;

	SerialOpenParams params;
	params.m_baudRate = m_serial.m_baudRate;
	params.m_flowControl = m_serial.m_flowControl;
	params.m_dataBits = m_serial.m_dataBits;
	params.m_stopBits = m_serial.m_stopBits;
	params.m_parity = m_serial.m_parity;

	char const* p = $"$(params; B)$name";
	writeLog (SerialLogRecordCode.PortOpened, p, dynamic sizeof (p));

	m_portName = name;
	m_serialDtr = m_serial.m_dtr;
	m_serialRts = m_serial.m_rts;
	m_serialStatusLines = m_serial.m_statusLines;
	m_state = State.Opened;

	return true;

catch:
	m_serial.close ();

	jnc.Error const* error = jnc.getLastError ();
	writeLog (
		SerialLogRecordCode.PortOpenError,
		error,
		error.m_size
		);
	return false;
}

SerialSession.close ()
{
	if (m_state != State.Opened)
		return;

	writeLog (
		SerialLogRecordCode.PortClosed,
		m_portName,
		strlen (m_portName) + 1
		);

	m_serial.close ();
	m_state = State.Closed;
}

void SerialSession.load (doc.Storage* storage)
{
	m_portCombo.m_editText = storage.readString ("portName");
	m_baudRateCombo.m_currentIndex = storage.readInt ("baudRate");
	m_flowControlCombo.m_currentIndex = storage.readInt ("flowControl");
	m_dataBitsProp.m_value = storage.readInt ("dataBits");
	m_stopBitsProp.m_value = storage.readInt ("stopBits");
	m_parityProp.m_value = storage.readInt ("parity");
	m_logFilter.m_isSettingChangedVisible = storage.readBool ("isSettingChangedVisible");
	m_logFilter.m_isControlLineChangedVisible = storage.readBool ("isControlLineChangedVisible");
	m_logFilter.m_isStatusLineChangedVisible = storage.readBool ("isStatusLineChangedVisible");
}

void SerialSession.save (doc.Storage* storage)
{
	storage.writeString ("portName", m_portCombo.m_editText);
	storage.writeInt ("baudRate", (int) m_baudRateCombo.m_currentIndex);
	storage.writeInt ("flowControl", (int) m_flowControlCombo.m_currentIndex);
	storage.writeInt ("dataBits", m_dataBitsProp.m_value);
	storage.writeInt ("stopBits", m_stopBitsProp.m_value);
	storage.writeInt ("parity", m_parityProp.m_value);
	storage.writeBool ("isSettingChangedVisible", m_logFilter.m_isSettingChangedVisible);
	storage.writeBool ("isControlLineChangedVisible", m_logFilter.m_isControlLineChangedVisible);
	storage.writeBool ("isStatusLineChangedVisible", m_logFilter.m_isStatusLineChangedVisible);
}

void SerialSession.updateProperties ()
{
	m_portProp.m_currentIndex = m_portCombo.m_currentIndex;
	m_baudRateProp.m_currentIndex = m_baudRateCombo.m_currentIndex;
	m_flowControlProp.m_currentIndex = m_flowControlCombo.m_currentIndex;
	m_settingChangedVisibleProp.m_value = m_logFilter.m_isSettingChangedVisible;
	m_controlLineChangedVisibleProp.m_value = m_logFilter.m_isControlLineChangedVisible;
	m_statusLineChangedVisibleProp.m_value = m_logFilter.m_isStatusLineChangedVisible;
}

bool SerialSession.applyProperties () throws
{
	m_portCombo.m_currentIndex = m_portProp.m_currentIndex;
	m_baudRateCombo.m_currentIndex = m_baudRateProp.m_currentIndex;
	m_flowControlCombo.m_currentIndex = m_flowControlProp.m_currentIndex;
	m_logFilter.m_isSettingChangedVisible = m_settingChangedVisibleProp.m_value;
	m_logFilter.m_isControlLineChangedVisible = m_controlLineChangedVisibleProp.m_value;
	m_logFilter.m_isStatusLineChangedVisible = m_statusLineChangedVisibleProp.m_value;

	if (m_state != State.Opened)
		return true;

	uint_t dataBitsValue = m_dataBitsProp.m_value;
	if (m_serial.m_dataBits != dataBitsValue)
	{
		m_serial.m_dataBits = dataBitsValue;
		writeLog (SerialLogRecordCode.DataBitsChanged, &dataBitsValue, sizeof (dataBitsValue));
	}
		
	io.SerialStopBits stopBitsValue = (io.SerialStopBits) m_stopBitsProp.m_value;
	if (m_serial.m_stopBits != stopBitsValue)
	{
		m_serial.m_stopBits = stopBitsValue;
		writeLog (SerialLogRecordCode.StopBitsChanged, &stopBitsValue, sizeof (stopBitsValue));
	}

	io.SerialParity parityValue = (io.SerialParity) m_parityProp.m_value;
	if (m_serial.m_parity != parityValue)
	{
		m_serial.m_parity = parityValue;
		writeLog (SerialLogRecordCode.ParityChanged, &parityValue, sizeof (parityValue));
	}
		
	// baud rate and flow control setting changes are handled by their onChanged event handlers
	
	return true;
}

void SerialSession.restoreDefaultProperties ()
{
	m_portProp.m_currentIndex = 0;
	m_baudRateProp.m_value = 38400;
	m_flowControlProp.m_value = io.SerialFlowControl.None;
	m_dataBitsProp.m_value = 8;
	m_stopBitsProp.m_value = io.SerialStopBits._1;
	m_parityProp.m_value = io.SerialParity.None;

	m_settingChangedVisibleProp.m_value = true;
	m_controlLineChangedVisibleProp.m_value = true;
	m_statusLineChangedVisibleProp.m_value = true;
}

size_t SerialSession.transmit (
	void const* p,
	size_t size
	) throws
{
	if (m_state != State.Opened)
		return -1;

	size_t result = try m_serial.write (p, size);
	if (result != -1)
		writeLog (log.StdRecordCode.Tx, p, result);

	return result;
}

SerialSession.onSerialEvent (io.SerialEventParams const* params)
{
	if (params.m_syncId != m_serial.m_syncId)
		return;
		
	switch (params.m_eventKind)
	{
	case io.SerialEvent.IncomingData:
		static char buffer [512];
		size_t result = try m_serial.read (buffer, sizeof (buffer));
		if (result != -1)
			writeLog (log.StdRecordCode.Rx, buffer, result);
		break;
		
	case io.SerialEvent.StatusLineChanged:
		char const* p = $"$(params.m_lines; B)$(params.m_mask; B)";
		writeLog (SerialLogRecordCode.StatusLineChanged, p, dynamic sizeof (p));
		m_serialStatusLines = params.m_lines;
		break;

	case io.SerialEvent.TransmitBufferOverflow:
		m_isTransmitEnabled = false;
		break;

	case io.SerialEvent.TransmitBufferReady:
		m_isTransmitEnabled = true;
		break;
	}
}

SerialSession.onBaudRateChanged ()
{
	if (m_state != State.Opened)
		return;

	m_baudRateProp.m_currentIndex = m_baudRateCombo.m_currentIndex;
	uint_t value = m_baudRateProp.m_value;
		
	m_serial.m_baudRate = value;
	writeLog (SerialLogRecordCode.BaudRateChanged, &value, sizeof (value));
}

SerialSession.onFlowControlChanged ()
{
	if (m_state != State.Opened)
		return;

	m_flowControlProp.m_currentIndex = m_flowControlCombo.m_currentIndex;
	io.SerialFlowControl value = (io.SerialFlowControl) m_flowControlProp.m_value;
		
	m_serial.m_flowControl = value;
	writeLog (SerialLogRecordCode.FlowControlChanged, &value, sizeof (value));
}

SerialSession.onDtrChanged ()
{
	if (m_state != State.Opened)
		return;

	bool value = m_actionTable [ActionId.Dtr].m_isChecked;
	m_serial.m_dtr = value;
	m_serialDtr = value;
	writeLog (SerialLogRecordCode.DtrChanged, &value, sizeof (value));
}

SerialSession.onRtsChanged ()
{
	if (m_state != State.Opened)
		return;

	bool value = m_actionTable [ActionId.Rts].m_isChecked;
	m_serial.m_rts = value;
	m_serialRts = value;
	writeLog (SerialLogRecordCode.RtsChanged, &value, sizeof (value));
}

reactor SerialSession.m_uiReactor ()
{	
	m_actionTable [ActionId.Open].m_text = m_state ? "Close" : "Open";
	m_actionTable [ActionId.Open].m_icon = m_iconTable [m_state ? IconId.Close : IconId.Open];
	m_title = $"$(m_portCombo.m_currentText) $(m_baudRateCombo.m_currentText)";
	m_isTransmitEnabled = m_state == State.Opened;
	m_statusPaneTable [StatusPaneId.PortName].m_text = m_portCombo.m_currentText;
	m_statusPaneTable [StatusPaneId.PortName].m_isVisible = m_state != State.Closed;
	m_statusPaneTable [StatusPaneId.State].m_text = m_state ? "Opened" : "Closed"; 
	m_statusPaneTable [StatusPaneId.Dtr].m_isEnabled = m_state && m_serialDtr;
	m_statusPaneTable [StatusPaneId.Rts].m_isEnabled = m_state && m_serialRts;
	m_statusPaneTable [StatusPaneId.Dsr].m_isEnabled = m_state && (m_serialStatusLines & io.SerialStatusLines.Dsr);
	m_statusPaneTable [StatusPaneId.Cts].m_isEnabled = m_state && (m_serialStatusLines & io.SerialStatusLines.Cts);
	m_statusPaneTable [StatusPaneId.Dcd].m_isEnabled = m_state && (m_serialStatusLines & io.SerialStatusLines.Dcd);
}

//.............................................................................

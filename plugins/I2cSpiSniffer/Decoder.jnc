//..............................................................................
//
// I2C protocol decoder
//

//..............................................................................

class Decoder
{
protected:
	log.Writer* m_logWriter;

public:
	construct (log.Writer* logWriter)
	{
		m_logWriter = logWriter;
	}

	abstract reset ();

	abstract decode (
		void const* p,
		size_t size
		);

protected:
	writeLogUnexpectedCode (
		uint64_t timestamp,
		uint_t code,
		uint_t state
		);
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

Decoder.writeLogUnexpectedCode (
	uint64_t timestamp,
	uint_t code,
	uint_t state
	)
{
	struct Params
	{
		uint_t m_code;
		uint_t m_state;
	}

	Params params;
	params.m_code = code;
	params.m_state = state;

	m_logWriter.write (timestamp, I2cSpiSnifferLogRecordCode.UnexpectedCode, &params, sizeof (params));
}

//..............................................................................


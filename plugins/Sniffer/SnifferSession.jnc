//.............................................................................
//
// Sniffer session
//

import "doc_Plugin.jnc"
import "io_PCap.jnc"

//.............................................................................

class SnifferSession: doc.Session
{
protected:
	enum State
	{
		Closed,
		Opened,
	}

	enum ActionId
	{
		Capture,
		_Count,
	}

	enum IconId
	{
		Capture,
		StopCapture,
		_Count,
	}

	enum StatusPaneId
	{
		State,
		_Count,
	}

protected:
	// pcap

	State bindable m_state;
	io.PCap* m_pcap;	
	
	// toolbar, status bar & menu
	
	gui.Action* m_actionTable [ActionId._Count];
	gui.Icon* m_iconTable [IconId._Count];
	gui.StatusPane* m_statusPaneTable [StatusPaneId._Count];
	gui.ComboBox* m_deviceCombo;
	gui.ComboBox* m_filterCombo;
	
	// property grid
	
	gui.StringProperty* m_deviceProp;
	gui.BoolProperty* m_promisciousProp;
	gui.StringProperty* m_filterProp;

public:
	construct (doc.PluginHost* pluginHost);

	bool capture () throws;
	stopCapture ();

	override void load (doc.Storage* storage);
	override void save (doc.Storage* storage);
	override void updateProperties ();
	override bool applyProperties () throws;
	override void restoreDefaultProperties ();

	override size_t transmit (
		void const* p,
		size_t size
		) throws;

protected:
	onCapture ();
	onSetFilter ();
	onReadyRead (uint_t syncId);

	createUi ();
	reactor m_uiReactor ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

SnifferSession.construct (doc.PluginHost* pluginHost)
{
	basetype.construct (pluginHost);

	pluginHost.m_log.m_representerFunc = representSnifferLog;

	m_state = State.Closed;
	m_pcap = new io.PCap ();
	m_pcap.m_onReadyRead += onReadyRead @ m_pluginHost.m_mainThreadScheduler;

	createUi ();
}

SnifferSession.createUi ()
{
	// toolbar

	m_pluginHost.m_toolBar.addLabel ("Device:");
	m_deviceCombo = m_pluginHost.m_toolBar.addComboBox (-1);
	m_deviceCombo.m_onEnter += capture;

	m_pluginHost.m_toolBar.addLabel ("Filter:");
	m_filterCombo = m_pluginHost.m_toolBar.addComboBox (-1);
	m_filterCombo.m_isEditable = true;
	m_filterCombo.m_onEnter += onSetFilter;

	io.PCapDeviceDesc const* device = io.createPCapDeviceDescList ();

	for (; device; device = device->m_next)
	{
		char const* itemName = $"%1 (%2)" (
			device->m_description ? device->m_description : device->m_name,
			device->m_address.m_address.getString ()
			);

		m_deviceCombo.addItem (itemName, device);
	}

	m_iconTable [IconId.Capture] = new gui.Icon ("images/capture.png");
	m_iconTable [IconId.StopCapture] = new gui.Icon ("images/pause.png");

	m_actionTable [ActionId.Capture] = createAction ("Capture", m_iconTable [IconId.Capture]);
	m_actionTable [ActionId.Capture].m_onTriggered += onCapture;

	// status bar
	
	m_statusPaneTable [StatusPaneId.State] = m_pluginHost.m_statusBar.addPane (, 80);

	// property grid

	m_deviceProp = m_pluginHost.m_propertyGrid.createStringProperty (
		"Device",
		"Specify the device to capture on"
		);

	m_promisciousProp = m_pluginHost.m_propertyGrid.createBoolProperty (
		"Promiscious Mode",
		"Put the capturing interface into promiscious mode"
		);

	m_filterProp = m_pluginHost.m_propertyGrid.createStringProperty (
		"Capture Filter",
		"Capture only the packets which have passed this primary filter"
		);

	m_uiReactor.start ();
}

SnifferSession.onCapture ()
{
	if (m_state)
		stopCapture ();
	else
		try capture ();
}

SnifferSession.onSetFilter ()
{
	if (m_state != State.Opened)
		return;

	m_pcap.m_filter = m_filterProp.m_value;
}

bool SnifferSession.capture () throws
{
	stopCapture ();
		
	io.PCapDeviceDesc const* device = m_deviceCombo.m_currentData;
	if (!device)
		return false;

	char const* filter = m_filterCombo.m_editText;
	m_filterCombo.addEditTextToHistory ();

	m_pcap.open (
		device.m_name, 
		filter,
		m_promisciousProp.m_value
		);

	writeLogString (SnifferLogRecordCode.CaptureStarted, filter);
	m_state = State.Opened;
	return true;

catch:
	jnc.Error const* error = jnc.getLastError ();
	writeLog (
		SnifferLogRecordCode.CaptureError,
		error,
		error.m_size
		);

	m_pcap.close ();
	return false;
}

SnifferSession.stopCapture ()
{
	if (m_state != State.Opened)
		return;

	writeLog (SnifferLogRecordCode.CaptureStopped);
	m_pcap.close ();
	m_state = State.Closed;
}

void SnifferSession.load (doc.Storage* storage)
{
	m_deviceCombo.m_currentIndex = storage.readInt ("device");
	m_filterCombo.m_editText = storage.readString ("captureFilter");
	m_promisciousProp.m_value = storage.readBool ("promiscious");
}

void SnifferSession.save (doc.Storage* storage)
{
	storage.writeInt ("device", (int) m_deviceCombo.m_currentIndex);
	storage.writeString ("captureFilter", m_filterCombo.m_editText);
	storage.writeBool ("promiscious", m_promisciousProp.m_value);
}

void SnifferSession.updateProperties ()
{
	io.PCapDeviceDesc const* device = m_deviceCombo.m_currentData;
	if (device)
		m_deviceProp.m_value = device.m_name;

	m_filterProp.m_value = m_filterCombo.m_editText;
}

bool SnifferSession.applyProperties () throws
{
	m_filterCombo.m_editText = m_filterProp.m_value;
	onSetFilter ();
	return true;
}

void SnifferSession.restoreDefaultProperties ()
{
	m_deviceProp.m_value = m_deviceCombo.m_itemText [0];
	m_promisciousProp.m_value = false;
	m_filterProp.m_value = null;
}

size_t SnifferSession.transmit (
	void const* p,
	size_t size
	) throws
{
	if (!m_pcap)
		return -1;

	size_t result = try m_pcap.write (p, size);
	if (result != -1)
		writeLog (SnifferLogRecordCode.InjectedPacket, p, result);

	return result;
}

SnifferSession.onReadyRead (uint_t syncId)
{
	if (syncId != m_pcap.m_syncId)
		return;

	heap char buffer [512];
	size_t result = try m_pcap.read (buffer, sizeof (buffer));
	if (result != -1)
		writeLog (SnifferLogRecordCode.Packet, buffer, result);
}

reactor SnifferSession.m_uiReactor ()
{
	m_title = $"PCap $(m_deviceCombo.m_currentText)";
	m_isTransmitEnabled = m_state == State.Opened;
	m_actionTable [ActionId.Capture].m_text = m_state ? "Stop Capture" : "Capture";
	m_actionTable [ActionId.Capture].m_icon = m_iconTable [m_state ? IconId.StopCapture : IconId.Capture];
	m_statusPaneTable [StatusPaneId.State].m_text = m_state ? "Capturing" : "Closed";
}

//.............................................................................

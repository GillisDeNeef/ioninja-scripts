//.............................................................................
//
// Generic file log packet declarations and representer
//

//.............................................................................

enum FileLogRecordCode
{
	Opened,
	OpenError,
	Closed,	
	Eof,
	ReadError
}

//.............................................................................

bool representFileLog (
	log.RepresenterTarget* target,
	uint_t recordCode,
	void const* p,
	size_t size,
	uint_t foldFlags
	)
{
	switch (recordCode)
	{
	case FileLogRecordCode.Opened:
		io.FileStreamKind const* kind = (io.FileStreamKind const*) p;
		char const* fileName = (char const*) (kind + 1);
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Play;
		target.m_lineAttr.m_backColor = log.StdLogColor.Start;
		target.addHyperText ($"Opened file \e[34m$fileName\e[m ($(io.getFileStreamKindString (*kind)))");
		break;

	case FileLogRecordCode.OpenError:
		jnc.Error const* Error = (jnc.Error const*) p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		target.m_lineAttr.m_backColor = log.StdLogColor.Error;
		target.addHyperText ($"Cannot open file ($(Error.m_description))");
		break;

	case FileLogRecordCode.Closed:
		char const* fileName = (char const*) p;		
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Pause;
		target.m_lineAttr.m_backColor = log.StdLogColor.Stop;
		target.addHyperText ($"Closed file \e[34m$fileName");
		break;

	case FileLogRecordCode.Eof:
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText ("EOF reached");
		break;

	case FileLogRecordCode.ReadError:
		jnc.Error const* error = (jnc.Error const*) p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		target.m_lineAttr.m_backColor = log.StdLogColor.Error;
		target.addHyperText ($"Read error ($(error.m_description))");
		break;

	default:
		return false;
	}

	return true;
}

//.............................................................................

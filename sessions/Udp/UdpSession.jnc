//.............................................................................
//
// UDP session
//

//.............................................................................

class UdpSession: doc.Session
{
protected:
	enum State
	{
		Closed,
		Opened,
	}

	static char const* m_stateStringTable [] = 
	{
		"Closed",
		"Opened",
	};

	enum ResolveState
	{
		Unresolved,
		Resolving,
		Resolved,
		ChangeWhileResolving, // address changed while currently resolving
	}
	
	enum ActionId
	{
		Open,
		Close,
		_Count,
	}
	
	enum StatusPaneId
	{
		State,
		_Count,
	}
	
protected:
	// socket
		
	State bindable m_state;
	io.Socket* m_socket;
	io.SocketAddressResolver* m_resolver;
	ResolveState m_resolveState;
	io.SocketAddress m_remoteAddress;
	char* m_pendingData;
	size_t m_pendingDataSize;
	bool m_remoteAddressChanged;
	
	// toolbar, status bar & menu
	
	gui.Action* m_actionTable [ActionId._Count];
	gui.StatusPane* m_statusPaneTable [StatusPaneId._Count];
	gui.ComboBox* m_localPortCombo;
	gui.ComboBox* m_remoteAddressCombo;
	
	// property grid
	
	gui.IntProperty* m_localPortProp;
	gui.StringProperty* m_remoteAddressProp;
	gui.EnumProperty* m_adapterProp;
		
public:
	construct (doc.PluginHost* pluginHost);

	openSocket ();
	closeSocket ();

	override void load (doc.Storage* storage);
	override void save (doc.Storage* storage);
	override void updateProperties ();
	override bool applyProperties () throws;
	override void restoreDefaultProperties ();

	override size_t transmit (
		void const* p,
		size_t size
		) throws;

protected:
	void reportError();
	
	onLocalPortChanged ();
	onRemoteAddressChanged ();
	onSocketEvent (io.SocketEventParams const* params);
	onResolverEvent (io.SocketAddressResolverEventParams const* params);
	
	createGui ();
	reactor m_uiReactor ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

UdpSession.construct (doc.PluginHost* pluginHost)
{
	basetype.construct(pluginHost);

	pluginHost.m_log.m_representer = static new UdpLogRepresenter;

	m_state = State.Closed;
	m_socket = new io.Socket ();
	m_socket.m_onSocketEvent += onSocketEvent @ m_pluginHost.m_mainThreadScheduler;
	m_resolver = new io.SocketAddressResolver ();
	m_resolver.m_onResolverEvent += onResolverEvent @ m_pluginHost.m_mainThreadScheduler;
	m_resolveState = ResolveState.Unresolved;
	m_remoteAddressChanged = false;

	createGui ();
}

UdpSession.createGui()
{
	// toolbar
	
	m_pluginHost.m_toolBar.addLabel ("Local port: ");
	m_localPortCombo = m_pluginHost.m_toolBar.addComboBox ();
	m_localPortCombo.m_isEditable = true;
	m_localPortCombo.m_onChanged += onLocalPortChanged;

	m_actionTable [ActionId.Open] = m_pluginHost.createAction("Open socket", "images/open.png");
	m_actionTable [ActionId.Open].m_onTriggered += openSocket;

	m_actionTable [ActionId.Close] = m_pluginHost.createAction("Close socket", "images/close.png");
	m_actionTable [ActionId.Close].m_onTriggered += closeSocket;

	m_pluginHost.m_toolBar.addSeparator ();

	m_pluginHost.m_toolBar.addLabel ("Remote address: ");
	m_remoteAddressCombo = m_pluginHost.m_toolBar.addComboBox (-1);
	m_remoteAddressCombo.m_isEditable = true;
	m_remoteAddressCombo.m_onChanged += onRemoteAddressChanged;

	// status bar

	m_statusPaneTable [StatusPaneId.State] = m_pluginHost.m_statusBar.addPane (, 80);

	// property grid

	m_remoteAddressProp = m_pluginHost.createStringProperty (
		"Remote address",
		"Remote address to send to (IP-address or host-name followed by ':' port)"
		);

	m_localPortProp = m_pluginHost.createIntProperty (
		"Local UDP port",
		"Local UDP port to listen to"
		);

	m_adapterProp = m_pluginHost.createNetworkAdapterProperty (
		"Adapter",
		"Adapter to bind socket to"
		);
	m_adapterProp.m_value = 0;

	m_uiReactor.start();
}

UdpSession.openSocket ()
{
	closeSocket ();

	io.SocketAddress localAddress;
	localAddress.m_family = io.AddressFamily.Ip4;
	localAddress.m_ip4.m_address.m_i32 = m_adapterProp.m_value;
	localAddress.m_ip4.m_port = (uint16_t) atoi (m_localPortCombo.m_editText);

	if (!try m_socket.open (io.Protocol.Udp, &localAddress))
	{
		reportError ();
		return;
	}

	m_pluginHost.writeLog (UdpRecordCode.Open, &localAddress, sizeof (localAddress));

	m_state = State.Opened;
}

UdpSession.closeSocket ()
{
	if (m_state == State.Closed)
		return;

	m_socket.close ();

	m_localPortCombo.m_backgroundColor = gui.StdColor.White;

	char const* port = m_localPortCombo.m_editText;
	m_pluginHost.writeLog (UdpRecordCode.Close, port, strlen (port));

	m_state = State.Closed;
}

UdpSession.load (doc.Storage* storage)
{	
	m_localPortCombo.m_editText = storage.readString ("localPort");
	m_remoteAddressCombo.m_editText = storage.readString ("remoteAddress");	
	m_adapterProp.m_value = storage.readInt ("adapterIp");
}

UdpSession.save (doc.Storage* storage)
{
	storage.writeString ("localPort", m_localPortCombo.m_editText);
	storage.writeString ("remoteAddress", m_remoteAddressCombo.m_editText);
	storage.writeInt ("adapterIp", m_adapterProp.m_value);
}

UdpSession.updateProperties ()
{
	m_localPortProp.m_value = atoi (m_localPortCombo.m_editText);
	m_remoteAddressProp.m_value = m_remoteAddressCombo.m_editText;
}

bool UdpSession.applyProperties () throws
{
	m_localPortCombo.m_editText = $"$(m_localPortProp.m_value)";
	m_remoteAddressCombo.m_editText = m_remoteAddressProp.m_value;
	return true;
}

UdpSession.restoreDefaultProperties ()
{
	m_localPortProp.m_value = 1000;
	m_remoteAddressProp.m_value = "127.0.0.1:1001";
	m_adapterProp.m_value = 0;
}

size_t UdpSession.transmit (
	void const* p,
	size_t size
	) throws
{
	if (m_state == State.Closed)
		return -1;

	char const* addressString = m_remoteAddressCombo.m_editText;
	//m_remoteAddressCombo.addEditTextToHistory ();

	io.SocketAddress remoteAddress;
	bool isDirectAddress = try io.parseSocketAddress (addressString, &remoteAddress);
	if (isDirectAddress || m_resolveState == ResolveState.Resolved)
	{	
		if (isDirectAddress)
			m_remoteAddress = remoteAddress;
		else
			remoteAddress = m_remoteAddress; // resolved address
		
		m_socket.sendTo (p, size, &remoteAddress);
		
		void* data = memcat (&remoteAddress, sizeof (io.SocketAddress), p, size);
		size_t dataSize = sizeof (io.SocketAddress) + size;

		m_pluginHost.m_log.m_writer.write(UdpRecordCode.Tx, data, dataSize);
	}
	else
	{
		m_pendingDataSize = size;
		m_pendingData = new char [m_pendingDataSize];
		memcpy (m_pendingData, p, m_pendingDataSize);
		
		if (m_resolveState == ResolveState.Unresolved)
		{
			m_pluginHost.writeLog (
				UdpRecordCode.Resolving,
				addressString,
				strlen (addressString)
				);

			m_resolver.m_syncId = m_socket.m_syncId;
			m_resolver.resolve (addressString);

			m_resolveState = ResolveState.Resolving;
		}
	}
	
	return size;

catch:
	reportError ();
	return -1;
}

UdpSession.reportError()
{
	jnc.Error const* error = jnc.getLastError ();
	m_pluginHost.writeLog (UdpRecordCode.Error, error, error.m_size);
}

UdpSession.onLocalPortChanged ()
{
	if (m_state == State.Opened)
		m_localPortCombo.m_backgroundColor = gui.StdColor.PastelOrange;
}

UdpSession.onRemoteAddressChanged ()
{
	m_resolveState = m_resolveState == ResolveState.Resolving ?
		ResolveState.ChangeWhileResolving :
		ResolveState.Unresolved;
}

UdpSession.onSocketEvent(io.SocketEventParams const* params)
{
	if (params.m_syncId != m_socket.m_syncId)
		return;

	switch (params.m_eventKind)
	{
		case io.SocketEvent.IncomingData:
			io.SocketAddress remoteAddress;
			heap char buffer [512];
			size_t size = try m_socket.recvFrom (buffer, sizeof (buffer), &remoteAddress);
			if (size != -1)
			{
				void* data = memcat (&remoteAddress, sizeof (io.SocketAddress), buffer, size);
				size_t dataSize = sizeof (io.SocketAddress) + size;

				m_pluginHost.writeLog (UdpRecordCode.Rx, data, dataSize);
			}
			break;
	}
}

UdpSession.onResolverEvent (io.SocketAddressResolverEventParams const* params)
{
	if (params.m_syncId != m_socket.m_syncId)
		return;
		
	switch (params.m_eventKind)
	{
	case io.SocketAddressResolverEvent.ResolveCompleted:
		m_pluginHost.writeLog (
			UdpRecordCode.ResolveCompleted,
			params.m_address,
			sizeof (io.SocketAddress)
			);

		m_remoteAddress = *params.m_address;
		
		m_resolveState = m_resolveState == ResolveState.ChangeWhileResolving ?
			ResolveState.Unresolved :
			ResolveState.Resolved;
		
		if (try m_socket.sendTo (m_pendingData, m_pendingDataSize, &m_remoteAddress))
		{
			void* data = memcat (&m_remoteAddress, sizeof (io.SocketAddress), m_pendingData, m_pendingDataSize);
			size_t dataSize = sizeof (io.SocketAddress) + m_pendingDataSize;
			m_pluginHost.m_log.m_writer.write(UdpRecordCode.Tx, data, dataSize);
			
			m_pendingData = null;
			m_pendingDataSize = 0;
		}
		else
		{
			reportError ();
		}	
		break;

	case io.SocketAddressResolverEvent.ResolveError:
		m_pluginHost.writeLog (UdpRecordCode.Error, params.m_error, params.m_error.m_size);
		m_resolveState = ResolveState.Unresolved;
		break;
		
	default:
		m_resolveState = ResolveState.Unresolved;
		break;
	}
}

reactor UdpSession.m_uiReactor ()
{
	m_title = $"UDP @ $(m_localPortCombo.m_editText) -> $(m_remoteAddressCombo.m_editText)";
	m_isTransmitEnabled = m_state == State.Opened;
	m_actionTable [ActionId.Close].m_isEnabled = m_state == State.Opened;
	m_adapterProp.m_isEnabled = m_state == State.Closed;
	m_statusPaneTable [StatusPaneId.State].m_text = m_stateStringTable [m_state];
}

//.............................................................................
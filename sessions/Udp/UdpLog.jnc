//.............................................................................
//
// UDP log packet declarations and representer
//

//.............................................................................


enum UdpRecordCode
{
	Open               = 1,
	Close              = 2,
	Tx                 = 3,
	Rx                 = 4,
	Error		       = 5 | log.RecordCodeFlags.Mergeable,
	Resolving          = 6 | log.RecordCodeFlags.Mergeable,
	ResolveCompleted   = 7 | log.RecordCodeFlags.Mergeable,
}

enum UdpRecordPartCode
{
	Resolving         = 1 | log.RecordCodeFlags.MergeableForward,
	ResolveCompleted  = 1 | log.RecordCodeFlags.MergeableBackward,
}

//.............................................................................

class UdpLogRepresenter: log.Representer
{
	override bool represent (
		log.RepresenterTarget* target,
		uint_t recordCode,
		void const* p,
		size_t size,
		uint64_t foldFlags
		);
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bool UdpLogRepresenter.represent (
	log.RepresenterTarget* target,
	uint_t recordCode,
	void const* p,
	size_t size,
	uint64_t foldFlags
	)
{
	switch (recordCode)
	{	
		case UdpRecordCode.Open:
			char const* addressString = try io.formatSocketAddress ((io.SocketAddress const*) p);
			target.m_lineAttr.m_flags = log.LineAttrFlags.Override;
			target.m_lineAttr.m_iconIdx = log.StdLogIcon.Play;
			target.m_lineAttr.m_backColor = log.StdLogColor.Start;
			target.addHyperText($"Opened socket at <#0000FF>$addressString<>");
			break;
			
		case UdpRecordCode.Close:
			target.m_lineAttr.m_iconIdx = log.StdLogIcon.Pause;
			target.m_lineAttr.m_backColor = log.StdLogColor.Stop;
			target.addHyperText($"Socket at <#0000FF>$((char const*) p)<> closed");
			break;
			
		case UdpRecordCode.Tx:
			char const* remoteAddress = try io.formatSocketAddress ((io.SocketAddress const*) p);
			void const* data = p + sizeof (io.SocketAddress);
						
			target.m_lineAttr.m_flags = log.LineAttrFlags.TileIcon;
			target.m_lineAttr.m_iconIdx = log.StdLogIcon.Tx;
			target.m_lineAttr.m_backColor = gui.StdColor.PastelGray;
			target.addHyperText ($"To <#0000FF>$remoteAddress<>");
						
			target.m_lineAttr.m_flags = 0;
			target.m_lineAttr.m_iconIdx = -1;
			target.m_lineAttr.m_backColor = gui.StdColor.White;
			target.m_lineAttr.m_textColor = gui.StdColor.Blue;
			target.addBin (data, size - sizeof (io.SocketAddress));
			break;
			
		case UdpRecordCode.Rx:
			char const* remoteAddress = try io.formatSocketAddress ((io.SocketAddress const*) p);
			void const* data = p + sizeof (io.SocketAddress);
			
			target.m_lineAttr.m_flags = log.LineAttrFlags.TileIcon;
			target.m_lineAttr.m_iconIdx = log.StdLogIcon.Rx;
			target.m_lineAttr.m_backColor = gui.StdColor.PastelGray;
			target.addHyperText ($"From <#0000FF>$remoteAddress<>");
			
			target.m_lineAttr.m_flags = 0;
			target.m_lineAttr.m_iconIdx = -1;
			target.m_lineAttr.m_backColor = gui.StdColor.White;
			target.m_lineAttr.m_textColor = gui.StdColor.Green;
			target.addBin (data, size - sizeof (io.SocketAddress));
			break;
			
		case UdpRecordCode.Error:
			target.m_lineAttr.m_flags = log.LineAttrFlags.Override;
			target.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
			target.m_lineAttr.m_backColor = log.StdLogColor.Error;

			jnc.Error const* Error = (jnc.Error const*) p;
			target.addHyperText (UdpRecordPartCode.ResolveCompleted, $"error ($(Error.m_description))");
			break;
			
		case UdpRecordCode.Resolving:
			char const* addressString = (char const*) p;
			target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
			target.m_lineAttr.m_backColor = log.StdLogColor.Info;
			target.addHyperText (UdpRecordPartCode.Resolving, $"Resolving <15>$addressString<>...");
			break;
			
		case UdpRecordCode.ResolveCompleted:
			char const* addressString = try io.formatSocketAddress ((io.SocketAddress const*) p);
			target.addHyperText (UdpRecordPartCode.ResolveCompleted, $"ok (<15>$addressString<>)");
			break;
			
		default:
			return false;
	}
	
	return true;
}
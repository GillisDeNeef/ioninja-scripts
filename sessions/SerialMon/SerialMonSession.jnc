//.............................................................................
//
// Serial session
//

//.............................................................................

class SerialMonSession: doc.Session
{
protected:
	enum State
	{
		Closed,
		Opened,
	}

	enum ActionId
	{
		Capture,
		_Count,
	}

	enum IconId
	{
		Capture,
		StopCapture,
		_Count,
	}

	enum StatusPaneId
	{
		State,
		_Count,
	}

protected:
	// serial port

	State bindable m_state;
	io.SerialMon* m_serialMon;
	char const* m_portName;

	// toolbar, status bar & menu

	gui.Action* m_actionTable [ActionId._Count];
	gui.Icon* m_iconTable [IconId._Count];
	gui.StatusPane* m_statusPaneTable [StatusPaneId._Count];
	gui.ComboBox* m_portNameCombo;

	// property grid

	gui.StringProperty* m_portNameProp;

public:
	construct (doc.PluginHost* pluginHost);

	bool capture () throws;
	stopCapture ();

	override void load (doc.Storage* storage);
	override void save (doc.Storage* storage);
	override void updateProperties ();
	override bool applyProperties () throws;
	override void restoreDefaultProperties ();

protected:
	onCapture ();
	onReadyRead (uint_t syncId);

	createUi ();
	reactor m_uiReactor ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

SerialMonSession.construct (doc.PluginHost* pluginHost)
{
	basetype.construct (pluginHost);
	pluginHost.m_log.m_representer = new SerialMonLogRepresenter;

	m_state = State.Closed;
	m_serialMon = new io.SerialMon ();
	m_serialMon.m_onReadyRead += onReadyRead @ m_pluginHost.m_mainThreadScheduler;

	createUi ();
}

SerialMonSession.createUi ()
{
	// toolbar

	m_pluginHost.m_toolBar.addLabel ("Port: ");
	m_portNameCombo = m_pluginHost.m_toolBar.addComboBox ();
	m_portNameCombo.m_isEditable = true;
	m_portNameCombo.m_onEnter += capture;
	
	m_portNameCombo.addItem ("COM1");
	m_portNameCombo.addItem ("COM2");
	m_portNameCombo.addItem ("COM3");
	m_portNameCombo.addItem ("COM4");
	m_portNameCombo.addItem ("/dev/ttyS0");
	m_portNameCombo.addItem ("/dev/ttyS1");
	m_portNameCombo.addItem ("/dev/ttyS2");
	m_portNameCombo.addItem ("/dev/ttyS3");

	m_iconTable [IconId.Capture] = new gui.Icon ("images/capture.png");
	m_iconTable [IconId.StopCapture] = new gui.Icon ("images/pause.png");

	m_actionTable [ActionId.Capture]  = m_pluginHost.createAction ("Capture", m_iconTable [IconId.Capture]);
	m_actionTable [ActionId.Capture].m_onTriggered += onCapture;

	// status bar
	
	m_statusPaneTable [StatusPaneId.State] = m_pluginHost.m_statusBar.addPane (, 80);

	// property grid	

	m_portNameProp = m_pluginHost.createStringProperty (
		"Port name",
		"Specify serial port name to use"
		);
	
	m_uiReactor.start ();
}

SerialMonSession.onCapture ()
{
	if (m_state)
		stopCapture ();
	else
		try capture ();
}

bool SerialMonSession.capture () throws
{
	stopCapture ();

	char const* name = m_portNameCombo.m_currentText;

	m_serialMon.capture (name);
	m_pluginHost.writeLog (SerialMonLogRecordCode.CaptureStarted, name, strlen (name));

	m_portName = name;
	m_state = State.Opened;
	return true;

catch:
	m_serialMon.close ();

	jnc.Error const* error = jnc.getLastError ();
	m_pluginHost.writeLog (
		SerialMonLogRecordCode.CaptureError,
		error,
		error.m_size
		);
	return false;
}

SerialMonSession.stopCapture ()
{
	if (m_state != State.Opened)
		return;

	m_pluginHost.writeLog (
		SerialMonLogRecordCode.CaptureStopped,
		m_portName,
		strlen (m_portName) + 1
		);

	m_serialMon.close ();
	m_state = State.Closed;
}

void SerialMonSession.load (doc.Storage* storage)
{
	m_portNameCombo.m_editText = storage.readString ("portName");
}

void SerialMonSession.save (doc.Storage* storage)
{
	storage.writeString ("portName", m_portNameCombo.m_editText);
}

void SerialMonSession.updateProperties ()
{
	m_portNameProp.m_value = m_portNameCombo.m_currentText;
}

bool SerialMonSession.applyProperties () throws
{
	m_portNameCombo.m_editText = m_portNameProp.m_value;
	return true;
}

void SerialMonSession.restoreDefaultProperties ()
{
	m_portNameProp.m_value = "COM1";
}

SerialMonSession.onReadyRead (uint_t syncId)
{
	if (syncId != m_serialMon.m_syncId)
		return;
		
	io.SerialMonEventParams params;
	try m_serialMon.read (&params);
	
	switch (params.m_eventKind)
	{
	case io.SerialMonEvent.DeviceOpened:
		m_pluginHost.writeLog (SerialMonLogRecordCode.DeviceOpened);
		break;	

	case io.SerialMonEvent.DeviceClosed:		
		m_pluginHost.writeLog (SerialMonLogRecordCode.DeviceClosed);
		break;
		
	case io.SerialMonEvent.RxData:
		m_pluginHost.writeLog (log.StdRecordCode.Rx, params.m_data, params.m_dataSize);
		break;

	case io.SerialMonEvent.TxData:
		m_pluginHost.writeLog (log.StdRecordCode.Tx, params.m_data, params.m_dataSize);
		break;

	case io.SerialMonEvent.BaudRateChanged:
		m_pluginHost.writeLog (SerialLogRecordCode.BaudRateChanged, &params.m_baudRate, sizeof (params.m_baudRate));
		break;

	case io.SerialMonEvent.FlowControlChanged:
		m_pluginHost.writeLog (SerialLogRecordCode.FlowControlChanged, &params.m_flowControl, sizeof (params.m_flowControl));
		break;

	case io.SerialMonEvent.DataBitsChanged:
		m_pluginHost.writeLog (SerialLogRecordCode.DataBitsChanged, &params.m_dataBits, sizeof (params.m_dataBits));
		break;

	case io.SerialMonEvent.StopBitsChanged:
		m_pluginHost.writeLog (SerialLogRecordCode.StopBitsChanged, &params.m_stopBits, sizeof (params.m_stopBits));
		break;

	case io.SerialMonEvent.ParityChanged:
		m_pluginHost.writeLog (SerialLogRecordCode.ParityChanged, &params.m_parity, sizeof (params.m_parity));
		break;

	case io.SerialMonEvent.StatusLineChanged:
		uint_t mask = -1;
		char const* p = $"$(params.m_statusLines; B)$(mask; B)";
		m_pluginHost.writeLog (SerialLogRecordCode.StatusLineChanged, p, dynamic sizeof (*p));
		break;

	case io.SerialMonEvent.DtrChanged:
		m_pluginHost.writeLog (SerialLogRecordCode.DtrChanged, &params.m_dtr, sizeof (params.m_dtr));
		break;

	case io.SerialMonEvent.RtsChanged:
		m_pluginHost.writeLog (SerialLogRecordCode.RtsChanged, &params.m_rts, sizeof (params.m_rts));
		break;
	} 
}

reactor SerialMonSession.m_uiReactor ()
{	
	m_title = $"Mon $(m_portNameCombo.m_currentText)";
	m_actionTable [ActionId.Capture].m_text = m_state ? "Stop Capture" : "Capture";
	m_actionTable [ActionId.Capture].m_icon = m_iconTable [m_state ? IconId.StopCapture : IconId.Capture];
	m_statusPaneTable [StatusPaneId.State].m_text = m_state ? "Capturing" : "Closed";
}

//.............................................................................

//.............................................................................
//
// Serial log packet declarations and representer
//

//.............................................................................

enum SerialLogRecordCode
{
	PortOpened    = 1 | log.RecordCodeFlags.Foldable,
	PortOpenError = 2,
	PortClosed,
	BaudRateChanged,
	DataBitsChanged,
	StopBitsChanged,
	ParityChanged,
	FlowControlChanged,
	RtsChanged,
	DtrChanged,
	StatusLineChanged,
}

enum StatusLinePartCode
{
	Prefix = 1 | log.RecordCodeFlags.MergeableForward,
	Suffix = 1 | log.RecordCodeFlags.Mergeable,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct SerialOpenParams
{
	uint_t m_baudRate;
	uint_t m_flowControl;
	uint_t m_dataBits;
	uint_t m_stopBits;
	uint_t m_parity;

	// followed by port name
};

//.............................................................................

class SerialLogRepresenter: log.Representer
{
	override bool represent (
		log.RepresenterTarget* target,
		uint_t recordCode,
		void const* p,
		size_t size,
		uint64_t foldFlags
		);
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bool SerialLogRepresenter.represent (
	log.RepresenterTarget* target,
	uint_t recordCode,
	void const* p,
	size_t size,
	uint64_t foldFlags
	)
{
	switch (recordCode)
	{
	case SerialLogRecordCode.PortOpened:
		SerialOpenParams const* params = (SerialOpenParams const*) p;
		char const* name = (char const*) (params + 1);

		target.m_lineAttr.m_iconIdx = StdLogIcon.Play;
		target.m_lineAttr.m_backColor = StdLogColor.Start;

		if (!(foldFlags & 1))
			target.addHyperText ($"[<#0000ff=+1>+<>] Opened port <15>$name<> at <15>$(params.m_baudRate)<> bps");
		else
			target.addHyperText (
				$"[<#0000ff=-1>-<>] Opened port <15>$name<>\n"
				$"    <#808080+i>Baud rate:<>    $(params.m_baudRate) bps\n"
				$"    <#808080+i>Data bits:<>    $(params.m_dataBits)\n"
				$"    <#808080+i>Stop bits:<>    $(params.m_stopBits)\n"
				$"    <#808080+i>Parity:<>       $(params.m_parity)\n"
				$"    <#808080+i>Flow control:<> $(params.m_flowControl)"
				);

		break;

	case SerialLogRecordCode.PortClosed:
		char const* name = (char const*) p;
		target.m_lineAttr.m_iconIdx = StdLogIcon.Pause;
		target.m_lineAttr.m_backColor = StdLogColor.Stop;
		target.addHyperText ($"Port <15>$name<> closed");
		break;

	case SerialLogRecordCode.PortOpenError:
		jnc.Error const* error = (jnc.Error const*) p;
		target.m_lineAttr.m_iconIdx = StdLogIcon.Error;
		target.m_lineAttr.m_backColor = StdLogColor.Error;
		target.addHyperText ($"Unable to open port ($(error.m_description))");
		break;

	case SerialLogRecordCode.BaudRateChanged:
		uint_t baudRate = *(uint_t const*) p;

		target.m_lineAttr.m_iconIdx = StdLogIcon.Info;
		target.m_lineAttr.m_backColor = StdLogColor.Info;
		target.addHyperText ($"Baud rate set to <15>$baudRate<> bps");
		break;

	case SerialLogRecordCode.DataBitsChanged:
		uint_t dataBits = *(uint_t const*) p;

		target.m_lineAttr.m_iconIdx = StdLogIcon.Info;
		target.m_lineAttr.m_backColor = StdLogColor.Info;
		target.addHyperText ($"Data bits set to <15>$dataBits<>");
		break;

	case SerialLogRecordCode.StopBitsChanged:
		uint_t stopBits = *(uint_t const*) p;

		target.m_lineAttr.m_iconIdx = StdLogIcon.Info;
		target.m_lineAttr.m_backColor = StdLogColor.Info;
		target.addHyperText ($"Stop bits set to <15>$stopBits<>");
		break;

	case SerialLogRecordCode.ParityChanged:
		uint_t parity = *(uint_t const*) p;

		target.m_lineAttr.m_iconIdx = StdLogIcon.Info;
		target.m_lineAttr.m_backColor = StdLogColor.Info;
		target.addHyperText ($"Parity set to <15>$parity<>");
		break;

	case SerialLogRecordCode.FlowControlChanged:
		uint_t flowControl = *(uint_t const*) p;

		target.m_lineAttr.m_iconIdx = StdLogIcon.Info;
		target.m_lineAttr.m_backColor = StdLogColor.Info;
		target.addHyperText ($"Flow control set to <15>$flowControl");
		break;

	case SerialLogRecordCode.RtsChanged:
		bool rts = *(bool const*) p;

		target.m_lineAttr.m_iconIdx = StdLogIcon.Info;
		target.m_lineAttr.m_backColor = StdLogColor.Info;
		target.addHyperText ($"<15>RTS<> set to $rts");
		break;

	case SerialLogRecordCode.DtrChanged:
		bool dtr = *(bool const*) p;

		target.m_lineAttr.m_iconIdx = StdLogIcon.Info;
		target.m_lineAttr.m_backColor = StdLogColor.Info;
		target.addHyperText ($"<15>DTR<> set to $dtr");
		break;

	case SerialLogRecordCode.StatusLineChanged:
		uint_t lines = ((uint_t const*) p) [0];
		uint_t mask  = ((uint_t const*) p) [1];

		target.m_lineAttr.m_iconIdx = StdLogIcon.Info;
		target.m_lineAttr.m_backColor = StdLogColor.Info;
		target.addHyperText (StatusLinePartCode.Prefix, "Status line(s) changed:");

		if (mask & io.SerialStatusLines.Dsr)
		{
			bool dsr = (lines & io.SerialStatusLines.Dsr) != 0;
			target.addHyperText (StatusLinePartCode.Suffix, $" <15>DSR<>:$dsr");
		}

		if (mask & io.SerialStatusLines.Cts)
		{
			bool cts = (lines & io.SerialStatusLines.Cts) != 0;
			target.addHyperText (StatusLinePartCode.Suffix, $" <15>CTS<>:$cts");
		}

		if (mask & io.SerialStatusLines.Dcd)
		{
			bool dcd = (lines & io.SerialStatusLines.Dcd) != 0;
			target.addHyperText (StatusLinePartCode.Suffix, $" <15>DCD<>:$dcd");
		}

		break;

	default:
		return false;
	}

	return true;
}

//.............................................................................

class SerialLogFilter: log.Filter
{
	bool m_isSettingChangedVisible;
	bool m_isControlLineChangedVisible;
	bool m_isStatusLineChangedVisible;

	construct ();

	override bool filter (
		log.Writer* writer,
		uint64_t timestamp,
		uint_t recordCode,
		void const* p,
		size_t size
		);
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

SerialLogFilter.construct ()
{
	m_isSettingChangedVisible = true;
	m_isControlLineChangedVisible = true;
	m_isStatusLineChangedVisible = true;
}

bool SerialLogFilter.filter (
	log.Writer* writer,
	uint64_t timestamp,
	uint_t recordCode,
	void const* p,
	size_t size
	)
{
	switch (recordCode)
	{
	case SerialLogRecordCode.BaudRateChanged:
	case SerialLogRecordCode.DataBitsChanged:
	case SerialLogRecordCode.StopBitsChanged:
	case SerialLogRecordCode.ParityChanged:
	case SerialLogRecordCode.FlowControlChanged:
		if (m_isSettingChangedVisible)
			writer.write (timestamp, recordCode, p, size);

		break;

	case SerialLogRecordCode.RtsChanged:
	case SerialLogRecordCode.DtrChanged:
		if (m_isControlLineChangedVisible)
			writer.write (timestamp, recordCode, p, size);

		break;

	case SerialLogRecordCode.StatusLineChanged:
		if (m_isControlLineChangedVisible)
			writer.write (timestamp, recordCode, p, size);

		break;

	default:
		return false;
	}

	return true;
}

//.............................................................................

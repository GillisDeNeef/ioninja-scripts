//.............................................................................
//
// Sniffer log packet declarations and representer
//

//.............................................................................

enum SnifferLogRecordCode
{
	Packet         = 1 | log.RecordCodeFlags.Foldable,
	InjectedPacket = 2 | log.RecordCodeFlags.Foldable,
	CaptureStarted = 3,
	CaptureError,
	CaptureStopped,
	FilterChanged,
	FilterError,
}

//.............................................................................

class SnifferLogRepresenter: log.Representer
{
	override bool represent (
		log.RepresenterTarget* target,
		uint_t recordCode,
		void const* p,
		size_t size,
		uint_t foldFlags
		);
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bool SnifferLogRepresenter.represent (
	log.RepresenterTarget* target,
	uint_t recordCode,
	void const* p,
	size_t size,
	uint_t foldFlags
	)
{
	switch (recordCode)
	{
	case SnifferLogRecordCode.Packet:
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Packet;
		representPacket (target, p, size, foldFlags);
		break;

	case SnifferLogRecordCode.InjectedPacket:
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.TxPacket;
		representPacket (target, p, size, foldFlags);
		break;

	case SnifferLogRecordCode.CaptureStarted:
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Play;
		target.m_lineAttr.m_backColor = log.StdLogColor.Start;
		target.addHyperText ("Capture started");
		break;

	case SnifferLogRecordCode.CaptureError:
		jnc.Error const* error = (jnc.Error const*) p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		target.m_lineAttr.m_backColor = log.StdLogColor.Error;
		target.addHyperText ($"Capture error ($(error.m_description))");
		break;

	case SnifferLogRecordCode.CaptureStopped:
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Pause;
		target.m_lineAttr.m_backColor = log.StdLogColor.Stop;
		target.addHyperText ("Capture stopped");
		break;

	case SnifferLogRecordCode.FilterChanged:
		char const* filter = (char const*) p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText ($"Capture filter set to '$filter'");
		break;

	case SnifferLogRecordCode.FilterError:
		jnc.Error const* error = (jnc.Error const*) p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		target.m_lineAttr.m_backColor = log.StdLogColor.Error;
		target.addHyperText ($"Cannot change filter ($(error.m_description))");
		break;

	default:
		return false;
	}

	return true;
}

//.............................................................................

representPacket (
	log.RepresenterTarget* target,
	void const* p,
	size_t size,
	uint_t foldFlags
	)
{
	// TODO: add data link switch, currently we support ethernet only

	representEthernet (target, p, size, foldFlags);
}

representPacketData (
	log.RepresenterTarget* target,
	void const* p,
	size_t size,
	size_t baseOffset,
	size_t length
	)
{
	if (baseOffset >= size)
		return;

	if (length == -1 || baseOffset + length >= size)
		length = size - baseOffset;

	target.m_lineAttr.m_textColor = gui.StdColor.Gray;
	target.m_lineAttr.m_backColor = gui.ColorFlags.Transparent;
	target.addBin (p + baseOffset, length);
}

//.............................................................................

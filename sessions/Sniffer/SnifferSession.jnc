//.............................................................................
//
// Sniffer session
//

//.............................................................................

class SnifferSession: doc.Session
{
protected:
	enum State
	{
		Closed,
		Opened,
	}

	enum ActionId
	{
		Capture,
		StopCapture,
		_Count,
	}

protected:
	// pcap

	State bindable m_state;
	io.PCap* m_pcap;	
	
	// toolbar & menu
	
	gui.Action* m_actionTable [ActionId._Count];
	gui.ComboBox* m_deviceCombo;
	
	// property grid
	
	gui.StringProperty* m_deviceProp;
	gui.BoolProperty* m_promisciousProp;
	gui.StringProperty* m_captureFilterProp;
	gui.StringProperty* m_displayFilterProp;

public:
	construct (doc.PluginHost* pluginHost);

	bool capture () throws;
	stopCapture ();

	override void load (doc.Storage* storage);
	override void save (doc.Storage* storage);
	override void updateProperties ();
	override bool applyProperties () throws;
	override void restoreDefaultProperties ();

	override size_t transmit (
		void const* p,
		size_t size
		) throws;

protected:
	onReadyRead (uint_t syncId);

	createUi ();
	reactor m_uiReactor ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

SnifferSession.construct (doc.PluginHost* pluginHost)
{
	basetype.construct (pluginHost);

	pluginHost.m_log.m_representer = static new SnifferLogRepresenter;

	m_state = State.Closed;
	m_pcap = new io.PCap ();
	m_pcap.m_onReadyRead += onReadyRead @ m_pluginHost.m_mainThreadScheduler;

	createUi ();
}

SnifferSession.createUi ()
{
	// toolbar

	m_pluginHost.m_toolBar.addLabel ("Device: ");
	m_deviceCombo = m_pluginHost.m_toolBar.addComboBox (-1);
	m_deviceCombo.m_onEnter += capture;

	io.PCapDeviceDesc const* device = io.createPCapDeviceDescList ();

	for (; device; device = device->m_next)
	{
		char const* itemName = jnc.format (
			"%s (%s)", 
			io.formatAddress_Ip4 (&device->m_address.m_address),
			device->m_description
			);

		object <io.PCapDeviceDesc const*>* data = new object <io.PCapDeviceDesc const*>;
		data.m_value = device;
		m_deviceCombo.addItem (itemName, data);
	}

	m_actionTable [ActionId.Capture] = m_pluginHost.createAction ("Capture", "images/capture.png");
	m_actionTable [ActionId.Capture].m_onTriggered += capture;

	m_actionTable [ActionId.StopCapture] = m_pluginHost.createAction ("Stop", "images/pause.png");
	m_actionTable [ActionId.StopCapture].m_onTriggered += stopCapture;
	m_actionTable [ActionId.StopCapture].m_isEnabled = false;

	// property grid

	m_deviceProp = m_pluginHost.createStringProperty (
		"Device",
		"Specify the device to capture on"
		);

	m_promisciousProp = m_pluginHost.createBoolProperty (
		"Promiscious Mode",
		"Put the capturing interface into promiscious mode"
		);

	m_captureFilterProp = m_pluginHost.createStringProperty (
		"Capture Filter",
		"Capture only the packets which have passed this primary filter"
		);

	m_displayFilterProp = m_pluginHost.createStringProperty (
		"Display Filter",
		"Apply the secondary filter to captured packets"
		);
	
	m_uiReactor.start ();
}

bool SnifferSession.capture () throws
{
	stopCapture ();

	object <io.PCapDeviceDesc const*>* data = (object <io.PCapDeviceDesc const*>*) m_deviceCombo.m_currentData;
	io.PCapDeviceDesc const* device = data.m_value;

	m_pcap.open (
		device.m_name, 
		m_captureFilterProp.m_value,
		m_promisciousProp.m_value
		);

	m_pluginHost.writeLog (SnifferLogRecordCode.CaptureStarted);
	m_state = State.Opened;
	return true;

catch:
	jnc.Error const* error = jnc.getLastError ();
	m_pluginHost.writeLog (
		SnifferLogRecordCode.CaptureError,
		error,
		error.m_size
		);

	m_pcap.close ();
	return false;
}

SnifferSession.stopCapture ()
{
	if (m_state != State.Opened)
		return;

	m_pluginHost.writeLog (SnifferLogRecordCode.CaptureStopped);
	m_pcap.close ();
	m_state = State.Closed;
}

void SnifferSession.load (doc.Storage* storage)
{
	m_deviceCombo.m_currentIndex = storage.readInt ("device");
	m_promisciousProp.m_value = storage.readBool ("promiscious");
	m_captureFilterProp.m_value = storage.readString ("captureFilter");
	m_displayFilterProp.m_value = storage.readString ("displayFilter");
}

void SnifferSession.save (doc.Storage* storage)
{
	storage.writeInt ("device", m_deviceCombo.m_currentIndex);
	storage.writeBool ("promiscious", m_promisciousProp.m_value);
	storage.writeString ("captureFilter", m_captureFilterProp.m_value);
	storage.writeString ("displayFilter", m_displayFilterProp.m_value);
}

void SnifferSession.updateProperties ()
{
	object <io.PCapDeviceDesc const*>* data = (object <io.PCapDeviceDesc const*>*) m_deviceCombo.m_currentData;
	io.PCapDeviceDesc const* device = data.m_value;
	
	m_deviceProp.m_value = device.m_name;
}

bool SnifferSession.applyProperties () throws
{
	// m_deviceCombo.m_currentIndex = m_deviceProp.m_currentIndex;
	return true;
}

void SnifferSession.restoreDefaultProperties ()
{
	m_deviceProp.m_value = m_deviceCombo.m_itemText [0];
	m_promisciousProp.m_value = false;
	m_captureFilterProp.m_value = "";
	m_displayFilterProp.m_value = "";
}

size_t SnifferSession.transmit (
	void const* p,
	size_t size
	) throws
{
	if (!m_pcap)
		return -1;

	size_t result = try m_pcap.write (p, size);
	if (result != -1)
		m_pluginHost.writeLog (SnifferLogRecordCode.InjectedPacket, p, result);

	return result;
}

SnifferSession.onReadyRead (uint_t syncId)
{
	if (syncId != m_pcap.m_syncId)
		return;

	heap char buffer [512];
	size_t result = try m_pcap.read (buffer, sizeof (buffer));
	if (result != -1)
		m_pluginHost.writeLog (SnifferLogRecordCode.Packet, buffer, result);
}

reactor SnifferSession.m_uiReactor ()
{
	m_title = $"PCap $(m_deviceCombo.m_currentText)";
	m_isTransmitEnabled = m_state == State.Opened;
	m_actionTable [ActionId.StopCapture].m_isEnabled = m_state == State.Opened;
}

//.............................................................................

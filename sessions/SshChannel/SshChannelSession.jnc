//.............................................................................
//
// SSH Connection session
//

//.............................................................................

class SshChannelSession: doc.Session
{
protected:
	enum State
	{
		Closed,
		Resolving,
		Connecting,
		Connected
	}

	enum ActionId
	{
		Connect,
		Disconnect,
		_Count,
	}

protected:
	// ssh 
	
	State bindable m_state;
	io.SshChannel* m_channel;
	io.SocketAddressResolver* m_resolver;
	io.SocketAddress m_remoteAddress;
	
	// toolbar & menu
	
	gui.Action* m_actionTable [ActionId._Count];
	gui.ComboBox* m_addressCombo;

	// property grid

	gui.StringProperty* m_addressProp;
	gui.StringProperty* m_userNameProp;
	gui.StringProperty* m_passwordProp;
	gui.StringProperty* m_channelTypeProp;
	gui.StringProperty* m_processTypeProp;
	gui.StringProperty* m_ptyTypeProp;
	gui.EnumProperty* m_closeKindProp;
	gui.BoolProperty* m_isNagleEnabledProp;
	gui.BoolProperty* m_useLocalAddressProp;
	gui.EnumProperty* m_adapterProp;
	gui.IntProperty* m_localPortProp;

public:
	construct (doc.PluginHost* pluginHost);

	bool connect () throws;
	disconnect ();

	override void load (doc.Storage* storage);
	override void save (doc.Storage* storage);
	override void updateProperties ();
	override bool applyProperties () throws;
	override void restoreDefaultProperties ();

	override size_t transmit (
		void const* p,
		size_t size
		) throws;

protected:
	handleConnectError (jnc.Error const* error);
	
	onSshEvent (io.SshEventParams const* params);
	onResolverEvent (io.SocketAddressResolverEventParams const* params);

	createUi ();	
	reactor m_uiReactor ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

SshChannelSession.construct (doc.PluginHost* pluginHost)
{
	basetype.construct (pluginHost);

	pluginHost.m_log.m_representer = static new SshChannelLogRepresenter;

	m_state = State.Closed;
	m_channel = io.createSshChannel  ();
	m_channel.m_onSshEvent += onSshEvent @ m_pluginHost.m_mainThreadScheduler;
	m_resolver = io.createSocketAddressResolver ();
	m_resolver.m_onResolverEvent += onResolverEvent @ m_pluginHost.m_mainThreadScheduler;

	createUi ();
}

SshChannelSession.createUi ()
{
	// toolbar

	m_pluginHost.m_toolBar.addLabel ("Address: ");
	m_addressCombo = m_pluginHost.m_toolBar.addComboBox (-1);
	m_addressCombo.m_isEditable = true;
	m_addressCombo.m_onEnter += connect;

	m_actionTable [ActionId.Connect] = m_pluginHost.createAction ("Connect", "images/connect.png");
	m_actionTable [ActionId.Connect].m_onTriggered += connect;

	m_actionTable [ActionId.Disconnect] = m_pluginHost.createAction ("Disconnect", "images/disconnect.png");
	m_actionTable [ActionId.Disconnect].m_onTriggered += disconnect;

	// property grid

	m_addressProp = m_pluginHost.createStringProperty (
		"Remote address",
		"Remote address to connect to (IP-address or host-name followed by ':' port)"
		);

	m_userNameProp = m_pluginHost.createStringProperty (
		"User name",
		"User name for SSH authentification"
		);
		
	m_passwordProp = m_pluginHost.createStringProperty (
		"Password",
		"Password for SSH authentification"
		);

	m_passwordProp.m_isPassword = true;

	m_channelTypeProp = m_pluginHost.createStringProperty (
		"SSH channel",
		"Type of requested SSH channel"
		);

	m_processTypeProp = m_pluginHost.createStringProperty (
		"SSH process",
		"Type of requested SSH process"
		);

	m_ptyTypeProp = m_pluginHost.createStringProperty (
		"Pseudoterminal",
		"Type of requested pseudoterminal (PTY)"
		);

	static gui.EnumPropertyOption closeKindTable [] =
	{
		{ "Reset",    io.SocketCloseKind.Reset },
		{ "Graceful", io.SocketCloseKind.Graceful },
	};

	m_closeKindProp = m_pluginHost.createEnumProperty (
		"TCP disconnect",
		"How to close TCP connection (graceful / reset)", 
		closeKindTable,
		countof (closeKindTable)
		);

	m_isNagleEnabledProp = m_pluginHost.createBoolProperty (
		"Use TCP Nagle algorithm",
		"Specify whether to reduce the number of small TCP packets being sent"
		);

	m_useLocalAddressProp = m_pluginHost.createBoolProperty (
		"Use local TCP address",
		"Bind socket to the specified local address before connect"
		);

	m_adapterProp = m_pluginHost.createNetworkAdapterProperty (
		"Adapter",
		"Adapter to bind to before connect"
		);

	m_localPortProp = m_pluginHost.createIntProperty (
		"Local TCP port",
		"Local TCP port to bind to before connect"
		);

	m_uiReactor.start ();
}

bool SshChannelSession.connect () throws
{
	disconnect ();

	char const* addressString = m_addressCombo.m_editText;
	m_addressCombo.addEditTextToHistory ();

	io.SocketAddress address;
	bool isDirectAddress = try io.parseSocketAddress (addressString, &address);
	if (isDirectAddress)
	{
		m_pluginHost.writeLog (
			SshChannelLogRecordCode.TcpConnecting,
			&address,
			sizeof (address)
			);
	}
	else
	{
		m_pluginHost.writeLog (
			SshChannelLogRecordCode.Resolving,
			addressString,
			strlen (addressString)
			);

		m_resolver.m_syncId = m_channel.m_syncId;
		m_resolver.resolve (addressString);
	}	

	if (!m_useLocalAddressProp.m_value)
	{
		m_channel.open (); // any address
	}
	else
	{
		io.SocketAddress localAddress;
		localAddress.m_family = io.AddressFamily.Ip4;
		localAddress.m_ip4.m_address.m_i32 = m_adapterProp.m_value;
		localAddress.m_ip4.m_port = (uint16_t) m_localPortProp.m_value;

		m_channel.open (&localAddress);
	}

	if (isDirectAddress)
	{
		m_channel.connect (
			&address, 
			m_userNameProp.m_value, 
			m_passwordProp.m_value,
			m_channelTypeProp.m_value,
			m_processTypeProp.m_value,
			m_ptyTypeProp.m_value
			);

		m_remoteAddress = address;
		m_state = State.Connecting;
	}
	else
	{
		m_state = State.Resolving;
	}		
	
	return true;

catch:
	handleConnectError (jnc.getLastError ());
	return false;
}

SshChannelSession.handleConnectError (jnc.Error const* error)
{
	m_pluginHost.writeLog (
		SshChannelLogRecordCode.ConnectError,
		error,
		error.m_size
		);
		
	m_channel.close ();
	m_state = State.Closed;
}

SshChannelSession.disconnect ()
{
	switch (m_state)
	{
	case State.Closed:
		return;

	case State.Resolving:
	case State.Connecting:
		m_pluginHost.writeLog (SshChannelLogRecordCode.ConnectCancelled);
		break;

	case State.Connected:
		m_pluginHost.writeLog (
			SshChannelLogRecordCode.Disconnected,
			&m_remoteAddress,
			sizeof (m_remoteAddress)
			);
		break;
	}
	
	m_channel.close ();
	m_state = State.Closed;
}

void SshChannelSession.load (doc.Storage* storage)
{
	m_addressCombo.m_editText = storage.readString ("address");
	m_userNameProp.m_value = storage.readString ("userName");
	m_channelTypeProp.m_value = storage.readString ("channelType");
	m_processTypeProp.m_value = storage.readString ("processType");
	m_ptyTypeProp.m_value = storage.readString ("ptyType");
	m_closeKindProp.m_value = storage.readInt ("closeKindProp");
	m_isNagleEnabledProp.m_value = storage.readBool ("isNagleEnabledProp");
	m_useLocalAddressProp.m_value = storage.readBool ("useLocalAddress");
	m_adapterProp.m_value = storage.readInt ("adapterIp");
	m_localPortProp.m_value = storage.readInt ("localPort");
}

void SshChannelSession.save (doc.Storage* storage)
{
	storage.writeString ("address", m_addressCombo.m_editText);
	storage.writeString ("userName", m_userNameProp.m_value);
	storage.writeString ("channelType", m_channelTypeProp.m_value);
	storage.writeString ("processType", m_processTypeProp.m_value);
	storage.writeString ("ptyType", m_ptyTypeProp.m_value);
	storage.writeInt ("closeKindProp", m_closeKindProp.m_value);
	storage.writeBool ("isNagleEnabledProp", m_isNagleEnabledProp.m_value);
	storage.writeBool ("useLocalAddress", m_useLocalAddressProp.m_value);
	storage.writeInt ("adapterIp", m_adapterProp.m_value);
	storage.writeInt ("localPort", m_localPortProp.m_value);
}

void SshChannelSession.updateProperties ()
{
	m_addressProp.m_value = m_addressCombo.m_editText;
}

bool SshChannelSession.applyProperties () throws
{
	m_addressCombo.m_editText = m_addressProp.m_value;
	return true;
}

void SshChannelSession.restoreDefaultProperties ()
{
	m_addressProp.m_value = "ls0.tibbo.net:22";
	m_userNameProp.m_value = "vovkos";
	m_channelTypeProp.m_value = "session";
	m_processTypeProp.m_value = "shell";
	m_ptyTypeProp.m_value = "ansi";
	m_closeKindProp.m_value = io.SocketCloseKind.Graceful;
	m_isNagleEnabledProp.m_value = true;
	m_useLocalAddressProp.m_value = false;
	m_adapterProp.m_value = 0;
	m_localPortProp.m_value = 0;
}

size_t SshChannelSession.transmit (
	void const* p,
	size_t size
	) throws
{
	if (m_state != State.Connected)
		return -1;

	size_t result = try m_channel.write (p, size);
	if (result != -1)
		m_pluginHost.writeLog (log.StdRecordCode.Tx, p, result);

	return result;
}

SshChannelSession.onSshEvent (io.SshEventParams const* params)
{
	if (params.m_syncId != m_channel.m_syncId)
		return;

	switch (params.m_eventKind)
	{
	case io.SshEvent.TcpConnectCompleted:
		m_pluginHost.writeLog (SshChannelLogRecordCode.TcpConnectCompleted);
		break;

	case io.SshEvent.SshHandshakeCompleted:
		m_pluginHost.writeLog (SshChannelLogRecordCode.SshHandshakeCompleted);
		break;

	case io.SshEvent.SshAuthCompleted:
		m_pluginHost.writeLog (SshChannelLogRecordCode.SshAuthCompleted);
		break;

	case io.SshEvent.SshChannelOpened:
		m_pluginHost.writeLog (SshChannelLogRecordCode.SshChannelOpened);
		break;

	case io.SshEvent.SshPtyRequested:
		m_pluginHost.writeLog (SshChannelLogRecordCode.SshPtyRequested);
		break;

	case io.SshEvent.SshProcessStarted:
		m_pluginHost.writeLog (SshChannelLogRecordCode.SshProcessStarted);
		break;

	case io.SshEvent.ConnectCompleted:
		m_pluginHost.writeLog (SshChannelLogRecordCode.ConnectCompleted);
		m_state = State.Connected;
		break;

	case io.SshEvent.ConnectError:
		handleConnectError (params.m_error);
		break;

	case io.SshEvent.Disconnected:
		m_pluginHost.writeLog (
			SshChannelLogRecordCode.Disconnected,
			&m_remoteAddress,
			sizeof (m_remoteAddress)
			);
		
		m_channel.close ();
		m_state = State.Closed;
		break;

	case io.SshEvent.IncomingData:
		heap char buffer [512];
		size_t result = try m_channel.read (buffer, sizeof (buffer));
		if (result != -1)
			m_pluginHost.writeLog (log.StdRecordCode.Rx, buffer, result);
		break;
	}
}

SshChannelSession.onResolverEvent (io.SocketAddressResolverEventParams const* params)
{
	if (params.m_syncId != m_channel.m_syncId)
		return;
		
	switch (params.m_eventKind)
	{
	case io.SocketAddressResolverEvent.ResolveCompleted:
		m_pluginHost.writeLog (
			SshChannelLogRecordCode.ResolveCompleted,
			params.m_address,
			sizeof (io.SocketAddress)
			);

		m_channel.connect (
			params.m_address,
			m_userNameProp.m_value, 
			m_passwordProp.m_value,
			m_channelTypeProp.m_value,
			m_processTypeProp.m_value,
			m_ptyTypeProp.m_value			
			);

		m_remoteAddress = *params.m_address;
		m_state = State.Connecting;
		break;

	case io.SocketAddressResolverEvent.ResolveError:
		handleConnectError (params.m_error);
		break;
	}

catch:
	handleConnectError (jnc.getLastError ());
}

reactor SshChannelSession.m_uiReactor ()
{
	m_title = $"SSH $(m_addressCombo.m_currentText)";
	m_isTransmitEnabled = m_state == State.Connected;
	m_adapterProp.m_isEnabled = m_useLocalAddressProp.m_value;
	m_localPortProp.m_isEnabled = m_useLocalAddressProp.m_value;
	m_actionTable [ActionId.Disconnect].m_isEnabled = m_state != State.Closed;
}

//.............................................................................

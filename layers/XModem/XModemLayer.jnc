//.............................................................................

class XModemLayer: 
	doc.Layer,
	log.Listener
{
protected:
	enum State
	{
		Idle,
		TransmitFileDlg,
		Transmitting,
		ReceiveFileDlg,
		Receiving,
	}

	enum ActionId
	{
		Transmit,
		Receive,
		Cancel,
		_Count,
	}

	State bindable m_state;
	
	gui.Action* m_actionTable [ActionId._Count];
	
	io.MappedFile* m_file;
	XModemTransmitter m_transmitter;
	XModemReceiver m_receiver;
	
public:
	construct (doc.PluginHost* pluginHost);

	transmitFile ();
	receiveFile ();
	cancelFileTranfer  ();		

	override notify (
		uint64_t timestamp,
		uint_t recordCode,
		void const* p,
		size_t size
		);
	
protected:
	createUi ();	
	reactor m_uiReactor ();
	
	onFileDlgCompleted ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

XModemLayer.construct (doc.PluginHost* pluginHost)
{
	basetype1.construct (pluginHost);	
	m_transmitter.construct (this);
	m_receiver.construct (this);
	
	pluginHost.m_fileDlg.m_onCompleted += onFileDlgCompleted;
	pluginHost.m_log.attachListener (this);

	m_state = State.Idle;
	m_file = io.createMappedFile ();

	createUi ();
}

XModemLayer.createUi ()
{
	m_pluginHost.m_toolBar.addSeparator ();

	m_actionTable [ActionId.Transmit]  = m_pluginHost.createAction ("Transmit File", "images/transmit.png");
	m_actionTable [ActionId.Transmit].m_onTriggered += transmitFile;

	m_actionTable [ActionId.Receive] = m_pluginHost.createAction ("Receive File", "images/receive.png");
	m_actionTable [ActionId.Receive].m_onTriggered += receiveFile;

	m_actionTable [ActionId.Cancel] = m_pluginHost.createAction ("Cancel File Transfer", "images/cancel.png");
	m_actionTable [ActionId.Cancel].m_onTriggered += cancelFileTranfer;

	m_uiReactor.start ();
}

reactor XModemLayer.m_uiReactor ()
{
	m_actionTable [ActionId.Transmit].m_isEnabled = m_state == State.Idle;
	m_actionTable [ActionId.Receive].m_isEnabled = m_state == State.Idle;
	m_actionTable [ActionId.Cancel].m_isEnabled = m_state != State.Idle;
}

XModemLayer.transmitFile ()
{
	cancelFileTranfer ();

	m_pluginHost.m_fileDlg.m_kind = gui.FileDlgKind.Open;
	m_pluginHost.m_fileDlg.m_title = "Transmit File with XModem...";
	m_pluginHost.m_fileDlg.m_filter = "All files (*.*)";
	m_pluginHost.m_fileDlg.show ();
	
	m_state = State.TransmitFileDlg;
}

XModemLayer.receiveFile ()
{
	cancelFileTranfer ();
	
	m_pluginHost.m_fileDlg.m_kind = gui.FileDlgKind.Save;
	m_pluginHost.m_fileDlg.m_title = "Receive File with XModem...";
	m_pluginHost.m_fileDlg.m_filter = "All files (*.*)";
	m_pluginHost.m_fileDlg.show ();

	m_state = State.ReceiveFileDlg;
}

XModemLayer.cancelFileTranfer ()
{
	switch (m_state)
	{
	case State.Idle:
		return;
	
	case State.Transmitting:
		m_transmitter.cancel ();
		break;

	case State.Receiving:
		m_transmitter.cancel ();
		break;
	}
	
//	SetStatus("XModem transfer cancelled by user");
//	Complete(false);
	
	m_state = State.Idle;
	m_file.close ();
}

XModemLayer.onFileDlgCompleted ()
{
	if (m_pluginHost.m_fileDlg.m_result != gui.StdDlgButton.Ok)
	{
		m_state = State.Idle;
		return;
	}

	m_pluginHost.m_progressDlg.m_title = m_pluginHost.m_fileDlg.m_filePath;
	m_pluginHost.m_progressDlg.m_status = "Initializing...";
	m_pluginHost.m_progressDlg.m_progress = 0;
	m_pluginHost.m_progressDlg.m_buttons = gui.StdDlgButtons.Abort;
	m_pluginHost.m_progressDlg.show ();

	switch (m_state)
	{
	case State.TransmitFileDlg:
		m_state = State.Transmitting;
		m_file.open (
			m_pluginHost.m_fileDlg.m_filePath, 
			io.FileOpenFlags.OpenExisting | io.FileOpenFlags.ReadOnly
			);
		m_transmitter.start ();
		break;

	case State.ReceiveFileDlg:
		m_state = State.Receiving;
		m_file.open (m_pluginHost.m_fileDlg.m_filePath);
		m_receiver.start ();
		break;
	}
	
catch:
	m_pluginHost.m_progressDlg.m_status = jnc.getLastError ().m_description;
	m_pluginHost.m_progressDlg.m_buttons = gui.StdDlgButtons.Close;	
}

XModemLayer.notify (
	uint64_t timestamp,
	uint_t recordCode,
	void const* p,
	size_t size
	)
{
	if (recordCode == log.StdRecordCode.Rx)
		switch (m_state)
		{
		case State.Transmitting:
			m_transmitter.onRx (p, size);
			break;

		case State.Receiving:
			m_receiver.onRx (p, size);
			break;
		}
}

//.............................................................................

//.............................................................................
//
// SSH Connection log packet declarations and representer
//

//.............................................................................

enum SshChannelLogRecordCode
{
	TcpConnecting         = 1  | log.RecordCodeFlags.Mergeable,
	TcpConnectCompleted   = 2  | log.RecordCodeFlags.Mergeable,
	SshHandshakeCompleted = 3  | log.RecordCodeFlags.Mergeable,
	SshAuthCompleted      = 4  | log.RecordCodeFlags.Mergeable,
	SshChannelOpened      = 5  | log.RecordCodeFlags.Mergeable,
	SshPtyRequested       = 6  | log.RecordCodeFlags.Mergeable,
	SshShellStarted       = 7  | log.RecordCodeFlags.Mergeable,
	ConnectCancelled      = 8  | log.RecordCodeFlags.Mergeable,
	ConnectCompleted      = 9  | log.RecordCodeFlags.Mergeable,
	ConnectError          = 10 | log.RecordCodeFlags.Mergeable,
	Disconnected          = 11,
}

enum SshChannelLogPartCode
{
	Connecting       = 1 | log.RecordCodeFlags.MergeableForward,
	ConnectCompleted = 1 | log.RecordCodeFlags.MergeableBackward,
}

//.............................................................................

class SshChannelLogRepresenter: log.Representer
{
	override bool represent (
		log.RepresenterTarget* target,
		uint_t recordCode,
		void const* p,
		size_t size,
		uint64_t foldFlags
		);

}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bool SshChannelLogRepresenter.represent (
	log.RepresenterTarget* target,
	uint_t recordCode,
	void const* p,
	size_t size,
	uint64_t foldFlags
	)
{
	switch (recordCode)
	{
	case SshChannelLogRecordCode.TcpConnecting:
		char const* addressString = try io.formatSocketAddress ((io.SocketAddress const*) p);
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText (SshChannelLogPartCode.Connecting, $"Establishing TCP connection to <15>$addressString<>...");
		break;

	case SshChannelLogRecordCode.TcpConnectCompleted:
		target.addHyperText (SshChannelLogPartCode.ConnectCompleted, "ok");

		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText (SshChannelLogPartCode.Connecting, "Performing SSH handshake...");
		break;

	case SshChannelLogRecordCode.SshHandshakeCompleted:
		target.addHyperText (SshChannelLogPartCode.ConnectCompleted, "ok");
		
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText (SshChannelLogPartCode.Connecting, "Performing SSH authentification...");
		break;

	case SshChannelLogRecordCode.SshAuthCompleted:
		target.addHyperText (SshChannelLogPartCode.ConnectCompleted, "ok");

		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText (SshChannelLogPartCode.Connecting, "Opening SSH channel...");
		break;

	case SshChannelLogRecordCode.SshChannelOpened:
		target.addHyperText (SshChannelLogPartCode.ConnectCompleted, "ok");
		
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText (SshChannelLogPartCode.Connecting, "Requesting PTY...");
		break;

	case SshChannelLogRecordCode.SshPtyRequested:
		target.addHyperText (SshChannelLogPartCode.ConnectCompleted, "ok");
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText (SshChannelLogPartCode.Connecting, "Starting shell...");
		break;

	case SshChannelLogRecordCode.SshShellStarted:
		target.addHyperText (SshChannelLogPartCode.ConnectCompleted, "ok");
		break;

	case SshChannelLogRecordCode.ConnectCompleted:
		target.m_lineAttr.m_iconIdx  = log.StdLogIcon.Play;
		target.m_lineAttr.m_backColor = log.StdLogColor.Start;
		target.addHyperText ("SSH channel established");
		break;

	case SshChannelLogRecordCode.ConnectCancelled:
		target.addHyperText (SshChannelLogPartCode.ConnectCompleted, "cancelled");
		break;

	case SshChannelLogRecordCode.ConnectError:
		target.m_lineAttr.m_flags = log.LineAttrFlags.Override;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		target.m_lineAttr.m_backColor = log.StdLogColor.Error;

		jnc.Error const* Error = (jnc.Error const*) p;
		target.addHyperText (SshChannelLogPartCode.ConnectCompleted, $"error ($(Error.m_description))");
		break;

	case SshChannelLogRecordCode.Disconnected:
		char const* addressString = try io.formatSocketAddress ((io.SocketAddress const*) p);
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Pause;
		target.m_lineAttr.m_backColor = log.StdLogColor.Stop;
		target.addHyperText ($"Disconnected from <15>$addressString<>");
		break;

	default:
		return false;
	}

	return true;
}

//.............................................................................

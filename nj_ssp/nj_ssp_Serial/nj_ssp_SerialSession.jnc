//.............................................................................
//
// Serial session
//

//.............................................................................

class SerialSession: doc.Session
{
protected:
	enum State
	{
		Closed,
		Opened,
	}

	enum ActionId
	{
		Open,
		Close,
		Dtr,
		Rts,
		_Count,
	}

protected:
	// serial port

	State bindable m_state;
	io.Serial* m_serial;
	char const* m_portName;

	// toolbar & menu

	gui.Action* m_actionTable [ActionId._Count];
	gui.ComboBox* m_portNameCombo;
	gui.ComboBox* m_baudRateCombo;
	gui.ComboBox* m_flowControlCombo;

	// property grid

	gui.StringProperty* m_portNameProp;
	gui.EnumProperty* m_baudRateProp;
	gui.EnumProperty* m_flowControlProp;
	gui.EnumProperty* m_dataBitsProp;
	gui.EnumProperty* m_stopBitsProp;
	gui.EnumProperty* m_parityProp;

public:
	construct (doc.DocumentHost* documentHost);

	bool open () throws;
	close ();

	override void load (doc.Storage* storage);
	override void save (doc.Storage* storage);
	override void updateProperties ();
	override bool applyProperties () throws;
	override void restoreDefaultProperties ();

	override size_t transmit (
		void const* p,
		size_t size
		) throws;

protected:
	onSerialEvent (io.SerialEventParams const* params);
	onBaudRateChanged ();
	onFlowControlChanged ();
	onDtrChanged ();
	onRtsChanged ();

	createUi ();
	reactor m_uiReactor ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

SerialSession.construct (doc.DocumentHost* documentHost)
{
	basetype.construct (documentHost);
	documentHost.m_log.m_representer = static new SerialLogRepresenter;

	m_state = State.Closed;
	m_serial = io.createSerial ();
	m_serial.m_onSerialEvent += onSerialEvent @ m_documentHost.m_mainThreadScheduler;

	createUi ();
}

SerialSession.createUi ()
{
	// toolbar

	m_documentHost.m_toolBar.addLabel ("Port: ");
	m_portNameCombo = m_documentHost.m_toolBar.addComboBox ();
	m_portNameCombo.m_isEditable = true;
	m_portNameCombo.m_onEnter += open;
	
	m_portNameCombo.addItem ("COM1");
	m_portNameCombo.addItem ("COM2");
	m_portNameCombo.addItem ("COM3");
	m_portNameCombo.addItem ("COM4");
	m_portNameCombo.addItem ("/dev/ttyS0");
	m_portNameCombo.addItem ("/dev/ttyS1");
	m_portNameCombo.addItem ("/dev/ttyS2");
	m_portNameCombo.addItem ("/dev/ttyS3");

	m_documentHost.m_toolBar.addLabel (" Baud rate: ");
	m_baudRateCombo = m_documentHost.m_toolBar.addComboBox ();
	m_baudRateCombo.addItem ("9600 bps");
	m_baudRateCombo.addItem ("19200 bps");
	m_baudRateCombo.addItem ("38400 bps");
	m_baudRateCombo.addItem ("115200 bps");
	m_baudRateCombo.m_onChanged += onBaudRateChanged;

	m_documentHost.m_toolBar.addLabel (" Flow control: ");
	m_flowControlCombo = m_documentHost.m_toolBar.addComboBox ();
	m_flowControlCombo.addItem ("None");
	m_flowControlCombo.addItem ("RTS/CTS");
	m_flowControlCombo.addItem ("XON/XOFF");
	m_flowControlCombo.m_onChanged += onFlowControlChanged;

	m_actionTable [ActionId.Open]  = m_documentHost.createAction ("Open", "connect.png");
	m_actionTable [ActionId.Open].m_onTriggered += open;

	m_actionTable [ActionId.Close] = m_documentHost.createAction ("Close", "pause.png");
	m_actionTable [ActionId.Close].m_onTriggered += close;

	m_documentHost.m_menu.addSeparator ();
	m_documentHost.m_toolBar.addSeparator ();

	m_actionTable [ActionId.Dtr] = m_documentHost.createCheckableAction ("DTR", true);
	m_actionTable [ActionId.Dtr].m_onTriggered += onDtrChanged;
	
	m_actionTable [ActionId.Rts] = m_documentHost.createCheckableAction ("RTS", false);
	m_actionTable [ActionId.Rts].m_onTriggered += onRtsChanged;

	// property grid

	m_portNameProp = m_documentHost.createStringProperty (
		"Port name",
		"Specify serial port name to use"
		);

	// baud

	static gui.EnumPropertyOption baudRateTable [] =
	{
		{ "9600 bps",   9600 },
		{ "19200 bps",  19200 },
		{ "38400 bps",  38400 },
		{ "115200 bps", 115200 },
	};

	m_baudRateProp = m_documentHost.createEnumProperty (
		"Baud rate",
		"Serial baud rate",
		baudRateTable,
		countof (baudRateTable)
		);

	m_baudRateProp.m_value = 38400;

	// flow control

	static gui.EnumPropertyOption flowControlTable [] =
	{
		{ "None",                io.SerialFlowControl.None },
		{ "Hardware (RTS/CTS)",  io.SerialFlowControl.RtsCts },
		{ "Software (XON/XOFF)", io.SerialFlowControl.XOnXOff },
	};

	m_flowControlProp = m_documentHost.createEnumProperty (
		"Flow control",
		"Serial flow control",
		flowControlTable,
		countof (flowControlTable)
		);

	m_flowControlProp.m_value = io.SerialFlowControl.None;

	// data bits

	static gui.EnumPropertyOption dataBitsTable [] =
	{
		{ "7 bits", 7 },
		{ "8 bits", 8 },
	};

	m_dataBitsProp = m_documentHost.createEnumProperty (
		"Data bits",
		"Serial data bit count (word size)",
		dataBitsTable,
		countof (dataBitsTable)
		);

	m_dataBitsProp.m_value = 8;

	// stop bits

	static gui.EnumPropertyOption stopBitsTable [] =
	{
		{ "1 bit",    io.SerialStopBits._1 },
		{ "1.5 bits", io.SerialStopBits._15 },
		{ "2 bits",   io.SerialStopBits._2 },
	};

	m_stopBitsProp = m_documentHost.createEnumProperty (
		"Stop bits",
		"Serial stop bit count",
		stopBitsTable,
		countof (stopBitsTable)
		);

	m_stopBitsProp.m_value = io.SerialStopBits._1;

	// parity

	static gui.EnumPropertyOption parityTable [] =
	{
		{ "None",  io.SerialParity.None },
		{ "Odd",   io.SerialParity.Odd },
		{ "Even",  io.SerialParity.Even },
		{ "Mark",  io.SerialParity.Mark },
		{ "Space", io.SerialParity.Space },
	};

	m_parityProp = m_documentHost.createEnumProperty (
		"Parity",
		"Serial parity check",
		parityTable,
		countof (parityTable)
		);

	m_parityProp.m_value = io.SerialParity.None;
	
	m_uiReactor.start ();
}

bool SerialSession.open () throws
{
	close ();

	char const* name = m_portNameCombo.m_currentText;

	// open and configure

	m_serial.open (name);
	m_serial.m_baudRate = m_baudRateProp.m_value;
	m_serial.m_flowControl = (io.SerialFlowControl) m_flowControlProp.m_value;
	m_serial.m_dataBits = m_dataBitsProp.m_value;
	m_serial.m_stopBits = (io.SerialStopBits) m_stopBitsProp.m_value;
	m_serial.m_parity = (io.SerialParity) m_parityProp.m_value;

	SerialOpenParams params;
	params.m_baudRate = m_serial.m_baudRate;
	params.m_flowControl = m_serial.m_flowControl;
	params.m_dataBits = m_serial.m_dataBits;
	params.m_stopBits = m_serial.m_stopBits;
	params.m_parity = m_serial.m_parity;

	char const* p = $"$(params,B)$name";
	size_t size = jnc.getDataPtrSpan (p);
	m_documentHost.m_log.write (SerialLogRecordCode.PortOpened, p, size);

	m_portName = name;
	m_state = State.Opened;

	return true;

catch:
	m_serial.close ();

	jnc.Error const* error = jnc.getLastError ();
	m_documentHost.m_log.write (
		SerialLogRecordCode.PortOpenError,
		error,
		error.m_size
		);
	return false;
}

SerialSession.close ()
{
	if (m_state != State.Opened)
		return;

	m_documentHost.m_log.write (
		SerialLogRecordCode.PortClosed,
		m_portName,
		strlen (m_portName) + 1
		);

	m_serial.close ();
	m_state = State.Closed;
}

void SerialSession.load (doc.Storage* storage)
{
	m_portNameCombo.m_editText = storage.readString ("portName");
	m_baudRateCombo.m_currentIndex = storage.readInt ("baudRate");
	m_flowControlCombo.m_currentIndex = storage.readInt ("flowControl");
	m_dataBitsProp.m_value = storage.readInt ("dataBits");
	m_stopBitsProp.m_value = storage.readInt ("stopBits");
	m_parityProp.m_value = storage.readInt ("parity");
}

void SerialSession.save (doc.Storage* storage)
{
	storage.writeString ("portName", m_portNameCombo.m_editText);
	storage.writeInt ("baudRate", m_baudRateCombo.m_currentIndex);
	storage.writeInt ("flowControl", m_flowControlCombo.m_currentIndex);
	storage.writeInt ("dataBits", m_dataBitsProp.m_value);
	storage.writeInt ("stopBits", m_stopBitsProp.m_value);
	storage.writeInt ("parity", m_parityProp.m_value);
}

void SerialSession.updateProperties ()
{
	m_portNameProp.m_value = m_portNameCombo.m_currentText;
	m_baudRateProp.m_currentIndex = m_baudRateCombo.m_currentIndex;
	m_flowControlProp.m_currentIndex = m_flowControlCombo.m_currentIndex;
}

bool SerialSession.applyProperties () throws
{
	m_portNameCombo.m_editText = m_portNameProp.m_value;
	m_baudRateCombo.m_currentIndex = m_baudRateProp.m_currentIndex;
	m_flowControlCombo.m_currentIndex = m_flowControlProp.m_currentIndex;
	
	if (m_state == State.Opened)
	{
		uint_t dataBitsValue = m_dataBitsProp.m_value;
		if (m_serial.m_dataBits != dataBitsValue)
		{
			m_serial.m_dataBits = dataBitsValue;
			m_documentHost.m_log.write (SerialLogRecordCode.DataBitsChanged, &dataBitsValue, sizeof (dataBitsValue));
		}
		
		io.SerialStopBits stopBitsValue = (io.SerialStopBits) m_stopBitsProp.m_value;
		if (m_serial.m_stopBits != stopBitsValue)
		{
			m_serial.m_stopBits = stopBitsValue;
			m_documentHost.m_log.write (SerialLogRecordCode.StopBitsChanged, &stopBitsValue, sizeof (stopBitsValue));
		}

		io.SerialParity parityValue = (io.SerialParity) m_parityProp.m_value;
		if (m_serial.m_parity != parityValue)
		{
			m_serial.m_parity = parityValue;
			m_documentHost.m_log.write (SerialLogRecordCode.ParityChanged, &parityValue, sizeof (parityValue));
		}
		
		// baud rate and flow control setting changes are handled by their onChanged event handlers
	}
	
	return true;
}

void SerialSession.restoreDefaultProperties ()
{
	m_portNameProp.m_value = "COM1";
	m_baudRateProp.m_value = 38400;
	m_flowControlProp.m_value = io.SerialFlowControl.None;
	m_dataBitsProp.m_value = 8;
	m_stopBitsProp.m_value = io.SerialStopBits._1;
	m_parityProp.m_value = io.SerialParity.None;
}

size_t SerialSession.transmit (
	void const* p,
	size_t size
	) throws
{
	if (m_state != State.Opened)
		return -1;

	size_t result = try m_serial.write (p, size);
	if (result != -1)
		m_documentHost.m_log.write (log.StdRecordCode.Tx, p, result);

	return result;
}

SerialSession.onSerialEvent (io.SerialEventParams const* params)
{
	if (params.m_syncId != m_serial.m_syncId)
		return;
		
	switch (params.m_eventKind)
	{
	case io.SerialEvent.IncomingData:
		heap char buffer [512];
		size_t result = try m_serial.read (buffer, sizeof (buffer));
		if (result != -1)
			m_documentHost.m_log.write (log.StdRecordCode.Rx, buffer, result);
		break;
		
	case io.SerialEvent.StatusLineChanged:
		io.SerialStatusLineEventParams const* lineParams = (io.SerialStatusLineEventParams const*) params;

		char const* p = $"$(lineParams.m_lines, B)$(lineParams.m_mask, B)";
		size_t size = jnc.getDataPtrSpan (p);
		m_documentHost.m_log.write (SerialLogRecordCode.StatusLineChanged, p, size);
		break;
	}
}

SerialSession.onBaudRateChanged ()
{
	if (m_state == State.Opened)
	{
		m_baudRateProp.m_currentIndex = m_baudRateCombo.m_currentIndex;
		uint_t value = m_baudRateProp.m_value;
		
		m_serial.m_baudRate = value;
		m_documentHost.m_log.write (SerialLogRecordCode.BaudRateChanged, &value, sizeof (value));
	}
}

SerialSession.onFlowControlChanged ()
{
	if (m_state == State.Opened)
	{
		m_flowControlProp.m_currentIndex = m_flowControlCombo.m_currentIndex;
		io.SerialFlowControl value = (io.SerialFlowControl) m_flowControlProp.m_value;
		
		m_serial.m_flowControl = value;
		m_documentHost.m_log.write (SerialLogRecordCode.FlowControlChanged, &value, sizeof (value));
	}
}

SerialSession.onDtrChanged ()
{
	if (m_state == State.Opened)
	{
		bool value = m_actionTable [ActionId.Dtr].m_isChecked;
		m_serial.m_dtr = value;
		m_documentHost.m_log.write (SerialLogRecordCode.DtrChanged, &value, sizeof (value));
	}
}

SerialSession.onRtsChanged ()
{
	if (m_state == State.Opened)
	{
		bool value = m_actionTable [ActionId.Rts].m_isChecked;
		m_serial.m_rts = value;
		m_documentHost.m_log.write (SerialLogRecordCode.RtsChanged, &value, sizeof (value));
	}
}

reactor SerialSession.m_uiReactor ()
{	
	m_portNameProp.m_isEnabled = m_state == State.Closed;
	m_portNameCombo.m_isEnabled = m_state == State.Closed;
	m_actionTable [ActionId.Close].m_isEnabled = m_state == State.Opened;
	m_documentHost.m_title = $"$(m_portNameCombo.m_currentText) $(m_baudRateCombo.m_currentText)";
	m_documentHost.m_isTransmitEnabled = m_state == State.Opened;
}

//.............................................................................

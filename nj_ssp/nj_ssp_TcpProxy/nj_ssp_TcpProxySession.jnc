//.............................................................................
//
// TCP Proxy session
//

//.............................................................................

class TcpProxySession: doc.Session
{
protected:	
	enum State
	{
		Closed,
		Opened,
		Resolving,
	}

	enum TargetState
	{
		Closed,
		Connecting,
		Connected,
	}

	enum ActionId
	{
		Listen,
		StopListen,
		Disconnect,
		_Count,
	}
	
protected:
	// listener socket
	
	State bindable m_listenerState;
	io.Socket* m_listenerSocket;
	io.SocketAddress m_localAddress;
	
	// connection socket
	
	State bindable m_listenerConnectionState;
	uint_t m_listenerConnectionSyncId;
	io.Socket* m_listenerConnectionSocket;
	io.SocketAddress m_listenerRemoteAddress;
	
	// target connection socket
	
	TargetState bindable m_targetState;
	io.Socket* m_targetSocket;
	io.SocketAddress m_targetAddress;
	io.SocketAddressResolver* m_resolver;
	uint_t m_resolverSyncId;
	bool m_isTargetAddressResolved;
	bool m_wasTargetAddressChangedWhileResolving;
		
	// toolbar & menu
	
	gui.Action* m_actionTable [ActionId._Count];
	gui.ComboBox* m_listenerPortCombo;
	gui.ComboBox* m_targetAddressCombo;
	
	// property grid
	
	gui.StringProperty* m_targetAddressProp;
	gui.IntProperty* m_listenerPortProp;
	gui.EnumProperty* m_adapterProp;
	gui.BoolProperty* m_overrideConnectionProp;
	gui.BoolProperty* m_resetConnectionProp;
	
public:
	construct (doc.PluginHost* pluginHost);
	
	bool listen () throws;
	stopListen ();
	disconnect ();
	
	bool connectTarget ();
	disconnectTarget ();

	override void load (doc.Storage* storage);
	override void save (doc.Storage* storage);
	override void updateProperties ();
	override bool applyProperties () throws;
	override void restoreDefaultProperties ();

protected:
	handleListenerConnectError (jnc.Error const* error);
	handleTargetConnectError (jnc.Error const* error);
	
	onListenerPortChanged ();
	onTargetAddressChanged ();
	onListenerSocketEvent (io.SocketEventParams const* params);
	onListenerConnectionSocketEvent (io.SocketEventParams const* params);
	onTargetSocketEvent (io.SocketEventParams const* params);
	onResolverEvent (io.SocketAddressResolverEventParams const* params);
	
	createUi ();
	reactor m_uiReactor ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

TcpProxySession.construct (doc.PluginHost* pluginHost)
{
	basetype.construct (pluginHost);

	pluginHost.m_log.m_representer = static new TcpProxyLogRepresenter;
		
	// listener
	
	m_listenerState = State.Closed;
	m_listenerSocket = io.createSocket ();
	m_listenerSocket.m_onSocketEvent += onListenerSocketEvent @ m_pluginHost.m_mainThreadScheduler;
	
	// listener connection
	
	m_listenerConnectionState = State.Closed;
	
	// target connection
	
	m_targetState = TargetState.Closed;
	m_targetSocket = io.createSocket ();
	m_targetSocket.m_onSocketEvent += onTargetSocketEvent @ m_pluginHost.m_mainThreadScheduler;
	m_resolver = io.createSocketAddressResolver ();
	m_resolver.m_onResolverEvent += onResolverEvent @ m_pluginHost.m_mainThreadScheduler;
	m_resolverSyncId = 0;
	m_isTargetAddressResolved = false;
	m_wasTargetAddressChangedWhileResolving = false;
	
	createUi ();
}

TcpProxySession.createUi ()
{
	// toolbar
	
	m_pluginHost.m_toolBar.addLabel ("Listen on: ");
	m_listenerPortCombo = m_pluginHost.m_toolBar.addComboBox ();
	m_listenerPortCombo.m_isEditable = true;
	m_listenerPortCombo.m_editText = "1001";
	m_listenerPortCombo.m_onChanged += onListenerPortChanged;
	
	m_pluginHost.m_toolBar.addLabel (" Connect to: ");
	m_targetAddressCombo = m_pluginHost.m_toolBar.addComboBox (-1);
	m_targetAddressCombo.m_isEditable = true;
	m_targetAddressCombo.m_editText = "127.0.0.1:1002";
	m_targetAddressCombo.m_onChanged += onTargetAddressChanged;
	
	m_pluginHost.m_toolBar.addSeparator ();
	
	m_actionTable [ActionId.Listen] = m_pluginHost.createAction ("Listen", "listen.png");
	m_actionTable [ActionId.Listen].m_onTriggered += listen;

	m_actionTable [ActionId.StopListen] = m_pluginHost.createAction ("Stop listening", "pause.png");
	m_actionTable [ActionId.StopListen].m_onTriggered += stopListen;

	m_actionTable [ActionId.Disconnect] = m_pluginHost.createAction ("Disconnect", "disconnect.png");
	m_actionTable [ActionId.Disconnect].m_onTriggered += disconnect;
		
	// property grid
			
	m_listenerPortProp = m_pluginHost.createIntProperty (
		"Port",
		"Port to listen on"
		);

	m_targetAddressProp = m_pluginHost.createStringProperty (
		"Target Address",
		"Address to connect to"
		);

	m_adapterProp = m_pluginHost.createNetworkAdapterProperty (
		"Interface",
		"Interface to bind to and to listen on for target connection"
		);

	m_overrideConnectionProp = m_pluginHost.createBoolProperty (
		"Override Connections",
		"Accept incoming connection even if already connected"
		);

	m_resetConnectionProp = m_pluginHost.createBoolProperty (
		"Reset Connections",
		"Use TCP RST to terminate connections (instead of TCP graceful disconnect)"
		);

	m_uiReactor.start ();
}

bool TcpProxySession.listen () throws
{
	stopListen ();

	//m_addressCombo.addEditTextToHistory ();
	//m_listenerPortCombo.addEditTextToHistory ();

	char const* targetAddressString = m_targetAddressCombo.m_editText;

	io.SocketAddress targetAddress;
	bool isDirectAddress = try io.parseSocketAddress (targetAddressString, &targetAddress);
	if (isDirectAddress || m_isTargetAddressResolved)
	{
		if (isDirectAddress)
			m_targetAddress = targetAddress;
		
		io.SocketAddress address;
		address.m_family = io.AddressFamily.Ip4;
		address.m_ip4.m_address.m_i32 = m_adapterProp.m_value;
		address.m_ip4.m_port = (uint16_t) atoi (m_listenerPortCombo.m_editText);

		m_listenerSocket.open (io.Protocol.Tcp, &address);
		m_listenerSocket.listen ();

		m_pluginHost.m_log.write (
			TcpProxyLogRecordCode.Listening,
			&address,
			sizeof (address)
			);

		m_localAddress = address;
		m_listenerState = State.Opened;
	}
	else
	{
		m_pluginHost.m_log.write (
			TcpProxyLogRecordCode.TargetResolving,
			targetAddressString,
			strlen (targetAddressString)
			);

		m_resolver.m_syncId = ++m_resolverSyncId;
		m_resolver.resolve (targetAddressString);
		
		m_listenerState = State.Resolving;
		m_isTargetAddressResolved = false;
		m_wasTargetAddressChangedWhileResolving = false;
	}

	return true;

catch:
	handleListenerConnectError (jnc.getLastError ());
	return false;
}

TcpProxySession.stopListen ()
{
	m_listenerPortCombo.m_backgroundColor = gui.StdColor.White;
	m_targetAddressCombo.m_backgroundColor = gui.StdColor.White;
	
	switch (m_listenerState)
	{
		case State.Closed:
			return;
		
		case State.Resolving:
			m_pluginHost.m_log.write (TcpProxyLogRecordCode.ListenCanceled);
			m_resolverSyncId++;
			break;
			
		case State.Opened:
			m_pluginHost.m_log.write (
				TcpProxyLogRecordCode.ListenStopped,
				&m_localAddress,
				sizeof (m_localAddress)
				);
			break;
	}

	m_listenerSocket.close ();
	m_listenerState = State.Closed;
}

TcpProxySession.disconnect ()
{
	disconnectTarget ();

	if (m_listenerConnectionState != State.Opened)
		return;

	m_pluginHost.m_log.write (
		TcpProxyLogRecordCode.ClientDisconnected,
		&m_listenerRemoteAddress,
		sizeof (m_listenerRemoteAddress)
		);
		
	m_listenerConnectionSocket.close ();
	m_listenerConnectionSocket = null;
	m_listenerConnectionState = State.Closed;
	m_listenerConnectionSyncId++;
}

bool TcpProxySession.connectTarget ()
{
	disconnectTarget ();
	
	m_pluginHost.m_log.write (
		TcpProxyLogRecordCode.TargetConnecting,
		&m_targetAddress,
		sizeof (m_targetAddress)
		);

	m_targetSocket.open (io.Protocol.Tcp);
	m_targetSocket.connect (&m_targetAddress);

	m_targetState = TargetState.Connecting;
	
	return true;
	
catch:
	handleTargetConnectError (jnc.getLastError ());
	return false;
}

TcpProxySession.disconnectTarget ()
{
	if (m_targetState != TargetState.Connected)
		return;
	
	m_pluginHost.m_log.write (
		TcpProxyLogRecordCode.TargetDisconnected,
		&m_targetAddress,
		sizeof (m_targetAddress)
		);

	m_targetSocket.close ();
	m_targetState = TargetState.Closed;
}

override void TcpProxySession.load (doc.Storage* storage)
{
	m_listenerPortCombo.m_editText = storage.readString ("port");
	m_targetAddressCombo.m_editText = storage.readString ("targetAddress");
	m_adapterProp.m_value = storage.readInt ("adapterIp");
	m_overrideConnectionProp.m_value = storage.readBool ("overrideConnection");
	m_resetConnectionProp.m_value = storage.readBool ("resetConnection");
}

override void TcpProxySession.save (doc.Storage* storage)
{
	storage.writeString ("port", m_listenerPortCombo.m_editText);
	storage.writeString ("targetAddress", m_targetAddressCombo.m_editText);
	storage.writeInt ("adapterIp", m_adapterProp.m_value);
	storage.writeBool ("overrideConnection", m_overrideConnectionProp.m_value);
	storage.writeBool ("resetConnection", m_resetConnectionProp.m_value);
}

override void TcpProxySession.updateProperties ()
{
	m_listenerPortProp.m_value = atoi (m_listenerPortCombo.m_editText);
	m_targetAddressProp.m_value = m_targetAddressCombo.m_editText;
}

override bool TcpProxySession.applyProperties () throws
{
	m_listenerPortCombo.m_editText = $"$(m_listenerPortProp.m_value)";
	m_targetAddressCombo.m_editText = m_targetAddressProp.m_value;
	return true;
}

override void TcpProxySession.restoreDefaultProperties ()
{
	m_listenerPortProp.m_value = 1001;
	m_targetAddressProp.m_value = "127.0.0.1:1002";
	m_adapterProp.m_value = 0;
	m_overrideConnectionProp.m_value = true;
	m_resetConnectionProp.m_value = false;
}

TcpProxySession.onListenerPortChanged ()
{
	switch (m_listenerState)
	{
		case State.Opened:
		case State.Resolving:
			m_listenerPortCombo.m_backgroundColor = gui.StdColor.PastelOrange;
			break;
	}	
}

TcpProxySession.onTargetAddressChanged ()
{
	m_isTargetAddressResolved = false;

	if (m_listenerState == State.Resolving)
		m_wasTargetAddressChangedWhileResolving = true;
	
	if (m_listenerState != State.Closed)
		m_targetAddressCombo.m_backgroundColor = gui.StdColor.PastelOrange;
}

TcpProxySession.onListenerSocketEvent (io.SocketEventParams const* params)
{
	if (params.m_syncId != m_listenerSocket.m_syncId)
		return;

	switch (params.m_eventKind)
	{
	case io.SocketEvent.IncomingConnection:
		io.SocketAddress address;
		io.Socket* socket = try m_listenerSocket.accept (&address);
		if (!socket)
			break;

		if (m_listenerConnectionState == State.Opened && !m_overrideConnectionProp.m_value)
		{
			socket.close ();
			m_pluginHost.m_log.write (
				TcpProxyLogRecordCode.ClientRejected,
				&address,
				sizeof (address)
				);

			break;
		}

		disconnect ();

		m_pluginHost.m_log.write (
			TcpProxyLogRecordCode.ClientConnected,
			&address,
			sizeof (address)
			);

		socket.m_syncId = m_listenerConnectionSyncId;

		m_listenerRemoteAddress = address;
		m_listenerConnectionSocket = socket;
		m_listenerConnectionState = State.Opened;		
		
		bool result = try connectTarget ();
		if (!result)
		{
			disconnect ();
			break;
		}
		
		break;
	}
}

TcpProxySession.onListenerConnectionSocketEvent (io.SocketEventParams const* params)
{
	if (params.m_syncId != m_listenerConnectionSyncId)
		return;

	switch (params.m_eventKind)
	{
	case io.SocketEvent.Disconnected:
		m_pluginHost.m_log.write (
			TcpProxyLogRecordCode.ClientDisconnected,
			&m_listenerRemoteAddress,
			sizeof (m_listenerRemoteAddress)
			);
			
		m_listenerConnectionSocket = null;
		m_listenerConnectionState = State.Closed;
		m_listenerConnectionSyncId++;
		
		disconnectTarget ();
		break;

	case io.SocketEvent.IncomingData:
		heap char buffer [512];
		size_t result = try m_listenerConnectionSocket.recv (buffer, sizeof (buffer));
		if (result != -1)
		{
			m_pluginHost.m_log.write (log.StdRecordCode.Tx, buffer, result);
		
			if (m_targetState == TargetState.Connected)
				try m_targetSocket.send (buffer, result);
		}
		
		break;
	}
}

TcpProxySession.onTargetSocketEvent (io.SocketEventParams const* params)
{
	if (params.m_syncId != m_targetSocket.m_syncId)
		return;
	
	switch (params.m_eventKind)
	{
	case io.SocketEvent.ConnectCompleted:
		m_pluginHost.m_log.write (TcpProxyLogRecordCode.TargetConnectCompleted);
		m_targetState = TargetState.Connected;
		
		// only once the connection to the target was successfully established
		// do we care about the listener connection
		
		if (m_listenerConnectionSocket != null)
		{
			m_listenerConnectionSocket.m_onSocketEvent += onListenerConnectionSocketEvent @ m_pluginHost.m_mainThreadScheduler;
			m_listenerConnectionSocket.firePendingEvents ();
		}
		break;

	case io.SocketEvent.ConnectCancelled:
		m_pluginHost.m_log.write (TcpProxyLogRecordCode.TargetConnectCancelled);
		m_targetState = TargetState.Closed;
		
		disconnect ();
		break;

	case io.SocketEvent.ConnectError:
		m_pluginHost.m_log.write (
			TcpProxyLogRecordCode.TargetConnectError,
			params.m_error,
			params.m_error.m_size
			);
		m_targetState = TargetState.Closed;
		
		disconnect ();
		break;

	case io.SocketEvent.Disconnected:
		m_pluginHost.m_log.write (
			TcpProxyLogRecordCode.TargetDisconnected,
			&m_targetAddress,
			sizeof (m_listenerRemoteAddress)
			);
		m_targetState = TargetState.Closed;
		
		disconnect ();
		break;

	case io.SocketEvent.IncomingData:
		heap char buffer [512];
		size_t result = try m_targetSocket.recv (buffer, sizeof (buffer));
		if (result != -1)
		{
			m_pluginHost.m_log.write (log.StdRecordCode.Rx, buffer, result);
		
			if (m_listenerConnectionState == State.Opened)
				try m_listenerConnectionSocket.send (buffer, result);
		}
		break;
	} 
}

TcpProxySession.onResolverEvent (io.SocketAddressResolverEventParams const* params)
{
	if (params.m_syncId != m_resolverSyncId)
		return;
	
	switch (params.m_eventKind)
	{
	case io.SocketAddressResolverEvent.ResolveCompleted:
		m_pluginHost.m_log.write (
			TcpProxyLogRecordCode.TargetResolveCompleted,
			params.m_address,
			sizeof (io.SocketAddress)
			);
		
		m_targetAddress = *params.m_address;
		
		if (!m_wasTargetAddressChangedWhileResolving)
			m_isTargetAddressResolved = true;
				
		// start listening
		
		io.SocketAddress address;
		address.m_family = io.AddressFamily.Ip4;
		address.m_ip4.m_address.m_i32 = m_adapterProp.m_value;
		address.m_ip4.m_port = (uint16_t) atoi (m_listenerPortCombo.m_editText);

		m_listenerSocket.open (io.Protocol.Tcp, &address);
		m_listenerSocket.listen ();

		m_pluginHost.m_log.write (
			TcpProxyLogRecordCode.Listening,
			&address,
			sizeof (address)
			);

		m_localAddress = address;
		m_listenerState = State.Opened;
		break;

	case io.SocketAddressResolverEvent.ResolveError:
		m_pluginHost.m_log.write (
			TcpProxyLogRecordCode.TargetResolvingError,
			params.m_error,
			params.m_error.m_size
			);
		m_listenerState = State.Closed;
		break;
	}

catch:
	handleListenerConnectError (jnc.getLastError ());
}

TcpProxySession.handleListenerConnectError (jnc.Error const* error)
{
	m_pluginHost.m_log.write (
		TcpProxyLogRecordCode.ListenError,
		error,
		error.m_size
		);
		
	m_listenerSocket.close ();
	m_listenerState = State.Closed;
}

TcpProxySession.handleTargetConnectError (jnc.Error const* error)
{
	m_pluginHost.m_log.write (
		TcpProxyLogRecordCode.TargetConnectError,
		error,
		error.m_size
		);
		
	m_targetSocket.close ();
	m_targetState = TargetState.Closed;
}

reactor TcpProxySession.m_uiReactor ()
{
	m_title = $"TCP @ $(m_listenerPortCombo.m_editText) -> $(m_targetAddressCombo.m_editText)";
	m_actionTable [ActionId.StopListen].m_isEnabled = m_listenerState != State.Closed;
	m_actionTable [ActionId.Disconnect].m_isEnabled = 
		m_listenerConnectionState != State.Closed ||
		m_targetState != TargetState.Closed;
}

//.............................................................................

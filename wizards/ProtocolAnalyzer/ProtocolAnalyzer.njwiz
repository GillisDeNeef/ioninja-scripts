//..............................................................................
//
//  IO Ninja IDE Wizard -- Protocol Analyzer layer
//

[wizard]
name        = "Protocol Analyzer"
description = "Generates a plugin which analyzes a log and generates a secondary log with decoded records"

[variable]
id          = pluginName
name        = "Layer Name"
value       = "My Protocol Analyzer"

[variable]
id          = pluginDescription
name        = "Layer Description"
value       = "Wizard-generated layer (analyzes a log and generates a secondary log with decoded records)"

[variable]
id          = pluginId
name        = "Layer ID"
value       = my-proto-analyzer

[variable]
id          = pluginPrefix
name        = "Layer Prefix"
value       = MyProto

[variable]
id          = layerClass
name        = "Layer Class"
readOnly    = true
value       = $(pluginPrefix)Layer
rebuildOn   = pluginPrefix

[variable]
id          = logRecordCodeEnum
name        = "Log Record Enum"
readOnly    = true
value       = $(pluginPrefix)LogRecordCode
rebuildOn   = pluginPrefix

[variable]
id          = logRepresenterFunc
name        = "Log Representer Function"
readOnly    = true
value       = represent$(pluginPrefix)Log
rebuildOn   = pluginPrefix

[variable]
id          = layerFile
name        = "Layer File"
readOnly    = true
value       = $(layerClass).jnc
rebuildOn   = layerClass

[variable]
id          = logFile
name        = "Log File"
readOnly    = true
value       = $(pluginPrefix)Log.jnc
rebuildOn   = pluginPrefix

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

[file]
source = Layer.njplg.in
target = $(projectName).njplg
interpolate = true

[file]
source = Layer.jnc.in
target = $(layerFile)
interpolate = true

[file]
source = Log.jnc.in
target = $(logFile)
interpolate = true
script = true

[file]
source = images
target = images

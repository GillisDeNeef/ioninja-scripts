//.............................................................................
//
// $(pluginName) layer
//

import "doc_Plugin.jnc"

//.............................................................................

class $(layerClass): 
	doc.Layer,
	log.Converter
{
protected:
	jnc.Recognizer m_txScanner;
	jnc.Recognizer m_rxScanner;

	log.Writer* m_writer;
	uint64_t m_timestamp;
	
public:
	construct (doc.PluginHost* pluginHost);

	override bool convert (
		log.Writer* writer,
		uint64_t timestamp,
		uint_t recordCode,
		void const* p,
		size_t size
		);	

protected:
	jnc.AutomatonResult automaton scanStream (jnc.Recognizer* recognizer);
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

$(layerClass).construct (doc.PluginHost* pluginHost)
{
	basetype1.construct (pluginHost);
	m_txScanner.construct (scanStream);
	m_rxScanner.construct (scanStream);

	pluginHost.m_log.attachConverter (this);
}

bool $(layerClass).convert (
	log.Writer* writer,
	uint64_t timestamp,
	uint_t recordCode,
	void const* p,
	size_t size
	)
{
	// prepare context for scanner automaton

	m_writer = writer;
	m_timestamp = timestamp;

	jnc.Recognizer* recognizer;

	switch (recordCode)
	{
	case log.StdRecordCode.Tx:
		recognizer = &m_txScanner;
		try m_rxScanner.eof ();
		break;

	case log.StdRecordCode.Rx:
		recognizer = &m_rxScanner;
		try m_txScanner.eof ();
		break;

	default:
		try m_txScanner.eof ();
		try m_rxScanner.eof ();
		writer.write (timestamp, recordCode, p, size);
		return true;
	}
	
	writer.write (timestamp, recordCode, p, size);
	recognizer.m_currentOffset = -size;
	try recognizer.write (p, size);
	return true;
}

jnc.AutomatonResult automaton $(layerClass).scanStream (jnc.Recognizer* recognizer)
{
	%%	"auto" | "break" | "case" | "char" | "const" | "continue" | \
		"default" | "do" | "double" | "else" | "enum" | "extern" | "float" | \
		"for" | "goto" | "if" | "int" | "long" | "register" | "return" | \
		"short" | "signed" | "sizeof" | "static" | "struct" | "switch" | \
		"typedef" | "union" | "unsigned" | "void" | "volatile" | "while"
		
		log.RetroColorizeParams params;
		params.m_retroOffset = recognizer.m_lexemeOffset;
		params.m_length = recognizer.m_lexemeLength;
		params.m_attr.m_textColor = gui.StdColor.Red;
		params.m_attr.m_backColor = gui.ColorFlags.Transparent;
	
		m_writer.write (
			m_timestamp,
			log.StdRecordCode.RetroColorize,
			&params,
			sizeof (params)
			);

	%% [_a-zA-Z] [_a-zA-Z0-9]*		
		// identifiers (to be distinguished from keywords)

	%% .
		// ignore the rest		
}

//.............................................................................

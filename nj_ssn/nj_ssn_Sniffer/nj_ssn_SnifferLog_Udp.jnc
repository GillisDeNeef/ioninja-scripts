//.............................................................................
//
// Sniffer log UDP packets handling 
//

//.............................................................................

representUdpHdr (
	log.RepresenterTarget* target,
	const void* p, 
	size_t size,
	size_t baseOffset
	)
{
	io.UdpHdr* udpHdr = (io.UdpHdr*) (p + baseOffset);

	target.addHyperText (jnc.format (
		"<+b>UDP<>\n" 
		"   <#808080+i>SRC:<>      <=!%d,%d>%d<>\n"
		"   <#808080+i>DST:<>      <=!%d,%d>%d<>\n"
		"   <#808080+i>LENGTH:<>   <=!%d,%d>%d<>\n"
		"   <#808080+i>CHECKSUM:<> <=!%d,%d>%04Xh<>", 

		baseOffset + offsetof (udpHdr.m_srcPort), 
		sizeof (udpHdr.m_srcPort), 
		udpHdr.m_srcPort,

		baseOffset + offsetof (udpHdr.m_dstPort), 
		sizeof (udpHdr.m_dstPort), 
		udpHdr.m_dstPort,

		baseOffset + offsetof (udpHdr.m_length), 
		sizeof (udpHdr.m_length), 
		udpHdr.m_length,

		baseOffset + offsetof (udpHdr.m_checksum), 
		sizeof (udpHdr.m_checksum), 
		udpHdr.m_checksum
		));
}

representUdp (
	log.RepresenterTarget* target,
	io.IpHdr* ipHdr,
	const void* p, 
	size_t size, 
	size_t baseOffset
	)
{
	if (baseOffset + sizeof(io.UdpHdr) > size)
	{
		target.addHyperText (jnc.format (
			"[<#0000ff=+1>+<>] <+b>UDP<> %s > %s [INVALID SIZE:%d]",
			formatIpString (ipHdr->m_srcAddress), 
			formatIpString (ipHdr->m_dstAddress),
			size
			));

		return;
	}

	io.UdpHdr* udpHdr = (io.UdpHdr*) (p + baseOffset);
	size_t dataSize = udpHdr.m_length - sizeof (io.UdpHdr);

	target.addHyperText (jnc.format (
		"[<#0000ff=+1>+<>] <+b>UDP<> %s:%d > %s:%d (%d bytes)",
		formatIpString (ipHdr->m_srcAddress), 
		udpHdr.m_srcPort,
		formatIpString (ipHdr->m_dstAddress), 
		udpHdr.m_dstPort,
		dataSize
		));

	representPacketData (target, p, size, baseOffset + sizeof (io.UdpHdr), dataSize);
}

//.............................................................................

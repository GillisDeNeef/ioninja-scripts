//.............................................................................
//
// Sniffer session
//

//.............................................................................

class SnifferSession: doc.StreamSession
{
protected:
	enum ActionId
	{
		Capture,
		StopCapture,
		_Count,
	};

protected:
	io.PCap* m_pcap;
	gui.Action* m_actionTable [ActionId._Count];
	gui.ComboBox* m_deviceCombo;
	gui.BoolProperty* m_promisciousProp;
	gui.StringProperty* m_captureFilterProp;
	gui.StringProperty* m_displayFilterProp;
	gui.IntProperty* m_snapshotSizeProp;

public:
	construct (doc.DocumentHost* documentHost);

	bool capture () throws;
	stopCapture ();

	override size_t transmit (
		void const* p,
		size_t size
		) throws;

protected:
	onReadyRead (io.PCap* sender);

	createUi ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

SnifferSession.construct (doc.DocumentHost* documentHost)
{
	basetype.construct (documentHost);

	printf ("SnifferSession.construct (this = %x, TID = %x)\n", this, jnc.getCurrentThreadId ());

	documentHost.m_log.m_representer = SnifferLogRepresenter.getSingleton ();
	createUi ();
}

SnifferSession.createUi ()
{
	// toolbar

	m_documentHost.m_toolBar.addLabel ("Device: ");
	m_deviceCombo = m_documentHost.m_toolBar.addComboBox (-1);

	io.PCapDevice const* device = io.createPCapDeviceList ();

	printf ("create device list...\n");

	for (; device; device = device->m_next)
	{
		char const* itemName = $"$(device.m_name) - $(device.m_description)";
		object <io.PCapDevice const*>* data = new object <io.PCapDevice const*>;
		data.m_value = device;
		m_deviceCombo.addItem (itemName, data);
	}

	m_actionTable [ActionId.Capture] = m_documentHost.createAction ("Capture", "capture.png");
	m_actionTable [ActionId.Capture].m_onTriggered += capture;

	m_actionTable [ActionId.StopCapture] = m_documentHost.createAction ("Stop", "pause.png");
	m_actionTable [ActionId.StopCapture].m_onTriggered += stopCapture;
	m_actionTable [ActionId.StopCapture].m_isEnabled = false;

	// property grid

	m_promisciousProp = m_documentHost.createBoolProperty (
		"Promiscious Mode",
		"Put the capturing interface into promiscious mode"
		);

	m_captureFilterProp = m_documentHost.createStringProperty (
		"Capture Filter",
		"Capture only the packets which have passed this primary filter"
		);

	m_displayFilterProp = m_documentHost.createStringProperty (
		"Display Filter",
		"Apply the secondary filter to captured packets"
		);

	m_snapshotSizeProp = m_documentHost.createIntProperty (
		"Snapshot Size",
		"Adjust the buffer size used by pcap"
		);
}

bool SnifferSession.capture () throws
{
	stopCapture ();

	object <io.PCapDevice const*>* data = (object <io.PCapDevice const*>*) m_deviceCombo.m_itemData [m_deviceCombo.m_currentIndex];
	io.PCapDevice const* device = data.m_value;

	m_pcap = io.createPCap ();
	m_pcap.m_onReadyRead += onReadyRead ~(m_pcap) @ m_documentHost.m_mainThreadScheduler;
	m_pcap.open (
		device.m_name, 
		m_captureFilterProp.m_value,
		m_promisciousProp.m_value
		);

	m_documentHost.m_log.write (SnifferLogPacketCode.CaptureStarted);
	m_actionTable [ActionId.StopCapture].m_isEnabled = true;
	return true;

catch:
	jnc.Error const* error = jnc.getLastError ();
	m_documentHost.m_log.write (
		SnifferLogPacketCode.CaptureError,
		error,
		error.m_size
		);
	m_pcap.close ();
	m_pcap = null;
	return false;
}

SnifferSession.stopCapture ()
{
	if (!m_pcap)
		return;

	m_documentHost.m_log.write (SnifferLogPacketCode.CaptureStopped);

	m_actionTable [ActionId.StopCapture].m_isEnabled = false;
	m_pcap.close ();
	m_pcap = null;
}

size_t SnifferSession.transmit (
	void const* p,
	size_t size
	) throws
{
	if (!m_pcap)
		return -1;

	size_t result = try m_pcap.write (p, size);
	if (result != -1)
		m_documentHost.m_log.write (SnifferLogPacketCode.InjectedPacket, p, result);

	return result;
}

SnifferSession.onReadyRead (io.PCap* sender)
{
	printf ("SnifferSession.onReadyRead (TID = %x)\n", jnc.getCurrentThreadId ());

	if (sender != m_pcap)
		return;

	heap char buffer [512];
	size_t result = try m_pcap.read (buffer, sizeof (buffer));
	if (result != -1)
		m_documentHost.m_log.write (SnifferLogPacketCode.Packet, buffer, result);
}

//.............................................................................

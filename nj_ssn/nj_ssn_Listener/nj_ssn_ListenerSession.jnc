//.............................................................................
//
// Listener session
//

//.............................................................................

class ListenerSession: doc.StreamSession
{
protected:
	io.ListenerSocket* m_listenerSocket;
	io.ConnectionSocket* m_connectionSocket;
	gui.ComboBox* m_ifaceCombo;
	gui.ComboBox* m_portCombo;
	gui.Action* m_stopListeningAction;
	gui.Action* m_disconnectAction;

	char const* m_localAddress;
	char const* m_remoteAddress;

public:
	construct (doc.DocumentHost* documentHost);

protected:
	onListen ();
	onStopListening ();
	onDisconnect ();
	onListenerSocketEvent (io.SocketEventParams const* params);
	onConnectionSocketEvent (io.SocketEventParams const* params);

	override size_t pitcher transmit (
		void const* p,
		size_t size
		);
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

ListenerSession.construct (doc.DocumentHost* documentHost)
{
	basetype.construct (documentHost);

	printf ("ListenerSession.construct (this = %x, TID = %x)\n", this, jnc.getCurrentThreadId ());

	// transport & log

	m_listenerSocket = io.createListenerSocket ();
	m_listenerSocket.m_onSocketEvent += onListenerSocketEvent @ documentHost.m_mainThreadScheduler;

	documentHost.m_log.m_representer = ListenerLogRepresenter.getSingleton ();

	// toolbar & menu

	gui.Icon* icon;
	gui.Action* action;
	gui.ComboBox* combo;

	documentHost.m_toolbar.addLabel ("Interface: ");
	combo = documentHost.m_toolbar.addComboBox (-1);
	combo.addItem ("0.0.0.0");
	m_ifaceCombo = combo;

	documentHost.m_toolbar.addLabel ("Port: ");
	combo = documentHost.m_toolbar.addComboBox ();
	combo.m_isEditable = true;
	combo.m_editText = "1024";
	m_portCombo = combo;

	icon = gui.loadIcon ("listen.png");
	action = gui.createAction ("Listen", icon);
	action.m_onTriggered += onListen;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);

	icon = gui.loadIcon ("pause.png");
	action = gui.createAction ("Stop listening", icon);
	action.m_onTriggered += onStopListening;
	action.m_isEnabled = false;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);

	m_stopListeningAction = action;

	icon = gui.loadIcon ("disconnect.png");
	action = gui.createAction ("Disconnect", icon);
	action.m_onTriggered += onDisconnect;
	action.m_isEnabled = false;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);

	m_disconnectAction = action;

	// no properties

	documentHost.m_propertyGrid.m_isVisible = false;
}

ListenerSession.onListen ()
{
	printf ("ListenerSession.onListen (TID = %x)\n", jnc.getCurrentThreadId ());

	onStopListening ();

	size_t index = m_ifaceCombo.m_currentIndex;
	char const* ifaceString = m_ifaceCombo.m_itemText [index];
	char const* portString = m_portCombo.m_editText;
	char const* addressString = $"$ifaceString:$portString";

	io.SocketAddress address;
	bool result = try io.parseSocketAddress (addressString, &address);
	if (!result)
	{
		printf ("invalid address '%s'\n", addressString);
		return;
	}

	result = try m_listenerSocket.open (&address);
	if (!result)
	{
		printf ("cannot open address '%s'\n", addressString);

		jnc.Error const* error = jnc.getLastError ();
		m_documentHost.m_log.write (
			ListenerLogPacketCode.ListenError,
			error,
			error.m_size
			);

		return;
	}

	result = try m_listenerSocket.listen (); // should normally succeed

	m_documentHost.m_log.write (
		ListenerLogPacketCode.Listening,
		addressString,
		strlen (addressString) + 1
		);

	m_localAddress = addressString;
	m_stopListeningAction.m_isEnabled = true;
}

ListenerSession.onStopListening ()
{
	if (m_listenerSocket.m_state != io.SocketState.Listening)
		return;

	m_listenerSocket.close ();

	m_documentHost.m_log.write (
		ListenerLogPacketCode.ListenStopped,
		$"$m_localAddress",
		strlen (m_localAddress)
		);
	m_stopListeningAction.m_isEnabled = false;
}

ListenerSession.onDisconnect ()
{
	printf ("ListenerSession.onDisconnect ()\n");

	if (m_connectionSocket)
	{
		m_documentHost.m_log.write (
			ListenerLogPacketCode.ClientDisconnected,
			$"$m_remoteAddress",
			strlen (m_remoteAddress)
			);

		m_connectionSocket.close ();
		m_connectionSocket = null;
		m_disconnectAction.m_isEnabled = false;
	}
}

ListenerSession.onListenerSocketEvent (io.SocketEventParams const* params)
{
	printf ("ListenerSession.onListenerSocketEvent (TID = %x)\n", jnc.getCurrentThreadId ());

	switch (params.m_eventKind)
	{
	case io.SocketEvent.IncomingConnection:
		printf ("io.SocketEvent.IncomingConnection\n");

		m_connectionSocket = try m_listenerSocket.accept ();
		if (m_connectionSocket)
		{
			m_documentHost.m_log.write (ListenerLogPacketCode.ClientConnected);
			m_connectionSocket.m_onSocketEvent += onConnectionSocketEvent @ m_documentHost.m_mainThreadScheduler;
			m_disconnectAction.m_isEnabled = true;
		}
		break;
	}
}

ListenerSession.onConnectionSocketEvent (io.SocketEventParams const* params)
{
	printf ("ListenerSession.onConnectionSocketEvent (TID = %x)\n", jnc.getCurrentThreadId ());

	if (params.m_sender != (io.Socket*) m_connectionSocket) // curently cast is needed :(
		return;

	switch (params.m_eventKind)
	{
	case io.SocketEvent.Disconnected:
		printf ("io.SocketEvent.Disconnected\n");

		m_documentHost.m_log.write (
			ListenerLogPacketCode.ClientDisconnected,
			$"$m_remoteAddress",
			strlen (m_remoteAddress)
			);
		m_connectionSocket.close ();
		m_connectionSocket = null;
		m_disconnectAction.m_isEnabled = false;
		break;

	case io.SocketEvent.IncomingData:
		printf ("io.SocketEvent.IncomingData\n");

		heap char buffer [512];
		size_t result = try m_connectionSocket.read (buffer, sizeof (buffer));
		if (result != -1)
			m_documentHost.m_log.write (ListenerLogPacketCode.Rx, buffer, result);
		break;
	}
}

size_t ListenerSession.transmit (
	void const* p,
	size_t size
	)
{
	if (m_connectionSocket.m_state != io.SocketState.Connected)
		return -1;

	size_t result = try m_connectionSocket.write (p, size);
	if (result != -1)
		m_documentHost.m_log.write (ListenerLogPacketCode.Tx, p, result);

	return result;
}

//.............................................................................

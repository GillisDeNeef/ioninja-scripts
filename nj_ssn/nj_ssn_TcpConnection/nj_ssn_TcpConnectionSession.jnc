//.............................................................................
//
// TCP Connection session
//

//.............................................................................

class TcpConnectionSession: doc.Session
{
protected:
	enum State
	{
		Closed,
		Connecting,
		Connected,
	}

	enum ActionId
	{
		Connect,
		Disconnect,
		_Count,
	}

protected:
	// socket

	State bindable m_state;
	io.Socket* m_socket;
	io.SocketAddress m_remoteAddress;

	// toolbar & menu

	gui.Action* m_actionTable [ActionId._Count];
	gui.ComboBox* m_addressCombo;

	// property grid

	gui.StringProperty* m_addressProp;
	gui.BoolProperty* m_abruptiveDisconnectProp;
	gui.BoolProperty* m_useLocalAddressProp;
	gui.EnumProperty* m_adapterProp;
	gui.IntProperty* m_localPortProp;

public:
	construct (doc.DocumentHost* documentHost);

	bool connect () throws;
	disconnect ();

	override void loadProperties ();
	override bool applyProperties () throws;

	override size_t transmit (
		void const* p,
		size_t size
		) throws;

protected:
	onSocketEvent (io.SocketEventParams const* params);

	createUi ();
	reactor m_uiReactor ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

TcpConnectionSession.construct (doc.DocumentHost* documentHost)
{
	basetype.construct (documentHost);

	documentHost.m_log.m_representer = static new TcpConnectionLogRepresenter;
	
	m_state = State.Closed;
	m_socket = io.createSocket ();
	m_socket.m_onSocketEvent += onSocketEvent @ m_documentHost.m_mainThreadScheduler;

	createUi ();
}

TcpConnectionSession.createUi ()
{
	// toolbar

	m_documentHost.m_toolBar.addLabel ("Address: ");
	m_addressCombo = m_documentHost.m_toolBar.addComboBox (-1);
	m_addressCombo.m_isEditable = true;
	m_addressCombo.m_editText = "127.0.0.1:1001"; // "192.168.1.11:1001";

	m_actionTable [ActionId.Connect] = m_documentHost.createAction ("Connect", "connect.png");
	m_actionTable [ActionId.Connect].m_onTriggered += connect;

	m_actionTable [ActionId.Disconnect] = m_documentHost.createAction ("Disconnect", "disconnect.png");
	m_actionTable [ActionId.Disconnect].m_onTriggered += disconnect;

	// property grid

	m_addressProp = m_documentHost.createStringProperty (
		"Remote address",
		"Remote address to connect to (IP-address or host-name followed by ':' port)"
		);

	m_abruptiveDisconnectProp = m_documentHost.createBoolProperty (
		"Reset connection",
		"Use TCP reset to terminate connections (instead of TCP graceful disconnect)"
		);

	m_useLocalAddressProp = m_documentHost.createBoolProperty (
		"Use local address",
		"Bind socket to the specified local address before connect"
		);

	m_adapterProp = m_documentHost.createNetworkAdapterProperty (
		"Adapter",
		"Adapter to bind to before connect"
		);

	m_adapterProp.m_value = 0;

	m_localPortProp = m_documentHost.createIntProperty (
		"Local TCP port",
		"Local TCP port to bind to before connect"
		);

	m_uiReactor.start ();
}

bool TcpConnectionSession.connect () throws
{
	disconnect ();

	io.SocketAddress address;
	io.parseSocketAddress (m_addressCombo.m_editText, &address);

	m_documentHost.m_log.write (
		TcpConnectionLogRecordCode.Connecting,
		&address,
		sizeof (address)
		);

	if (!m_useLocalAddressProp.m_value)
	{
		m_socket.open (io.Protocol.Tcp); // any address
	}
	else
	{
		io.SocketAddress localAddress;
		io.parseSocketAddress ($"0.0.0.0:$(m_localPortProp.m_value)", &localAddress);
		m_socket.open (io.Protocol.Tcp, &localAddress);
	}

	m_socket.connect (&address);

	m_remoteAddress = address;
	m_state = State.Connecting;
	return true;

catch:
	jnc.Error const* error = jnc.getLastError ();
	m_documentHost.m_log.write (
		TcpConnectionLogRecordCode.ConnectError,
		error,
		error.m_size
		);
		
	m_socket.close ();
	return false;
}

TcpConnectionSession.disconnect ()
{
	if (m_state != State.Connected)
		return;

	m_documentHost.m_log.write (
		TcpConnectionLogRecordCode.Disconnected,
		&m_remoteAddress,
		sizeof (m_remoteAddress)
		);
		
	m_socket.close ();
	m_state = State.Closed;
}

void TcpConnectionSession.loadProperties ()
{
	m_addressProp.m_value = m_addressCombo.m_editText;
}

bool TcpConnectionSession.applyProperties () throws
{
	m_addressCombo.m_editText = m_addressProp.m_value;
	return true;
}

size_t TcpConnectionSession.transmit (
	void const* p,
	size_t size
	) throws
{
	if (m_state != State.Connected)
		return -1;

	size_t result = try m_socket.send (p, size);
	if (result != -1)
		m_documentHost.m_log.write (log.StdRecordCode.Tx, p, result);

	return result;
}

TcpConnectionSession.onSocketEvent (io.SocketEventParams const* params)
{
	if (params.m_syncId != m_socket.m_syncId)
		return;
		
	switch (params.m_eventKind)
	{
	case io.SocketEvent.ConnectCompleted:
		m_documentHost.m_log.write (TcpConnectionLogRecordCode.ConnectCompleted);
		m_state = State.Connected;
		break;

	case io.SocketEvent.ConnectCancelled:
		m_documentHost.m_log.write (TcpConnectionLogRecordCode.ConnectCancelled);
		m_state = State.Closed;
		break;

	case io.SocketEvent.ConnectError:
		io.SocketErrorEventParams const* errorParams = (io.SocketErrorEventParams const*) params;
		m_documentHost.m_log.write (
			TcpConnectionLogRecordCode.ConnectError,
			errorParams.m_error,
			errorParams.m_error.m_size
			);
		m_state = State.Closed;
		break;

	case io.SocketEvent.Disconnected:
		m_documentHost.m_log.write (
			TcpConnectionLogRecordCode.Disconnected,
			&m_remoteAddress,
			sizeof (m_remoteAddress)
			);
		m_state = State.Closed;
		break;

	case io.SocketEvent.IncomingData:
		heap char buffer [512];
		size_t result = try m_socket.recv (buffer, sizeof (buffer));
		if (result != -1)
			m_documentHost.m_log.write (log.StdRecordCode.Rx, buffer, result);
		break;
	}
}

reactor TcpConnectionSession.m_uiReactor ()
{
	m_documentHost.m_title = $"TCP $(m_addressCombo.m_editText)";
	m_actionTable [ActionId.Disconnect].m_isEnabled = m_state != State.Closed;
	m_adapterProp.m_isEnabled = m_useLocalAddressProp.m_value;
	m_localPortProp.m_isEnabled = m_useLocalAddressProp.m_value;
}

//.............................................................................

//.............................................................................
//
// Serial log packet declarations and representer
//

//.............................................................................

enum SerialLogPacket
{
	DeviceOpened    = 1,
	DeviceClosed    = 2 | log.PacketCodeFlags.Foldable,
	Connect         = 4 | log.PacketCodeFlags.MergeableForward,
	ConnectComplete = 5 | log.PacketCodeFlags.MergeableBackward,
	ConnectError    = 6 | log.PacketCodeFlags.MergeableBackward,	
	Connect_m       = 7,
	Bin             = 8 | log.PacketCodeFlags.Mergeable,
}

//.............................................................................

class SerialLogRepresenter: log.Representer
{
	override
	bool 
	represent (
		log.RepresenterTarget* target, 
		uint_t packetCode, 
		const void* p, 
		size_t size, 
		uint64_t foldFlags
		);
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bool
SerialLogRepresenter.represent (
	log.RepresenterTarget* target, 
	uint_t packetCode, 
	const void* p, 
	size_t size, 
	uint64_t foldFlags
	)
{
	char data [] = "0123456789abcf01234";

	switch (packetCode)
	{
	case SerialLogPacket.DeviceOpened:
		target->m_lineAttr.m_iconIdx = 3;
		target->m_lineAttr.m_backColor = gui.StdColor.PastelYellow;
		target->m_lineAttr.m_flags = log.LineAttrFlags.Delimiter;			 

		target->addHyperText (
			"Device <#0000ff>COM3<> is...<+b>opened<> <=!5,3>nahui!<>\n"
			"Vot <+is>tak<> vot!!"
			);

		target->m_lineAttr.m_backColor = gui.ColorFlags.Transparent;
		target->addBin (data, sizeof (data));
		break;

	case SerialLogPacket.DeviceClosed:
		target->m_lineAttr.m_iconIdx = 2;

		if (!(foldFlags & 1))
			target->addHyperText ("[<#0000ff=+1>+<>] Device is closed.");
		else
			target->addHyperText (
				"[<#0000ff=-1>-<>] Device is closed.\n"
				"  Some info...\n"
				"  Some more info which makes a very long line..\n"
				"  bla bla bla"
				);
		break;

	case SerialLogPacket.Connect:
		target->m_lineAttr.m_iconIdx = 4;
		target->m_lineAttr.m_backColor = gui.StdColor.PastelBlue;
		target->addHyperText (
			SerialLogPacket.Connect_m | log.PacketCodeFlags.MergeableForward,
			"Connecting..."
			);
		break;

	case SerialLogPacket.ConnectComplete:
		target->m_lineAttr.m_flags = log.LineAttrFlags.Override;
		target->m_lineAttr.m_iconIdx = 1;
		target->m_lineAttr.m_backColor = gui.StdColor.PastelBlue;
		target->addHyperText (
			SerialLogPacket.Connect_m | log.PacketCodeFlags.MergeableBackward,
			"OK!"
			);
		break;

	case SerialLogPacket.ConnectError:
		target->m_lineAttr.m_flags = log.LineAttrFlags.Override;
		target->m_lineAttr.m_iconIdx = 0;
		target->m_lineAttr.m_backColor = gui.StdColor.PastelRed;
		target->addHyperText (
			SerialLogPacket.Connect_m | log.PacketCodeFlags.MergeableBackward,
			"<\b*>FAIL!"
			);
		break;

	case SerialLogPacket.Bin:
		target->m_lineAttr.m_iconIdx = 8;
		target->m_lineAttr.m_flags |= log.LineAttrFlags.TileIcon;
		target->addBin (p, size);
		break;

	default:
		return false;
	}

	return true;
}

//.............................................................................

void
addIcon (const char* pFilePath);

void
addToolBarButton (
	intptr buttonId,
	size_t iconIdx,
	const char* toolTip
	);

void
initialize ()
{
	addIcon ("D:/Prj/Ninja/ioninja/scripts/nj_ssn/nj_ssn_Serial/play.png");
	addIcon ("D:/Prj/Ninja/ioninja/scripts/nj_ssn/nj_ssn_Serial/reload.png");
	addIcon ("D:/Prj/Ninja/ioninja/scripts/nj_ssn/nj_ssn_Serial/return.png");
	addIcon ("D:/Prj/Ninja/ioninja/scripts/nj_ssn/nj_ssn_Serial/stepinto.png");
	addIcon ("D:/Prj/Ninja/ioninja/scripts/nj_ssn/nj_ssn_Serial/stepover.png");
	addIcon ("D:/Prj/Ninja/ioninja/scripts/nj_ssn/nj_ssn_Serial/stepout.png");

	addToolBarButton (0, 0, "play.png");
	addToolBarButton (1, 1, "reload.png");
	addToolBarButton (2, 2, "return.png");
	addToolBarButton (3, 3, "stepinto.png");
	addToolBarButton (4, 4, "stepover.png");
	addToolBarButton (5, 5, "stepout.png");
}

//.............................................................................

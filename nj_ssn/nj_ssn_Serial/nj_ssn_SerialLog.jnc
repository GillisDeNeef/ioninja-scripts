//.............................................................................
//
// Serial log packet declarations and representer
//

//.............................................................................

enum SerialLogPacketCode
{
	PortOpened    = 1 | log.PacketCodeFlags.Foldable,
	PortOpenError = 2,
	PortClosed,
	BaudRateChanged,
	DataBitsChanged,
	StopBitsChanged,
	ParityChanged,
	FlowControlChanged,
	RtsChanged,
	DtrChanged,
	StatusLineChanged,
};

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct SerialOpenParams
{
	uint_t m_baudRate;
	uint_t m_dataBits;
	uint_t m_stopBits;
	uint_t m_parity;
	uint_t m_flowControl;

	// followed by port name
};

//.............................................................................

class SerialLogRepresenter: log.Representer
{
	override bool represent (
		log.RepresenterTarget* target,
		uint_t packetCode,
		void const* p,
		size_t size,
		uint64_t foldFlags
		);

	static SerialLogRepresenter* getSingleton ()
	{
		static SerialLogRepresenter singleton;
		return &singleton;
	}
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bool SerialLogRepresenter.represent (
	log.RepresenterTarget* target,
	uint_t packetCode,
	void const* p,
	size_t size,
	uint64_t foldFlags
	)
{
	printf ("SerialLogRepresenter.represent (%x)\n", packetCode);

	switch (packetCode)
	{
	case SerialLogPacketCode.PortOpened:
		SerialOpenParams const* params = (SerialOpenParams const*) p;
		char const* name = (char const*) (params + 1);

		printf ("SerialLogPacketCode.PortOpened (%s, %d)\n", name, params.m_baudRate);

		target.m_lineAttr.m_iconIdx = StdLogIcon.Play;
		target.m_lineAttr.m_backColor = StdLogColor.Start;

		if (!(foldFlags & 1))
			target.addHyperText ($"[<#0000ff=+1>+<>] Opened port <15>$name<> at <15>$(params.m_baudRate)<> bps");
		else
			target.addHyperText (
				$"[<#0000ff=-1>-<>] Opened port <15>$name<>\n"
				$"    <#808080+i>Baud rate:<>    $(params.m_baudRate) bps\n"
				$"    <#808080+i>Data bits:<>    $(params.m_dataBits)\n"
				$"    <#808080+i>Stop bits:<>    $(params.m_stopBits)\n"
				$"    <#808080+i>Parity:<>       $(params.m_parity)\n"
				$"    <#808080+i>Flow control:<> $(params.m_flowControl)"
				);

		break;

	case SerialLogPacketCode.PortClosed:
		char const* name = (char const*) p;

		target.m_lineAttr.m_iconIdx = StdLogIcon.Pause;
		target.m_lineAttr.m_backColor = StdLogColor.Stop;
		target.addHyperText ($"Port <15>$name<> closed");
		break;

	case SerialLogPacketCode.PortOpenError:
		char const* name = (char const*) p;

		// TError* pError = (TError*) p;
		// char* pPortName = (char*) (pError + 1) + pError->m_DataSize;

		target.m_lineAttr.m_iconIdx = StdLogIcon.Error;
		target.m_lineAttr.m_backColor = StdLogColor.Stop;
		target.addHyperText ($"Unable to open port <5>$name<>");
		break;

	case SerialLogPacketCode.BaudRateChanged:
		uint_t baudRate = *(uint_t*) p;

		target.m_lineAttr.m_iconIdx = StdLogIcon.Info;
		target.m_lineAttr.m_backColor = StdLogColor.Info;
		target.addHyperText ($"Baud rate set to <15>$baudRate<> bps");
		break;

	case SerialLogPacketCode.DataBitsChanged:
		uint_t dataBits = *(uint_t*) p;

		target.m_lineAttr.m_iconIdx = StdLogIcon.Info;
		target.m_lineAttr.m_backColor = StdLogColor.Info;
		target.addHyperText ($"Data bits set to <15>$dataBits<>");
		break;

	case SerialLogPacketCode.StopBitsChanged:
		uint_t stopBits = *(uint_t*) p;

		target.m_lineAttr.m_iconIdx = StdLogIcon.Info;
		target.m_lineAttr.m_backColor = StdLogColor.Info;
		target.addHyperText ($"Stop bits set to <15>$stopBits<>");
		break;

	case SerialLogPacketCode.ParityChanged:
		uint_t parity = *(uint_t*) p;

		target.m_lineAttr.m_iconIdx = StdLogIcon.Info;
		target.m_lineAttr.m_backColor = StdLogColor.Info;
		target.addHyperText ($"Parity set to <15>$parity<>");
		break;

	case SerialLogPacketCode.FlowControlChanged:
		uint_t flowControl = *(uint_t*) p;

		target.m_lineAttr.m_iconIdx = StdLogIcon.Info;
		target.m_lineAttr.m_backColor = StdLogColor.Info;
		target.addHyperText ($"Flow control set to <15>$flowControl");
		break;

	case SerialLogPacketCode.RtsChanged:
		bool rts = *(bool*) p;

		target.m_lineAttr.m_iconIdx = StdLogIcon.Info;
		target.m_lineAttr.m_backColor = StdLogColor.Info;
		target.addHyperText ($"<15>RTS<> set to $rts");
		break;

	case SerialLogPacketCode.DtrChanged:
		bool dtr = *(bool*) p;

		target.m_lineAttr.m_iconIdx = StdLogIcon.Info;
		target.m_lineAttr.m_backColor = StdLogColor.Info;
		target.addHyperText ($"<15>DTR<> set to $dtr");
		break;
/*
	case SerialLogPacketCode.StatusLineChanged:
		uint_t mask = *(uint_t*) p;
		uint_t lines = *((uint_t*) p + 1);

		jnc.String text = "Status line(s) changed:";

		if (mask & SerialLines.Dsr)
		{
			bool dsr = (lines & SerialLines.Dsr) != 0;
			text += " <15>DSR<>:$dsr";
		}

		if (Mask & SerialLines.Cts)
		{
			bool cts = (lines & SerialLines.Cts) != 0;
			text += " <15>CTS<>:$cts";
		}

		if (Mask & SerialLines.Dcd)
		{
			bool dcd = (lines & SerialLines.Dcd) != 0;
			text += " <15>DCD<>:$dcd";
		}

		target.m_lineAttr.m_iconIdx = StdLogIcon.Info;
		target.m_lineAttr.m_backColor = StdLogColor.Info;
		target.addHyperText (text);
		break;
*/
	default:
		return false;
	}

	return true;
}

//.............................................................................

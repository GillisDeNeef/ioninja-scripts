#include "SerialSettings.h"

#include "Registry.h"
#include "Serial.h"

//.............................................................................

struct TSerialSettings
{
	string m_PortName;
	int m_BaudRate;
	int m_FlowControl;
	int m_Parity;
	int m_DataBits;
	int m_StopBits;

	bool m_DTR;
	bool m_RTS;

	ulong_t m_Filter;
};

bool GetSerialSettings(ISerial Serial, TSerialSettings& Settings);
bool SetSerialSettings(ISerial Serial, TSerialSettings& Settings);

extern TSerialSettings g_SerialDefaultSettings;

//.............................................................................

TSerialSettings g_SerialDefaultSettings;

//.............................................................................

bool GetSerialSettings(ISerial Serial, TSerialSettings& Settings)
{
	Settings.m_PortName    = Serial.PortName;
	Settings.m_BaudRate    = Serial.BaudRate;
	Settings.m_FlowControl = Serial.FlowControl;
	Settings.m_Parity      = Serial.Parity;
	Settings.m_DataBits    = Serial.DataBits;
	Settings.m_StopBits    = Serial.StopBits;
	Settings.m_DTR         = Serial.DTR;
	Settings.m_RTS         = Serial.RTS;
}

bool SetSerialSettings(ISerial Serial, TSerialSettings& Settings)
{
	Serial.PortName    = Settings.m_PortName;
	Serial.BaudRate    = Settings.m_BaudRate;
	Serial.FlowControl = Settings.m_FlowControl;
	Serial.Parity      = Settings.m_Parity;
	Serial.DataBits    = Settings.m_DataBits;
	Serial.StopBits    = Settings.m_StopBits;
	Serial.DTR         = Settings.m_DTR;
	Serial.RTS         = Settings.m_RTS;
}

//.............................................................................

static bool main()
{
	g_SerialDefaultSettings.m_PortName    = "COM1";
	g_SerialDefaultSettings.m_BaudRate    = 38400;
	g_SerialDefaultSettings.m_FlowControl = ESerialFlowControl::None;
	g_SerialDefaultSettings.m_Parity      = ESerialParity::None;
	g_SerialDefaultSettings.m_DataBits    = ESerialDataBits::_8;
	g_SerialDefaultSettings.m_StopBits    = ESerialStopBits::_1;
	g_SerialDefaultSettings.m_DTR         = true;
	g_SerialDefaultSettings.m_RTS         = false;
	g_SerialDefaultSettings.m_Filter      = 0;

	IRegKey RegKey = OpenRegKey(PATH_NinjaRegKey, EOpenRegKey::ReadOnly);
	if (RegKey)
		RegKey.Read("Serial", g_SerialDefaultSettings);

	return true;
}

static void term()
{
	IRegKey RegKey = OpenRegKey(PATH_NinjaRegKey);
	if (RegKey)
		RegKey.Write("Serial", g_SerialDefaultSettings);
}

//.............................................................................

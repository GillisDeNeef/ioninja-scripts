//.............................................................................
//
// Serial log packet declarations and representer
//

//.............................................................................

class SerialSession: doc.Session
{
protected:
//	Serial* m_serial;
	gui.ComboBox* m_portCombo;
	gui.Action* m_dtrAction;
	gui.Action* m_rtsAction;

	gui.BoolProperty* m_boolProp;
	gui.StringProperty* m_stringProp;
	gui.EnumProperty* m_enumProp;

public:
	construct (doc.DocumentHost* documentHost);

protected:
	onOpen ();
	onClose ();
	onDtr ();
	onRts ();

	onPortComboCurrentIndexChanged ();
	onBoolPropChanged ();
	onStringPropChanged ();
	onEnumPropChanged ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

SerialSession.construct (doc.DocumentHost* documentHost)
{
	basetype.construct (documentHost);

	printf ("+SerialSession.construct ()\n");

	// toolbar & menu

	gui.Icon* icon;
	gui.Action* action;
	gui.ComboBox* combo;

	documentHost.m_toolbar.addLabel ("Port ");
	combo = documentHost.m_toolbar.addComboBox ();
	combo.addItem ("COM1");
	combo.addItem ("COM2");
	combo.addItem ("COM3");
	combo.m_currentIndex = 2;
	combo.m_onCurrentIndexChanged += onPortComboCurrentIndexChanged;
	m_portCombo = combo;

	icon = gui.loadIcon ("connect.png");
	action = gui.createAction ("Open", icon);
	action.m_onTriggered += onOpen;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);

	icon = gui.loadIcon ("pause.png");
	action = gui.createAction ("Close", icon);
	action.m_onTriggered += onClose;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);

	documentHost.m_menu.addSeparator ();
	documentHost.m_toolbar.addSeparator ();

	action = gui.createAction ("DTR");
	action.m_isCheckable = true;
	action.m_onTriggered += onDtr;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);
	m_dtrAction = action;

	action = gui.createAction ("RTS");
	action.m_isCheckable = true;
	action.m_onTriggered += onRts;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);
	m_rtsAction = action;

	// property grid

	gui.BoolProperty* boolProp = gui.createBoolProperty ("bool-prop");
	boolProp.m_toolTipText = "sample boolean property";
	bindingof (boolProp.m_value) += onBoolPropChanged;
	documentHost.m_propertyGrid.addProperty (boolProp);

	m_boolProp = boolProp;

	gui.IntProperty* intProp = gui.createIntProperty ("int-prop");
	intProp.m_toolTipText = "sample integer property";
	intProp.m_isEnabled = false;
	documentHost.m_propertyGrid.addProperty (intProp);

	gui.StringProperty* stringProp = gui.createStringProperty ("string-prop");
	bindingof (stringProp.m_value) += onStringPropChanged;
	documentHost.m_propertyGrid.addProperty (stringProp);

	m_stringProp = stringProp;

	gui.EnumProperty* enumProp = gui.createEnumProperty ("enum-prop");

	m_enumProp = enumProp;

	static char const* ItemTextArray [] = 
	{
		"9600 bps",
		"19200 bps",
		"38400 bps",
		"115200 bps",
	};

	static int ItemValueArray [] = 
	{
		9600,
		19200,
		38400,
		115200,
	};

	enumProp.setOptions (
		ItemTextArray,
		ItemValueArray,
		countof (ItemValueArray)
		);

	bindingof (enumProp.m_value) += onEnumPropChanged;

	documentHost.m_propertyGrid.addProperty (enumProp);

/*
	documentHost.m_propertyGrid.addProperty (14, -1, 1, 38400, "Baud rate", "Baud rate nah");
	documentHost.m_propertyGrid.addProperty (15, -1, 2, 8, "Data bits", "Data size nah");
	documentHost.m_propertyGrid.addProperty (15, -1, 3, 1, "Stop bits", "Stop size nah");
	documentHost.m_propertyGrid.addProperty (15, -1, 4, 0, "Parity", "Parity nah");
	documentHost.m_propertyGrid.addProperty (15, -1, 5, 1, "Flow control", "Flow control nah");

	// serial transport

/*

	m_serial = new CSerial;

	// toolbars

	document->m_toolBar->
	document->m_toolBar->addButton ("Open");
	document->m_toolBar->addButton ("Close");

	// property grid

	document->m_propertyWidget->addButton ("Open");

	// log widget

	document.m_logWidget.m_representer = new SerialLogRepresenter;
	document.m_logWidget.m_imageList =

 */

	printf ("-SerialSession.construct ()\n");
}

SerialSession.onOpen ()
{
	printf ("SerialSession.onOpen ()\n");
}

SerialSession.onClose ()
{
	printf ("SerialSession.onClose ()\n");
}

SerialSession.onDtr ()
{
	bool state = m_dtrAction.m_isChecked;
	printf ("SerialSession.onDtr (%d)\n", state);
}

SerialSession.onRts ()
{
	bool state = m_rtsAction.m_isChecked;
	printf ("SerialSession.onRts (%d)\n", state);
}

SerialSession.onPortComboCurrentIndexChanged ()
{
	size_t index = m_portCombo.m_currentIndex;
	char const* name = m_portCombo.m_itemText [index];
	printf ("SerialSession.onPortComboCurrentIndexChanged (%d, %s)\n", index, name);
}

SerialSession.onBoolPropChanged ()
{
	printf ("SerialSession.onBoolPropChanged (%d)\n", m_boolProp.m_value);
}

SerialSession.onStringPropChanged ()
{
	printf ("SerialSession.onStringPropChanged (%s)\n", m_stringProp.m_value);
}

SerialSession.onEnumPropChanged ()
{
	printf ("SerialSession.onEnumPropChanged (%d)\n", m_enumProp.m_value);
}

//.............................................................................

//.............................................................................
//
// Serial session
//

//.............................................................................

class SerialSession: doc.Session
{
protected:
	io.Serial* m_serial;
	gui.ComboBox* m_portCombo;
	gui.Action* m_dtrAction;
	gui.Action* m_rtsAction;

	gui.EnumProperty* m_baudRateProp;
	gui.EnumProperty* m_dataBitsProp;
	gui.EnumProperty* m_stopBitsProp;
	gui.EnumProperty* m_flowControlProp;
	gui.EnumProperty* m_parityProp;

public:
	construct (doc.DocumentHost* documentHost);

protected:
	createBaudRateProp ();
	createDataBitsProp ();
	createStopBitsProp ();
	createFlowControlProp ();
	createParityProp ();

protected:
	onOpen ();
	onClose ();

	onDtr ()
	{
		m_serial.m_dtr = m_dtrAction.m_isChecked;
	}

	onRts ()
	{
		m_serial.m_rts = m_rtsAction.m_isChecked;
	}

	onPortComboCurrentIndexChanged ()
	{
		m_serial.close ();
	}

	onBaudRatePropChanged ()
	{
		m_serial.m_baudRate = m_baudRateProp.m_value;
	}

	onDataBitsPropChanged ()
	{
		m_serial.m_dataBits = m_dataBitsProp.m_value;
	}

	onStopBitsPropChanged ()
	{
		m_serial.m_stopBits = (io.SerialStopBits) m_stopBitsProp.m_value;
	}

	onFlowControlPropChanged ()
	{
		m_serial.m_flowControl = (io.SerialFlowControl) m_flowControlProp.m_value;
	}

	onParityPropChanged ()
	{
		m_serial.m_parity = (io.SerialParity) m_parityProp.m_value;
	}
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

SerialSession.construct (doc.DocumentHost* documentHost)
{
	basetype.construct (documentHost);

	printf ("+SerialSession.construct ()\n");

	// serial transport

	m_serial = io.createSerial ();

	// toolbar & menu

	gui.Icon* icon;
	gui.Action* action;
	gui.ComboBox* combo;

	documentHost.m_toolbar.addLabel ("Port ");
	combo = documentHost.m_toolbar.addComboBox ();
	combo.addItem ("COM1");
	combo.addItem ("COM2");
	combo.addItem ("COM3");
	combo.m_currentIndex = 2;
	combo.m_onCurrentIndexChanged += onPortComboCurrentIndexChanged;
	m_portCombo = combo;

	icon = gui.loadIcon ("connect.png");
	action = gui.createAction ("Open", icon);
	action.m_onTriggered += onOpen;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);

	icon = gui.loadIcon ("pause.png");
	action = gui.createAction ("Close", icon);
	action.m_onTriggered += onClose;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);

	documentHost.m_menu.addSeparator ();
	documentHost.m_toolbar.addSeparator ();

	action = gui.createAction ("DTR");
	action.m_isCheckable = true;
	action.m_isChecked = m_serial.m_dtr;
	action.m_onTriggered += onDtr;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);
	m_dtrAction = action;

	action = gui.createAction ("RTS");
	action.m_isCheckable = true;
	action.m_isChecked = m_serial.m_rts;
	action.m_onTriggered += onRts;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);
	m_rtsAction = action;

	// property grid

	createBaudRateProp ();
	createDataBitsProp ();
	createStopBitsProp ();
	createFlowControlProp ();
	createParityProp ();

	printf ("-SerialSession.construct ()\n");
}

SerialSession.createBaudRateProp ()
{
	static char const* textArray [] =
	{
		"9600 bps",
		"19200 bps",
		"38400 bps",
		"115200 bps",
	};

	static int valueArray [] =
	{
		9600,
		19200,
		38400,
		115200,
	};

	gui.EnumProperty* prop = gui.createEnumProperty ("Baud rate");
	prop.setOptions (textArray, valueArray, countof (valueArray));
	prop.m_toolTipText = "Serial baud rate";
	prop.m_value = m_serial.m_baudRate;
	bindingof (prop.m_value) += onBaudRatePropChanged;
	m_documentHost.m_propertyGrid.addProperty (prop);

	m_baudRateProp = prop;
}

SerialSession.createDataBitsProp ()
{
	static char const* textArray [] =
	{
		"7 bits",
		"8 bits",
	};

	static int valueArray [] =
	{
		7,
		8,
	};

	gui.EnumProperty* prop = gui.createEnumProperty ("Data bits");
	prop.setOptions (textArray, valueArray, countof (valueArray));
	prop.m_toolTipText = "Serial data bit count (word size)";
	prop.m_value = m_serial.m_dataBits;
	bindingof (prop.m_value) += onDataBitsPropChanged;
	m_documentHost.m_propertyGrid.addProperty (prop);

	m_dataBitsProp = prop;
}

SerialSession.createStopBitsProp ()
{
	static char const* textArray [] =
	{
		"1 bit",
		"1.5 bits",
		"2 bits",
	};

	static int valueArray [] =
	{
		io.SerialStopBits._1,
		io.SerialStopBits._15,
		io.SerialStopBits._2,
	};

	gui.EnumProperty* prop = gui.createEnumProperty ("Stop bits");
	prop.setOptions (textArray, valueArray, countof (valueArray));
	prop.m_toolTipText = "Serial stop bit count";
	prop.m_value = m_serial.m_stopBits;
	bindingof (prop.m_value) += onStopBitsPropChanged;
	m_documentHost.m_propertyGrid.addProperty (prop);

	m_stopBitsProp = prop;
}

SerialSession.createFlowControlProp ()
{
	static char const* textArray [] =
	{
		"None",
		"Hardware (RTS/CTS)",
		"Software (XON/XOFF)",
	};

	static int valueArray [] =
	{
		io.SerialFlowControl.None,
		io.SerialFlowControl.RtsCts,
		io.SerialFlowControl.XOnXOff,
	};

	gui.EnumProperty* prop = gui.createEnumProperty ("Flow control");
	prop.setOptions (textArray, valueArray, countof (valueArray));
	prop.m_toolTipText = "Serial flow control";
	prop.m_value = m_serial.m_flowControl;
	bindingof (prop.m_value) += onFlowControlPropChanged;
	m_documentHost.m_propertyGrid.addProperty (prop);

	m_flowControlProp = prop;
}

SerialSession.createParityProp ()
{
	static char const* textArray [] =
	{
		"None",
		"Odd",
		"Even",
		"Mark",
		"Space",
	};

	static int valueArray [] =
	{
		io.SerialParity.None,
		io.SerialParity.Odd,
		io.SerialParity.Even,
		io.SerialParity.Mark,
		io.SerialParity.Space,
	};

	gui.EnumProperty* prop = gui.createEnumProperty ("Parity");
	prop.setOptions (textArray, valueArray, countof (valueArray));
	prop.m_toolTipText = "Serial parity check";
	prop.m_value = m_serial.m_parity;
	bindingof (prop.m_value) += onStopBitsPropChanged;
	m_documentHost.m_propertyGrid.addProperty (prop);

	m_parityProp = prop;
}

SerialSession.onOpen ()
{
	printf ("SerialSession.onOpen ()\n");

	size_t index = m_portCombo.m_currentIndex;
	char const* name = m_portCombo.m_itemText [index];

	bool result = try m_serial.open (name);
	if (result)
	{
	}
	else
	{
	}
}

SerialSession.onClose ()
{
	printf ("SerialSession.onClose ()\n");
	m_serial.close ();
}

//.............................................................................

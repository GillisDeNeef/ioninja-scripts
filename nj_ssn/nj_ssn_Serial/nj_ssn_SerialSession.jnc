//.............................................................................
//
// Serial session
//

//.............................................................................

class SerialSession: doc.StreamSession
{
protected:
	io.Serial* m_serial;
	gui.ComboBox* m_portCombo;
	gui.Action* m_dtrAction;
	gui.Action* m_rtsAction;

	gui.EnumProperty* m_baudRateProp;
	gui.EnumProperty* m_dataBitsProp;
	gui.EnumProperty* m_stopBitsProp;
	gui.EnumProperty* m_parityProp;
	gui.EnumProperty* m_flowControlProp;

	char const* m_portName;

public:
	construct (doc.DocumentHost* documentHost);

protected:
	createBaudRateProp ();
	createDataBitsProp ();
	createStopBitsProp ();
	createFlowControlProp ();
	createParityProp ();

	override size_t pitcher transmit (
		void const* p,
		size_t size
		);

protected:
	onOpen ();
	onClose ();

	onDtr ();
	onRts ();
	onPortComboCurrentIndexChanged ();

	reactor m_uiReactor ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

SerialSession.construct (doc.DocumentHost* documentHost)
{
	basetype.construct (documentHost);

	// transport & log

	m_serial = io.createSerial ();
	documentHost.m_log.m_representer = SerialLogRepresenter.getSingleton ();

	// toolbar & menu

	gui.Icon* icon;
	gui.Action* action;
	gui.ComboBox* combo;

	documentHost.m_toolbar.addLabel ("Port ");
	combo = documentHost.m_toolbar.addComboBox ();
	combo.addItem ("COM1");
	combo.addItem ("COM2");
	combo.addItem ("COM3");
	combo.m_currentIndex = 2;
	combo.m_onCurrentIndexChanged += onPortComboCurrentIndexChanged;
	m_portCombo = combo;

	icon = gui.loadIcon ("connect.png");
	action = gui.createAction ("Open", icon);
	action.m_onTriggered += onOpen;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);

	icon = gui.loadIcon ("pause.png");
	action = gui.createAction ("Close", icon);
	action.m_onTriggered += onClose;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);

	documentHost.m_menu.addSeparator ();
	documentHost.m_toolbar.addSeparator ();

	action = gui.createAction ("DTR");
	action.m_isCheckable = true;
	action.m_isChecked = m_serial.m_dtr;
	action.m_onTriggered += onDtr;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);
	m_dtrAction = action;

	action = gui.createAction ("RTS");
	action.m_isCheckable = true;
	action.m_isChecked = m_serial.m_rts;
	action.m_onTriggered += onRts;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);
	m_rtsAction = action;

	// property grid

	createBaudRateProp ();
	createDataBitsProp ();
	createStopBitsProp ();
	createParityProp ();
	createFlowControlProp ();
}

SerialSession.createBaudRateProp ()
{
	static gui.EnumPropertyOption optionArray [] =
	{
		{ "9600 bps",   9600 },
		{ "19200 bps",  19200 },
		{ "38400 bps",  38400 },
		{ "115200 bps", 115200 },
	};

	gui.EnumProperty* prop = gui.createEnumProperty ("Baud rate");
	prop.setOptions (optionArray, countof (optionArray));
	prop.m_toolTipText = "Serial baud rate";
	prop.m_value = m_serial.m_baudRate;
	m_documentHost.m_propertyGrid.addProperty (prop);

	m_baudRateProp = prop;
}

SerialSession.createDataBitsProp ()
{
	static gui.EnumPropertyOption optionArray [] =
	{
		{ "7 bits", 7 },
		{ "8 bits", 8 },
	};

	gui.EnumProperty* prop = gui.createEnumProperty ("Data bits");
	prop.setOptions (optionArray, countof (optionArray));
	prop.m_toolTipText = "Serial data bit count (word size)";
	prop.m_value = m_serial.m_dataBits;
	m_documentHost.m_propertyGrid.addProperty (prop);

	m_dataBitsProp = prop;
}

SerialSession.createStopBitsProp ()
{
	static gui.EnumPropertyOption optionArray [] =
	{
		{ "1 bit",    io.SerialStopBits._1 },
		{ "1.5 bits", io.SerialStopBits._15 },
		{ "2 bits",   io.SerialStopBits._2 },
	};

	gui.EnumProperty* prop = gui.createEnumProperty ("Stop bits");
	prop.setOptions (optionArray, countof (optionArray));
	prop.m_toolTipText = "Serial stop bit count";
	prop.m_value = m_serial.m_stopBits;
	m_documentHost.m_propertyGrid.addProperty (prop);

	m_stopBitsProp = prop;
}

SerialSession.createParityProp ()
{
	static gui.EnumPropertyOption optionArray [] =
	{
		{ "None",  io.SerialParity.None },
		{ "Odd",   io.SerialParity.Odd },
		{ "Even",  io.SerialParity.Even },
		{ "Mark",  io.SerialParity.Mark },
		{ "Space", io.SerialParity.Space },
	};

	gui.EnumProperty* prop = gui.createEnumProperty ("Parity");
	prop.setOptions (optionArray, countof (optionArray));
	prop.m_toolTipText = "Serial parity check";
	prop.m_value = m_serial.m_parity;
	m_documentHost.m_propertyGrid.addProperty (prop);

	m_parityProp = prop;
}

SerialSession.createFlowControlProp ()
{
	static gui.EnumPropertyOption optionArray [] =
	{
		{ "None",                io.SerialFlowControl.None },
		{ "Hardware (RTS/CTS)",  io.SerialFlowControl.RtsCts },
		{ "Software (XON/XOFF)", io.SerialFlowControl.XOnXOff },
	};

	gui.EnumProperty* prop = gui.createEnumProperty ("Flow control");
	prop.setOptions (optionArray, countof (optionArray));
	prop.m_toolTipText = "Serial flow control";
	prop.m_value = m_serial.m_flowControl;
	m_documentHost.m_propertyGrid.addProperty (prop);

	m_flowControlProp = prop;
}

SerialSession.onOpen ()
{
	if (m_serial.m_isOpen)
		return;

	size_t index = m_portCombo.m_currentIndex;
	char const* name = m_portCombo.m_itemText [index];

	// open and configure

	bool result = try m_serial.open (name);
	if (!result)
	{
		char const* p = $"$name"; // TODO: add error to log packet
		size_t size = jnc.getDataPtrSpan (p);

		m_documentHost.m_log.write (SerialLogPacketCode.PortOpenError, p, size);
		return;
	}

	m_serial.m_baudRate = m_baudRateProp.m_value;
	m_serial.m_dataBits = m_dataBitsProp.m_value;
	m_serial.m_stopBits = (io.SerialStopBits) m_stopBitsProp.m_value;
	m_serial.m_parity = (io.SerialParity) m_parityProp.m_value;
	m_serial.m_flowControl = (io.SerialFlowControl) m_flowControlProp.m_value;

	m_portName = name;

	SerialOpenParams params;
	params.m_baudRate = m_serial.m_baudRate;
	params.m_dataBits = m_serial.m_dataBits;
	params.m_stopBits = m_serial.m_stopBits;
	params.m_parity = m_serial.m_parity;
	params.m_flowControl = m_serial.m_flowControl;

	char const* p = $"$(params,B)$name";
	size_t size = jnc.getDataPtrSpan (p);

	m_documentHost.m_log.write (SerialLogPacketCode.PortOpened, p, size);
	m_uiReactor.start ();
}

SerialSession.onClose ()
{
	if (!m_serial.m_isOpen)
		return;

	m_uiReactor.stop ();
	m_serial.close ();

	m_documentHost.m_log.write (
		SerialLogPacketCode.PortClosed,
		m_portName,
		strlen (m_portName) + 1
		);
}

SerialSession.onDtr ()
{
	bool value = m_dtrAction.m_isChecked;
	m_serial.m_dtr = value;
	m_documentHost.m_log.write (SerialLogPacketCode.DtrChanged, &value, sizeof (value));
}

SerialSession.onRts ()
{
	bool value = m_rtsAction.m_isChecked;
	m_serial.m_rts = value;
	m_documentHost.m_log.write (SerialLogPacketCode.RtsChanged, &value, sizeof (value));
}

SerialSession.onPortComboCurrentIndexChanged ()
{
}

size_t SerialSession.transmit (
	void const* p,
	size_t size
	)
{
	printf ("ConnectionSession.transmit (%d)\n", size);
	return size;
}

reactor SerialSession.m_uiReactor ()
{
	onchanged (m_baudRateProp.m_value)
	{
		uint_t value = m_baudRateProp.m_value;
		m_serial.m_baudRate = value;
		m_documentHost.m_log.write (SerialLogPacketCode.BaudRateChanged, &value, sizeof (value));
	}

	onchanged (m_dataBitsProp.m_value)
	{
		uint_t value = m_dataBitsProp.m_value;
		m_serial.m_dataBits = value;
		m_documentHost.m_log.write (SerialLogPacketCode.DataBitsChanged, &value, sizeof (value));
	}

	onchanged (m_stopBitsProp.m_value)
	{
		io.SerialStopBits value = (io.SerialStopBits) m_stopBitsProp.m_value;
		m_serial.m_stopBits = value;
		m_documentHost.m_log.write (SerialLogPacketCode.StopBitsChanged, &value, sizeof (value));
	}

	onchanged (m_parityProp.m_value)
	{
		io.SerialParity value = (io.SerialParity) m_parityProp.m_value;
		m_serial.m_parity = value;
		m_documentHost.m_log.write (SerialLogPacketCode.ParityChanged, &value, sizeof (value));
	}

	onchanged (m_flowControlProp.m_value)
	{
		io.SerialFlowControl value = (io.SerialFlowControl) m_flowControlProp.m_value;
		m_serial.m_flowControl = value;
		m_documentHost.m_log.write (SerialLogPacketCode.FlowControlChanged, &value, sizeof (value));
	}
}

//.............................................................................

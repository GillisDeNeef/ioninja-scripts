//.............................................................................
//
// SSH Connection session
//

//.............................................................................

class SshChannelSession: doc.StreamSession
{
protected:
	enum ActionId
	{
		Connect,
		Disconnect,
		_Count,
	};

protected:
	io.SshChannel* m_channel;
	gui.Action* m_actionTable [ActionId._Count];
	gui.BoolProperty* m_abruptiveDisconnectProp;
	gui.BoolProperty* m_useLocalAddressProp;
	gui.EnumProperty* m_ifaceProp;
	gui.IntProperty* m_localPortProp;
	gui.ComboBox* m_addressCombo;
	io.SocketAddress m_remoteAddress;

public:
	construct (doc.DocumentHost* documentHost);

	bool connect () throws;
	disconnect ();

	override size_t transmit (
		void const* p,
		size_t size
		) throws;

protected:
	close ();
	onSshEvent (io.SshEventParams const* params);

	createUi ();
	reactor m_uiReactor ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

SshChannelSession.construct (doc.DocumentHost* documentHost)
{
	basetype.construct (documentHost);

	printf ("SshChannelSession.construct (this = %x, TID = %x)\n", this, jnc.getCurrentThreadId ());

	documentHost.m_log.m_representer = SshChannelLogRepresenter.getSingleton ();
	createUi ();
}

SshChannelSession.createUi ()
{
	// toolbar

	m_documentHost.m_toolBar.addLabel ("Address: ");
	m_addressCombo = m_documentHost.m_toolBar.addComboBox (-1);
	m_addressCombo.m_isEditable = true;
	m_addressCombo.m_editText = "93.174.106.102:22"; // ls0.tibbo.net

	m_actionTable [ActionId.Connect] = m_documentHost.createAction ("Connect", "connect.png");
	m_actionTable [ActionId.Connect].m_onTriggered += connect;

	m_actionTable [ActionId.Disconnect] = m_documentHost.createAction ("Disconnect", "disconnect.png");
	m_actionTable [ActionId.Disconnect].m_onTriggered += disconnect;
	m_actionTable [ActionId.Disconnect].m_isEnabled = false;

	// property grid

	m_abruptiveDisconnectProp = m_documentHost.createBoolProperty (
		"Reset SshChannels",
		"Use TCP RST to terminate SshChannels (instead of TCP graceful disconnect)"
		);

	m_useLocalAddressProp = m_documentHost.createBoolProperty (
		"Use Local Address",
		"Bind socket to the specified local address before connect"
		);

	static gui.EnumPropertyOption ifaceTable [] =
	{
		{ "0.0.0.0",   0x00000000 },
		{ "127.0.0.1", 0x7f000001 },
	};

	m_ifaceProp = m_documentHost.createEnumProperty (
		"Interface",
		"Interface to bind to before connect",
		ifaceTable,
		countof (ifaceTable)
		);

	m_ifaceProp.m_value = 0;

	m_localPortProp = m_documentHost.createIntProperty (
		"Local TCP Port",
		"Local TCP port to bind to before connect"
		);

	m_uiReactor.start ();
}

bool SshChannelSession.connect () throws
{
	disconnect ();

	io.SocketAddress address;
	io.parseSocketAddress (m_addressCombo.m_editText, &address);

	m_documentHost.m_log.write (
		SshChannelLogPacketCode.TcpConnecting,
		&address,
		sizeof (address)
		);

	m_channel = io.createSshChannel  ();
	m_channel.m_onSshEvent += onSshEvent @ m_documentHost.m_mainThreadScheduler;

	if (!m_useLocalAddressProp.m_value)
	{
		m_channel.open (); // any address
	}
	else
	{
		io.SocketAddress localAddress;
		io.parseSocketAddress ($"0.0.0.0:$(m_localPortProp.m_value)", &localAddress);
		m_channel.open (&localAddress);
	}

	m_channel.connect (&address, "vovkos", "doygvayri");

	m_remoteAddress = address;
	m_actionTable [ActionId.Disconnect].m_isEnabled = true;
	return true;

catch:
	jnc.Error const* error = jnc.getLastError ();
	m_documentHost.m_log.write (
		SshChannelLogPacketCode.ConnectError,
		error,
		error.m_size
		);
	m_channel = null;
	return false;
}

SshChannelSession.disconnect ()
{
	if (!m_channel)
		return;

	m_documentHost.m_log.write (
		SshChannelLogPacketCode.Disconnected,
		&m_remoteAddress,
		sizeof (m_remoteAddress)
		);
	close ();
}

size_t SshChannelSession.transmit (
	void const* p,
	size_t size
	) throws
{
	if (!m_channel)
		return -1;

	size_t result = try m_channel.write (p, size);
	if (result != -1)
		m_documentHost.m_log.write (log.StdPacketCode.Tx, p, result);

	return result;
}

SshChannelSession.close ()
{
	m_actionTable [ActionId.Disconnect].m_isEnabled = false;
	m_channel.close ();
	m_channel = null;
}

SshChannelSession.onSshEvent (io.SshEventParams const* params)
{
	printf ("SshChannelSession.onSshEvent (TID = %x)\n", jnc.getCurrentThreadId ());

	if (params.m_sender != m_channel)
		return;

	switch (params.m_eventKind)
	{
	case io.SshEvent.TcpConnectCompleted:
		m_documentHost.m_log.write (SshChannelLogPacketCode.TcpConnectCompleted);
		break;

	case io.SshEvent.SshHandshakeCompleted:
		m_documentHost.m_log.write (SshChannelLogPacketCode.SshHandshakeCompleted);
		break;

	case io.SshEvent.SshAuthCompleted:
		m_documentHost.m_log.write (SshChannelLogPacketCode.SshAuthCompleted);
		break;

	case io.SshEvent.SshChannelOpened:
		m_documentHost.m_log.write (SshChannelLogPacketCode.SshChannelOpened);
		break;

	case io.SshEvent.SshPtyRequested:
		m_documentHost.m_log.write (SshChannelLogPacketCode.TcpConnectCompleted);
		break;

	case io.SshEvent.SshShellStarted:
		m_documentHost.m_log.write (SshChannelLogPacketCode.TcpConnectCompleted);
		break;

	case io.SshEvent.ConnectCompleted:
		m_documentHost.m_log.write (SshChannelLogPacketCode.ConnectCompleted);
		m_actionTable [ActionId.Disconnect].m_isEnabled = true;
		break;

	case io.SshEvent.ConnectCancelled:
		m_documentHost.m_log.write (SshChannelLogPacketCode.ConnectCancelled);
		close ();
		break;

	case io.SshEvent.ConnectError:
		m_documentHost.m_log.write (
			SshChannelLogPacketCode.ConnectError,
			params.m_error,
			params.m_error.m_size
			);
		close ();
		break;

	case io.SshEvent.Disconnected:
		m_documentHost.m_log.write (
			SshChannelLogPacketCode.Disconnected,
			&m_remoteAddress,
			sizeof (m_remoteAddress)
			);
		close ();
		break;

	case io.SshEvent.IncomingData:
		heap char buffer [512];
		size_t result = try m_channel.read (buffer, sizeof (buffer));
		if (result != -1)
			m_documentHost.m_log.write (log.StdPacketCode.Rx, buffer, result);
		break;
	}
}

reactor SshChannelSession.m_uiReactor ()
{
	m_ifaceProp.m_isEnabled = m_useLocalAddressProp.m_value;
	m_localPortProp.m_isEnabled = m_useLocalAddressProp.m_value;
}

//.............................................................................

//.............................................................................
//
// Fifo session
//

//.............................................................................

class FifoSession: doc.StreamSession
{
protected:
	enum ActionId
	{
		Open,
		Close,
		_Count,
	};

protected:
	io.FifoReader* m_rxFifo;
	io.FifoWriter* m_txFifo;

	gui.Action* m_actionTable [ActionId._Count];
	gui.ComboBox* m_rxNameCombo;
	gui.ComboBox* m_txNameCombo;

public:
	construct (doc.DocumentHost* documentHost);

	bool open () throws;
	close ();

	override size_t transmit (
		void const* p,
		size_t size
		) throws;

protected:
	createUi ();

	onReadyRead ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

FifoSession.construct (doc.DocumentHost* documentHost)
{
	basetype.construct (documentHost);

	printf ("FifoSession.construct (this = %x, TID = %x)\n", this, jnc.getCurrentThreadId ());

	documentHost.m_log.m_representer = FifoLogRepresenter.getSingleton ();
	createUi ();

	m_rxFile = io.createFifoReader ();
	m_txFile = io.createFifoWriter ();
	m_rxFile.m_onReadyRead += onReadyRead @ m_documentHost.m_mainThreadScheduler;
}

FifoSession.createUi ()
{
	m_documentHost.m_toolBar.addLabel ("Name(s): ");
	m_rxFileNameCombo = m_documentHost.m_toolBar.addComboBox (-1);
	m_rxFileNameCombo.m_isEditable = true;
	m_rxFileNameCombo.m_editText = "/tmp/testFifo_rx";
	m_rxFileNameCombo.m_toolTipText = "RX fifo name";

	m_txFileNameCombo = m_documentHost.m_toolBar.addComboBox (-1);
	m_txFileNameCombo.m_isEditable = true;
	m_txFileNameCombo.m_editText = "/tmp/testFifo_tx";
	m_txFileNameCombo.m_toolTipText = "TX fifo name";

	m_actionTable [ActionId.Open] = m_documentHost.createAction ("Open", "open.png");
	m_actionTable [ActionId.Open].m_onTriggered += open;

	m_actionTable [ActionId.Close] = m_documentHost.createAction ("Close", "close.png");
	m_actionTable [ActionId.Close].m_onTriggered += close;
	m_actionTable [ActionId.Close].m_isEnabled = false;
}

bool FifoSession.open () throws
{
	m_rxFifo.open (m_rxNameCombo.m_editText);
	m_txFifo.open (m_txNameCombo.m_editText);
	m_actionTable [ActionId.Close].m_isEnabled = true;
	return true;

catch:
	jnc.Error const* error = jnc.getLastError ();
	m_documentHost.m_log.write (
		FifoLogPacketCode.OpenError,
		error,
		error.m_size
		);

	m_rxFifo.close ();
	m_txFifo.close ();
	return false;
}

FifoSession.close ()
{
	if (!m_rxFile.m_isOpen || !m_txFile.m_isOpen)
		return;

	m_actionTable [ActionId.Close].m_isEnabled = false;
	m_documentHost.m_log.write (FifoLogPacketCode.Closed);
	m_rxFile.close ();
	m_txFile.close ();
}

FifoSession.onReadyRead ()
{
	heap char buffer [512];
	size_t result = try m_rxFile.read (buffer, sizeof (buffer));
	if (result != -1)
		m_documentHost.m_log.write (FifoLogPacketCode.Rx, buffer, result);
}

size_t FifoSession.transmit (
	void const* p,
	size_t size
	) throws
{
	if (!m_txFile.m_isOpen)
		return -1;

	size_t result = try m_txFile.write (p, size);
	if (result != -1)
		m_documentHost.m_log.write (FifoLogPacketCode.Tx, p, result);

	return result;
}

//.............................................................................

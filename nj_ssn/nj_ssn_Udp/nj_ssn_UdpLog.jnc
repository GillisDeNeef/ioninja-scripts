enum PacketCode
{
	Error,
	Open,
	Close,
	Tx,
	Rx,
}

class UdpLogRepresenter: log.Representer
{
	override bool represent (
		log.RepresenterTarget* target,
		uint_t packetCode,
		void const* p,
		size_t size,
		uint64_t foldFlags
		);
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bool UdpLogRepresenter.represent (
	log.RepresenterTarget* target,
	uint_t packetCode,
	void const* p,
	size_t size,
	uint64_t foldFlags
	)
{
	switch (packetCode)
	{
		case PacketCode.Error:
			target.m_lineAttr.m_flags = log.LineAttrFlags.Override;
			target.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
			target.m_lineAttr.m_backColor = log.StdLogColor.Error;

			jnc.Error* Error = (jnc.Error*) p;
			target.addHyperText (0, $"error ($(Error.m_description))");
			break;
			
		case PacketCode.Open:
			target.m_lineAttr.m_flags = log.LineAttrFlags.Override;
			target.m_lineAttr.m_iconIdx = log.StdLogIcon.Play;
			target.m_lineAttr.m_backColor = log.StdLogColor.Start;
			target.addHyperText(0, $"Opened socket at <#0000FF>$((char*) p)<>");
			break;
			
		case PacketCode.Close:
			target.m_lineAttr.m_iconIdx = log.StdLogIcon.Pause;
			target.m_lineAttr.m_backColor = log.StdLogColor.Stop;
			target.addHyperText(0, $"Socket at <#0000FF>$((char*) p)<> closed");
			break;
			
		case PacketCode.Tx:
			target.m_lineAttr.m_flags = log.LineAttrFlags.TileIcon;
			target.m_lineAttr.m_iconIdx = log.StdLogIcon.Tx;
			target.m_lineAttr.m_textColor = gui.StdColor.Blue;
			target.addBin (p, size);
			break;
			
		case PacketCode.Rx:
			target.m_lineAttr.m_flags = log.LineAttrFlags.TileIcon;
			target.m_lineAttr.m_iconIdx = log.StdLogIcon.Rx;
			target.m_lineAttr.m_textColor = gui.StdColor.Green;
			target.addBin (p, size);
			break;
			
		default:
			target.addHyperText(0, (char*) p);
	}
	
	return true;
}
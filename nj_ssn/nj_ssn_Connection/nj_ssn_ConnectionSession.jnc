//.............................................................................
//
// Connection session
//

//.............................................................................

class ConnectionSession: doc.StreamSession
{
protected:
	io.ConnectionSocket* m_socket;
	gui.ComboBox* m_addressCombo;
	gui.Action* m_disconnectAction;
	char const* m_remoteAddress;

public:
	construct (doc.DocumentHost* documentHost);

protected:
	onConnect ();
	onDisconnect ();
	onSocketEvent (io.SocketEventParams const* params);

	override size_t transmit (
		void const* p,
		size_t size
		) throws;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

ConnectionSession.construct (doc.DocumentHost* documentHost)
{
	basetype.construct (documentHost);

	printf ("ConnectionSession.construct (this = %x, TID = %x)\n", this, jnc.getCurrentThreadId ());

	// transport & log

	m_socket = io.createConnectionSocket ();
	m_socket.m_onSocketEvent += onSocketEvent @ documentHost.m_mainThreadScheduler;

	documentHost.m_log.m_representer = ConnectionLogRepresenter.getSingleton ();

	// toolbar & menu

	gui.Icon* icon;
	gui.Action* action;
	gui.ComboBox* combo;

	documentHost.m_toolbar.addLabel ("Address: ");
	combo = documentHost.m_toolbar.addComboBox (-1);
	combo.m_isEditable = true;
	combo.m_editText = "192.168.1.11:1001"; // "127.0.0.1:1024";
	m_addressCombo = combo;

	icon = gui.loadIcon ("connect.png");
	action = gui.createAction ("Connect", icon);
	action.m_onTriggered += onConnect;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);

	icon = gui.loadIcon ("disconnect.png");
	action = gui.createAction ("Disconnect", icon);
	action.m_onTriggered += onDisconnect;
	action.m_isEnabled = false;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);

	m_disconnectAction = action;

	// no properties

	documentHost.m_propertyGrid.m_isVisible = false;
}

ConnectionSession.onConnect ()
{
	onDisconnect ();

	char const* addressString = m_addressCombo.m_editText;

	io.SocketAddress address;
	bool result = try io.parseSocketAddress (addressString, &address);
	if (!result)
	{
		printf ("invalid address '%s'\n", addressString);
		return;
	}

	m_documentHost.m_log.write (
		ConnectionLogPacketCode.Connecting,
		addressString,
		strlen (addressString) + 1
		);
	m_disconnectAction.m_isEnabled = true;

	m_remoteAddress = addressString;
	try m_socket.open (); // any address
	try m_socket.connect (&address);
}

ConnectionSession.onDisconnect ()
{
	m_socket.close ();
}

ConnectionSession.onSocketEvent (io.SocketEventParams const* params)
{
	printf ("ConnectionSession.onSocketEvent (TID = %x)\n", jnc.getCurrentThreadId ());

	switch (params.m_eventKind)
	{
	case io.SocketEvent.ConnectCompleted:
		m_documentHost.m_log.write (ConnectionLogPacketCode.ConnectCompleted);
		m_disconnectAction.m_isEnabled = true;
		break;

	case io.SocketEvent.ConnectCancelled:
		m_documentHost.m_log.write (ConnectionLogPacketCode.ConnectCancelled);
		m_disconnectAction.m_isEnabled = false;
		break;

	case io.SocketEvent.ConnectError:
		m_documentHost.m_log.write (
			ConnectionLogPacketCode.ConnectError,
			params.m_error,
			params.m_error.m_size
			);
		m_disconnectAction.m_isEnabled = false;
		break;

	case io.SocketEvent.Disconnected:
		m_documentHost.m_log.write (
			ConnectionLogPacketCode.Disconnected,
			$"$m_remoteAddress",
			strlen (m_remoteAddress)
			);
		m_disconnectAction.m_isEnabled = false;
		break;

	case io.SocketEvent.IncomingData:
		heap char buffer [512];
		size_t result = try m_socket.read (buffer, sizeof (buffer));
		if (result != -1)
			m_documentHost.m_log.write (ConnectionLogPacketCode.Rx, buffer, result);
		break;
	}
}

size_t ConnectionSession.transmit (
	void const* p,
	size_t size
	) throws
{
	if (m_socket.m_state != io.SocketState.Connected)
		return -1;

	size_t result = try m_socket.write (p, size);
	if (result != -1)
		m_documentHost.m_log.write (ConnectionLogPacketCode.Tx, p, result);

	return result;
}

//.............................................................................

//.............................................................................
//
// Connection session
//

//.............................................................................

class ConnectionSession: doc.StreamSession
{
protected:
	io.ConnectionSocket* m_socket;
	gui.ComboBox* m_addressCombo;
	char const* m_remoteAddress;

public:
	construct (doc.DocumentHost* documentHost);

protected:
	onConnect ();
	onDisconnect ();

	onConnectComplete ();
	onReadyRead ();
	onDisconnected ();

	override size_t pitcher transmit (
		void const* p,
		size_t size
		);
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

ConnectionSession.construct (doc.DocumentHost* documentHost)
{
	basetype.construct (documentHost);

	printf ("ConnectionSession.construct (this = %x)\n", this);

	// transport & log

	m_socket = io.createConnectionSocket ();
	m_socket.m_onDisconnected += onDisconnected;
	m_socket.m_onReadyRead += onReadyRead;

	documentHost.m_log.m_representer = ConnectionLogRepresenter.getSingleton ();

	// toolbar & menu

	gui.Icon* icon;
	gui.Action* action;
	gui.ComboBox* combo;

	documentHost.m_toolbar.addLabel ("Address ");
	combo = documentHost.m_toolbar.addComboBox (-1);
	combo.m_isEditable = true;
	combo.m_editText = "127.0.0.1:1001";
	m_addressCombo = combo;

	icon = gui.loadIcon ("connect.png");
	action = gui.createAction ("Connect", icon);
	action.m_onTriggered += onConnect;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);

	icon = gui.loadIcon ("pause.png");
	action = gui.createAction ("Disconnect", icon);
	action.m_onTriggered += onDisconnect;
	documentHost.m_menu.addAction (action);
	documentHost.m_toolbar.addAction (action);

	// no properties

	documentHost.m_propertyGrid.m_isVisible = false;
}

ConnectionSession.onConnect ()
{
	if (m_socket.m_isConnected)
		return;

	char const* text = m_addressCombo.m_editText;

	m_documentHost.m_log.write (
		ConnectionLogPacketCode.Connecting,
		text,
		strlen (text) + 1
		);

	m_remoteAddress = text;
	m_socket.connect (text, onConnectComplete);
}

ConnectionSession.onDisconnect ()
{
	if (!m_socket.m_isConnected)
		return;

	m_socket.close ();
}

ConnectionSession.onConnectComplete ()
{
	printf ("ConnectionSession.onConnectComplete ()\n");

	int error = m_socket.m_error;
	if (error == 0)
	{
		m_documentHost.m_log.write (ConnectionLogPacketCode.ConnectComplete);
	}
	else
	{
		m_documentHost.m_log.write (ConnectionLogPacketCode.ConnectError);
	}
}

ConnectionSession.onDisconnected ()
{
	m_documentHost.m_log.write (ConnectionLogPacketCode.Disconnected);
}

ConnectionSession.onReadyRead ()
{
	char buffer [256];
	size_t size = m_socket.read (buffer, sizeof (buffer));
	m_documentHost.m_log.write (ConnectionLogPacketCode.Rx, buffer, size);
}

size_t ConnectionSession.transmit (
	void const* p,
	size_t size
	)
{
	if (!m_socket.m_isConnected)
	{
		// onConnect ();
		return 0;
	}

	m_socket.write (p, size);
	m_documentHost.m_log.write (ConnectionLogPacketCode.Tx, p, size);
	return size;
}

//.............................................................................

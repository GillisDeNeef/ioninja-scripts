//.............................................................................
//
// Connection session
//

//.............................................................................

class ConnectionSession: doc.StreamSession
{
protected:
	enum ActionId
	{
		Connect,
		Disconnect,
		_Count,
	};

protected:
	io.ConnectionSocket* m_socket;
	gui.Action* m_actionTable [ActionId._Count];
	gui.BoolProperty* m_abruptiveDisconnectProp;
	gui.BoolProperty* m_useLocalAddressProp;
	gui.EnumProperty* m_ifaceProp;
	gui.IntProperty* m_localPortProp;
	gui.ComboBox* m_addressCombo;
	char const* m_remoteAddress;

public:
	construct (doc.DocumentHost* documentHost);

	bool connect () throws;
	disconnect ();

	override size_t transmit (
		void const* p,
		size_t size
		) throws;

protected:
	createUi ();

	onSocketEvent (io.SocketEventParams const* params);

	reactor m_uiReactor ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

ConnectionSession.construct (doc.DocumentHost* documentHost)
{
	basetype.construct (documentHost);

	printf ("ConnectionSession.construct (this = %x, TID = %x)\n", this, jnc.getCurrentThreadId ());

	documentHost.m_log.m_representer = ConnectionLogRepresenter.getSingleton ();
	m_socket = io.createConnectionSocket ();
	m_socket.m_onSocketEvent += onSocketEvent @ documentHost.m_mainThreadScheduler;
	createUi ();
}

ConnectionSession.createUi ()
{
	// toolbar

	m_documentHost.m_toolbar.addLabel ("Address: ");
	m_addressCombo = m_documentHost.m_toolbar.addComboBox (-1);
	m_addressCombo.m_isEditable = true;
	m_addressCombo.m_editText = "192.168.1.11:1001"; // "127.0.0.1:1024";

	m_actionTable [ActionId.Connect] = m_documentHost.createAction ("Connect", "connect.png");
	m_actionTable [ActionId.Connect].m_onTriggered += connect;

	m_actionTable [ActionId.Disconnect] = m_documentHost.createAction ("Disconnect", "disconnect.png");
	m_actionTable [ActionId.Disconnect].m_onTriggered += disconnect;
	m_actionTable [ActionId.Disconnect].m_isEnabled = false;

	// property grid

	m_abruptiveDisconnectProp = m_documentHost.createBoolProperty (
		"Reset Connections",
		"Use TCP RST to terminate connections (instead of TCP graceful disconnect)"
		);

	m_useLocalAddressProp = m_documentHost.createBoolProperty (
		"Use Local Address",
		"Bind socket to the specified local address before connect"
		);

	static gui.EnumPropertyOption ifaceTable [] =
	{
		{ "0.0.0.0",   0x00000000 },
		{ "127.0.0.1", 0x7f000001 },
	};

	m_ifaceProp = m_documentHost.createEnumProperty (
		"Interface",
		"Interface to bind to before connect",
		ifaceTable,
		countof (ifaceTable)
		);

	m_ifaceProp.m_value = 0;

	m_localPortProp = m_documentHost.createIntProperty (
		"Local TCP Port",
		"Local TCP port to bind to before connect"
		);

	m_uiReactor.start ();
}

bool ConnectionSession.connect () throws
{
	disconnect ();

	char const* addressString = m_addressCombo.m_editText;

	m_documentHost.m_log.write (
		ConnectionLogPacketCode.Connecting,
		addressString,
		strlen (addressString) + 1
		);

	io.SocketAddress address;
	io.parseSocketAddress (addressString, &address);

	m_remoteAddress = addressString;
	m_socket.open (); // any address
	m_socket.connect (&address);
	m_actionTable [ActionId.Disconnect].m_isEnabled = true;
	return true;

catch:
	jnc.Error const* error = jnc.getLastError ();
	m_documentHost.m_log.write (
		ConnectionLogPacketCode.ConnectError,
		error,
		error.m_size
		);
	return false;
}

ConnectionSession.disconnect ()
{
	m_socket.close ();
}

size_t ConnectionSession.transmit (
	void const* p,
	size_t size
	) throws
{
	if (m_socket.m_state != io.SocketState.Connected)
		return -1;

	size_t result = try m_socket.write (p, size);
	if (result != -1)
		m_documentHost.m_log.write (ConnectionLogPacketCode.Tx, p, result);

	return result;
}

ConnectionSession.onSocketEvent (io.SocketEventParams const* params)
{
	printf ("ConnectionSession.onSocketEvent (TID = %x)\n", jnc.getCurrentThreadId ());

	switch (params.m_eventKind)
	{
	case io.SocketEvent.ConnectCompleted:
		m_documentHost.m_log.write (ConnectionLogPacketCode.ConnectCompleted);
		m_actionTable [ActionId.Disconnect].m_isEnabled = true;
		break;

	case io.SocketEvent.ConnectCancelled:
		m_documentHost.m_log.write (ConnectionLogPacketCode.ConnectCancelled);
		m_actionTable [ActionId.Disconnect].m_isEnabled = false;
		break;

	case io.SocketEvent.ConnectError:
		m_documentHost.m_log.write (
			ConnectionLogPacketCode.ConnectError,
			params.m_error,
			params.m_error.m_size
			);
		m_actionTable [ActionId.Disconnect].m_isEnabled = false;
		break;

	case io.SocketEvent.Disconnected:
		m_documentHost.m_log.write (
			ConnectionLogPacketCode.Disconnected,
			$"$m_remoteAddress",
			strlen (m_remoteAddress)
			);
		m_actionTable [ActionId.Disconnect].m_isEnabled = false;
		break;

	case io.SocketEvent.IncomingData:
		heap char buffer [512];
		size_t result = try m_socket.read (buffer, sizeof (buffer));
		if (result != -1)
			m_documentHost.m_log.write (ConnectionLogPacketCode.Rx, buffer, result);
		break;
	}
}

reactor ConnectionSession.m_uiReactor ()
{
	m_ifaceProp.m_isEnabled = m_useLocalAddressProp.m_value;
	m_localPortProp.m_isEnabled = m_useLocalAddressProp.m_value;
}

//.............................................................................

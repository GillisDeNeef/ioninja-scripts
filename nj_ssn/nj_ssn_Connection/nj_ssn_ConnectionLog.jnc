//.............................................................................
//
// Connection log packet declarations and representer
//

//.............................................................................

enum ConnectionLogPacketCode
{
	Connecting       = 1 | log.PacketCodeFlags.Mergeable,
	ConnectCancelled = 2 | log.PacketCodeFlags.Mergeable,
	ConnectComplete  = 3 | log.PacketCodeFlags.Mergeable,
	ConnectError     = 4 | log.PacketCodeFlags.Mergeable,
	Disconnected     = 5,
	Tx               = 6 | log.PacketCodeFlags.Mergeable,
	Rx               = 7 | log.PacketCodeFlags.Mergeable,
}

enum ConnectionPartCode
{
	Connecting       = 1 | log.PacketCodeFlags.MergeableForward,
	ConnectComplete  = 1 | log.PacketCodeFlags.MergeableBackward,
}


//.............................................................................

class ConnectionLogRepresenter: log.Representer
{
	override bool represent (
		log.RepresenterTarget* target,
		uint_t packetCode,
		void const* p,
		size_t size,
		uint64_t foldFlags
		);

	static ConnectionLogRepresenter* getSingleton ()
	{
		static ConnectionLogRepresenter singleton;
		return &singleton;
	}
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bool ConnectionLogRepresenter.represent (
	log.RepresenterTarget* target,
	uint_t packetCode,
	void const* p,
	size_t size,
	uint64_t foldFlags
	)
{
	switch (packetCode)
	{
	case ConnectionLogPacketCode.Connecting:
		char const* address = (char const*) p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		target.m_lineAttr.m_backColor = log.StdLogColor.Info;
		target.addHyperText (ConnectionPartCode.Connecting, $"Connecting to <15>$address<>...");
		break;

	case ConnectionLogPacketCode.ConnectCancelled:
		target.addHyperText (ConnectionPartCode.ConnectComplete, "cancelled");
		break;

	case ConnectionLogPacketCode.ConnectComplete:
		target.m_lineAttr.m_flags = log.LineAttrFlags.Override;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Play;
		target.m_lineAttr.m_backColor = log.StdLogColor.Start;
		target.addHyperText (ConnectionPartCode.ConnectComplete, "ok");
		break;

	case ConnectionLogPacketCode.ConnectError:
		target.m_lineAttr.m_flags = log.LineAttrFlags.Override;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
		target.m_lineAttr.m_backColor = log.StdLogColor.Error;
		target.addHyperText (ConnectionPartCode.ConnectComplete, "error");
		break;

	case ConnectionLogPacketCode.Disconnected:
		char const* address = (char const*) p;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Pause;
		target.m_lineAttr.m_backColor = log.StdLogColor.Stop;
		target.addHyperText (ConnectionPartCode.ConnectComplete, $"Disconnected from <15>$address<>");
		break;

	case ConnectionLogPacketCode.Tx:
		target.m_lineAttr.m_flags = log.LineAttrFlags.TileIcon;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Tx;
		target.m_lineAttr.m_foreColor = gui.StdColor.Blue;
		target.addBin (p, size);
		break;

	case ConnectionLogPacketCode.Rx:
		target.m_lineAttr.m_flags = log.LineAttrFlags.TileIcon;
		target.m_lineAttr.m_iconIdx = log.StdLogIcon.Rx;
		target.m_lineAttr.m_foreColor = gui.StdColor.Green;
		target.addBin (p, size);
		break;

	default:
		return false;
	}

	return true;
}

//.............................................................................

//.............................................................................
//
// Ninja log engine declarations
//

import "gui_Base.jnc"

namespace log {

//.............................................................................

bitflag enum RecordCodeFlags
{
	Foldable          = 0x80000000,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bitflag enum PartCodeFlags
{
	MergeableBackward = 0x40000000,
	MergeableForward  = 0x20000000,
	Mergeable         = 0x60000000,
}

//.............................................................................

enum PartKind
{
	PlainText = 0,
	HyperText,
	Bin,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum StdRecordCode
{
	Tx = 0x01000000 | PartCodeFlags.Mergeable, 
	Rx = 0x02000000 | PartCodeFlags.Mergeable,
}

//.............................................................................

// visual attributes

enum StdLogIcon
{
	Info = 0,
	Warning,
	Error,
	Play,
	Pause,
	TxPacket,
	RxPacket,
	Packet,
	Tx,
	Rx,
	_Count,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum StdLogColor
{
	Start   = gui.StdColor.PastelGreen,
	Stop    = gui.StdColor.PastelGreen,
	Info    = gui.StdColor.PastelBlue,
	Warning = gui.StdColor.PastelYellow,
	Error   = gui.StdColor.PastelRed,
	Tx      = gui.StdColor.Blue,
	Rx      = gui.StdColor.Green,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bitflag enum LineAttrFlags
{
	TileIcon,
	Delimiter,
	Override,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct LineAttr: gui.TextAttr
{
	LineAttrFlags m_flags;
	uint_t m_iconIdx;
}

//.............................................................................

// represneter-target pair

opaque class RepresenterTarget
{
	uint64_t readonly m_timestamp;
	uint_t readonly m_recordCode;
	LineAttr m_lineAttr;

	void addPart (
		PartKind partKind,
		uint_t partCode,
		void const* p,
		size_t size
		);

	void addHyperText (
		uint_t partCode,
		char const* text
		)
	{
		addPart (PartKind.HyperText, partCode, text, strlen (text));
	}

	void addHyperText (char const* text)
	{
		addPart (PartKind.HyperText, m_recordCode, text, strlen (text));
	}

	void addBin (
		uint_t partCode,
		void const* p,
		size_t size
		)
	{
		addPart (PartKind.Bin, partCode, p, size);
	}

	void addBin (
		void const* p,
		size_t size
		)
	{
		addPart (PartKind.Bin, m_recordCode, p, size);
	}
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

typedef bool RepresenterFunc (
	RepresenterTarget* target,
	uint_t recordCode,
	void const* p,
	size_t size,
	uint_t foldFlags
	);

//.............................................................................

opaque class Writer
{
	write (
		uint64_t timestamp,
		uint_t recordCode,
		void const* p,
		size_t size
		);

	write (
		uint_t recordCode,
		void const* p,
		size_t size
		)
	{
		write (jnc.getTimestamp (), recordCode, p, size);
	}

	write (uint_t recordCode)
	{
		write (jnc.getTimestamp (), recordCode, null, 0);
	}
}

//.............................................................................

class Filter
{
	abstract bool filter (
		uint_t recordCode,
		void const* p,
		size_t size
		);

	virtual reset ()
	{
	}
}

//.............................................................................

class Converter
{
	abstract bool convert (
		Writer* writer,
		uint64_t timestamp,
		uint_t recordCode,
		void const* p,
		size_t size
		);

	virtual reset ()
	{
	}
}

//.............................................................................

enum ListenerSensitivity
{
	AllRecords,
	LiveRecordsOnly,	
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

typedef ListenerFunc (
	uint64_t timestamp,
	uint_t recordCode,
	void const* p,
	size_t size
	);

//.............................................................................

// log engine

opaque class Log
{
	gui.Icon* indexed property m_iconTable (size_t i);

	Writer* readonly m_writer;
	RepresenterFunc thin* autoget property m_representerFunc;

	attachFilter (Filter* filter);

	attachConverter (
		Converter* converter,
		RepresenterFunc thin* representerFunc = null
		);

	attachListener (
		ListenerFunc* listenerFunc,
		ListenerSensitivity sensitivity = ListenerSensitivity.LiveRecordsOnly
		);
}

//.............................................................................

} // namespace log {

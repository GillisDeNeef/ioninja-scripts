//.............................................................................
//
// Socket class
//

namespace io {

//.............................................................................

enum SocketEvent
{
	ConnectCompleted,
	ConnectCancelled,
	ConnectError,
	Disconnected,
	IncomingData,
	IncomingConnection,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct SocketEventParams
{
	SocketEvent m_eventKind;
	uint_t m_syncId;
	jnc.Error const* m_error;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum SocketCloseKind
{
	Reset = 0,
	Graceful,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

class Socket
{
	SocketAddress const property m_address;
	SocketAddress const property m_peerAddress;
	
	bool property m_isBroadcastEnabled;
	bool property m_isNagleEnabled;
	SocketCloseKind property m_closeKind;

	bool dconst m_isOpen;
	uint_t m_syncId;

	bool open (
		Protocol protocol,
		SocketAddress const* address = null
		) throws;

	void close ();

	bool connect (
		SocketAddress const* address,
		bool isSync = false
		) throws;

	bool listen (size_t backLog = 0) throws; // 0 -- default
	Socket* accept (SocketAddress* address = null) throws;

	size_t send (
		void const* p,
		size_t size
		) throws;

	size_t recv (
		void* p,
		size_t size
		) throws;

	size_t sendTo (
		void const* p,
		size_t size,
		SocketAddress const* address
		) throws;

	size_t recvFrom (
		void* p,
		size_t size,
		SocketAddress* address
		) throws;

	event m_onSocketEvent (SocketEventParams const* params);

	void firePendingEvents (); // to process events happened after accept () and before assiging event handler
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

Socket* createSocket ();

//.............................................................................

} // namespace io {

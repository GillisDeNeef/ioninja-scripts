//.............................................................................
//
// Socket class
//

namespace io {

//.............................................................................

// sockets

enum Protocol
{
	Tcp = 6,
	Udp = 17,
}

//.............................................................................

// network address families

enum AddressFamily: uint16_t
{
	Ip4 = 2,
	Ip6 = 23,
}

//.............................................................................

union Address_Ip4
{
	bigendian uint32_t m_i32;
	uint8_t m_i8 [4];
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bool parseAddress_Ip4 (
	char const* string,
	Address_Ip4* address
	) throws;

char const* formatAddress_Ip4 (Address_Ip4 const* address);

//.............................................................................

union Address_Ip6
{
	bigendian uint16_t m_i16 [8];
	uint8_t m_i8 [16];
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bool parseAddress_Ip6 (
	char const* string,
	Address_Ip6* address
	) throws;

char const* formatAddress_Ip6 (Address_Ip4 const* address) throws;

//.............................................................................

// socket address is network address plus transport info

struct pack (2) SocketAddress_Ip4
{
	bigendian uint16_t m_port;
	Address_Ip4 m_address;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct pack (2) SocketAddress_Ip6
{
	bigendian uint16_t m_port;
	bigendian uint32_t m_flow;
	Address_Ip6 m_address;
}

//.............................................................................

// layout matches berkely sockets sockaddr

struct SocketAddress
{
	AddressFamily m_family;

	union
	{
		SocketAddress_Ip4 m_ip4;
		SocketAddress_Ip6 m_ip6;
	}
}

//.............................................................................

bool parseSocketAddress (
	char const* string,
	SocketAddress* address
	) throws;

bool resolveSocketAddress (
	char const* string,
	SocketAddress* address,
	function* onComplete (
		bool result,
		jnc.Error const* error
		)
	) throws;

char const* formatSocketAddress (SocketAddress const* address) throws;

//.............................................................................

enum SocketAddressResolverEvent
{
	ResolveCompleted,
	ResolveCancelled,
	ResolveError,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct SocketAddressResolverEventParams
{
	SocketAddressResolverEvent m_eventKind;
	uint_t m_syncId;
	SocketAddress const* m_address;
	jnc.Error const* m_error;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class SocketAddressResolver
{
	uint_t m_syncId;

	SocketAddressResolver* operator new ();

	bool resolve (char const* name) throws;
	bool cancel (uint_t syncId);
	cancelAll ();

	event m_onResolverEvent (SocketAddressResolverEventParams const* params);
}

//.............................................................................

} // namespace io {

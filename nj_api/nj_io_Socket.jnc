//.............................................................................
//
// Socket class
//

namespace io {

//.............................................................................

// sockets

enum Protocol
{
	Tcp = 6,
	Udp = 17,
}

//.............................................................................

// network address families

enum AddressFamily: uint16_t
{
	Ip4 = 2,
	Ip6 = 23,
}

//.............................................................................

union Address_Ip4
{
	bigendian uint32_t m_i32;
	uint8_t m_i8 [4];
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bool parseAddress_Ip4 (
	char const* string,
	Address_Ip4* address
	) throws;

char const* formatAddress_Ip4 (Address_Ip4 const* address);

//.............................................................................

union Address_Ip6
{
	bigendian uint16_t m_i16 [8];
	uint8_t m_i8 [16];
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bool parseAddress_Ip6 (
	char const* string,
	Address_Ip6* address
	) throws;

char const* formatAddress_Ip6 (Address_Ip4 const* address) throws;

//.............................................................................

// socket address is network address plus transport info

struct pack (2) SocketAddress_Ip4
{
	bigendian uint16_t m_port;
	Address_Ip4 m_address;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct pack (2) SocketAddress_Ip6
{
	bigendian uint16_t m_port;
	bigendian uint32_t m_flow;
	Address_Ip6 m_address;
}

//.............................................................................

// layout matches berkely sockets sockaddr

struct SocketAddress
{
	AddressFamily m_family;

	union
	{
		SocketAddress_Ip4 m_ip4;
		SocketAddress_Ip6 m_ip6;
	}
}

//.............................................................................

bool parseSocketAddress (
	char const* string,
	SocketAddress* address
	) throws;

char const* formatSocketAddress (SocketAddress const* address) throws;

//.............................................................................

/*

opaque class AsyncSocketAddressResolver
{
	// async resolve

	uintptr_t resolve (
		char const* string,
		function* onCompleted (SocketAddress const* address)
		) throws;

	cancel (uintptr_t cookie);
}

*/

//.............................................................................

enum SocketEvent
{
	ConnectCompleted,
	ConnectCancelled,
	ConnectError,
	Disconnected,
	IncomingData,
	IncomingConnection,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct SocketEventParams
{
	SocketEvent m_eventKind;
	uint_t m_syncId;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct SocketErrorEventParams: SocketEventParams
{
	jnc.Error const* m_error;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum SocketCloseKind
{
	Reset = 0,
	Graceful,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

class Socket
{
	SocketAddress const property m_address;
	SocketAddress const property m_peerAddress;
	
	bool property m_isBroadcastEnabled;
	bool property m_isNagleEnabled;
	SocketCloseKind property m_closeKind;

	bool dconst m_isOpen;
	uint_t m_syncId;

	bool open (
		Protocol protocol,
		SocketAddress const* address = null
		) throws;

	void close ();

	bool connect (
		SocketAddress const* address,
		bool isSync = false
		) throws;

	bool listen (size_t backLog = 0) throws; // 0 -- default
	Socket* accept (SocketAddress* address = null) throws;

	size_t send (
		void const* p,
		size_t size
		) throws;

	size_t recv (
		void* p,
		size_t size
		) throws;

	size_t sendTo (
		void const* p,
		size_t size,
		SocketAddress const* address
		) throws;

	size_t recvFrom (
		void* p,
		size_t size,
		SocketAddress* address
		) throws;

	event m_onSocketEvent (SocketEventParams const* params);

	void firePendingEvents (); // to process events happened after accept () and before assiging event handler
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

Socket* createSocket ();

//.............................................................................

} // namespace io {

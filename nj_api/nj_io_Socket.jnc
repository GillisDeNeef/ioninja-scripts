//.............................................................................
//
// Socket class
//

namespace io {

//.............................................................................

// sockets

enum Protocol
{
	Tcp = 6,
	Udp = 17,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum AddressFamily: uint16_t
{
	Ip4 = 2,
	Ip6 = 23,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct pack (2) SocketAddress_Ip4
{
	bigendian uint16_t m_port;

	union
	{
		bigendian uint32_t m_ip32;
		uint8_t m_ip8 [4];
	}
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct pack (2) SocketAddress_Ip6
{
	bigendian uint16_t m_port;
	bigendian uint32_t m_flow;

	union
	{
		bigendian uint16_t m_ip16 [8];
		uint8_t m_ip8 [16];
	}
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// layout matches berkely sockets sockaddr

struct SocketAddress
{
	AddressFamily m_family;

	union
	{
		SocketAddress_Ip4 m_ip4;
		SocketAddress_Ip6 m_ip6;
	}
}

//.............................................................................

bool parseSocketAddress (
	char const* string,
	SocketAddress* address
	) throws;

char const* formatSocketAddress (SocketAddress const* address) throws;

/*

opaque class AsyncSocketAddressResolver
{
	// async resolve

	uintptr_t resolve (
		char const* string,
		function* onCompleted (SocketAddress const* address)
		) throws;

	cancel (uintptr_t cookie);
}

*/

//.............................................................................

enum SocketEvent
{
	ConnectCompleted,
	ConnectCancelled,
	ConnectError,
	Disconnected,
	IncomingData,
	IncomingConnection,
}

struct SocketEventParams
{
	SocketEvent m_eventKind;
	Socket* m_sender;
	jnc.Error const* m_error;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

class Socket
{
	SocketAddress const property m_address;
	SocketAddress const property m_peerAddress;

	bool dconst m_isOpen;

	bool open (
		Protocol protocol,
		nullable SocketAddress const* address = null
		) throws;

	void close ();

	bool connect (
		SocketAddress const* address,
		bool isSync = false
		) throws;

	bool listen (size_t backLog = 0) throws; // 0 -- default
	Socket* accept (nullable SocketAddress* address = null) throws;

	size_t send (
		void const* p,
		size_t size
		) throws;

	size_t recv (
		void* p,
		size_t size
		) throws;

	size_t sendTo (
		void const* p,
		size_t size,
		SocketAddress const* address
		) throws;

	size_t recvFrom (
		void* p,
		size_t size,
		SocketAddress* address
		) throws;

	event m_onSocketEvent (SocketEventParams const* params);
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

Socket* createSocket ();

//.............................................................................

} // namespace io {

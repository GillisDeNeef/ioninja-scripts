//.............................................................................
//
// SSH channel class
//

namespace io {

//.............................................................................

enum SshEvent
{
	TcpConnectCompleted,
	SshHandshakeCompleted,
	SshAuthCompleted,
	SshChannelOpened,
	SshPtyRequested,
	SshShellStarted,
	ConnectCompleted,
	ConnectCancelled,
	ConnectError,
	Disconnected,
	IncomingData,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct SshEventParams
{
	SshEvent m_eventKind;
	uint_t m_syncId;
	jnc.Error const* m_error;
}

//.............................................................................

class SshChannel
{
	SocketAddress const property m_address;
	SocketAddress const property m_peerAddress;

	bool dconst m_isOpen;
	uint_t m_syncId;

	bool open (SocketAddress const* address = null) throws;
	void close ();

	bool connect (
		SocketAddress const* address,
		char const* userName,
		char const* password,
		char const* channelType = "session", // session, direct-tcpip, tcpip-forward, etc
		char const* processType = "shell",   // shell, exec, subsystem, etc
		char const* ptyType = "ansi",        // vanilla, ansi, xterm, vt102, etc
		uint_t ptyWidth = 80,
		uint_t ptyHeight = 24,
		bool isSync = false
		) throws;

	bool resizePty (
		uint_t width,
		uint_t height
		);

	size_t read (
		void* p,
		size_t size
		) throws;

	size_t write (
		void const* p,
		size_t size
		) throws;

	event m_onSshEvent (SshEventParams const* params);
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

SshChannel* createSshChannel ();

//.............................................................................

} // namespace io {

//.............................................................................
//
// Ninja log engine declarations
//

namespace log {

//.............................................................................

fenum PacketCodeFlags
{
	Foldable          = 0x80000000,
	MergeableBackward = 0x40000000,
	MergeableForward  = 0x20000000,
	Mergeable         = 0x60000000,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

fenum LineAttrFlags
{
	TileIcon,
	Delimiter,
	Override,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct LineAttr: gui.TextAttr
{
	LineAttrFlags m_flags;
	size_t m_iconIdx;
}

//.............................................................................

enum PartKind
{
	PlainText = 0,
	HyperText,
	Bin,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

class RepresenterTarget
{
	uint_t dconst m_packetCode;
	uint64_t dconst m_timestamp;

	LineAttr m_lineAttr;

	abstract void addPart (
		PartKind partKind,
		uint_t partCode,
		void const* p,
		size_t size
		);

	void addHyperText (
		uint_t partCode,
		char const* text
		)
	{
		addPart (PartKind.HyperText, partCode, text, strlen (text));
	}

	void addHyperText (char const* text)
	{
		addPart (PartKind.HyperText, m_packetCode, text, strlen (text));
	}

	void addBin (
		uint_t partCode,
		void const* p,
		size_t size
		)
	{
		addPart (PartKind.Bin, partCode, p, size);
	}

	void addBin (
		void const* p,
		size_t size
		)
	{
		addPart (PartKind.Bin, m_packetCode, p, size);
	}
}

//.............................................................................

class Representer
{
	abstract bool represent (
		RepresenterTarget* target,
		uint_t packetCode,
		void const* p,
		size_t size,
		uint64_t foldFlags
		);
}

//.............................................................................

} // namespace log {

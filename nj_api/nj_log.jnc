//.............................................................................
//
// Ninja log engine declarations
//

namespace log {

//.............................................................................

// packet flags

fenum PacketCodeFlags
{
	Foldable          = 0x80000000,
	MergeableBackward = 0x40000000,
	MergeableForward  = 0x20000000,
	Mergeable         = 0x60000000,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum PartKind
{
	PlainText = 0,
	HyperText,
	Bin,
}

//.............................................................................

// visual attributes

enum StdLogIcon
{
	Info,
	Warning,
	Error,
	Play,
	Pause,
	TxPacket,
	RxPacket,
	Packet,
	Tx,
	Rx,
};

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum StdLogColor
{
	Start   = gui.StdColor.PastelGreen,
	Stop    = gui.StdColor.PastelGreen,
	Info    = gui.StdColor.PastelBlue,
	Warning = gui.StdColor.PastelYellow,
	Error   = gui.StdColor.PastelRed,
	Tx      = gui.StdColor.Blue,
	Rx      = gui.StdColor.Green,
};

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

fenum LineAttrFlags
{
	TileIcon,
	Delimiter,
	Override,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct LineAttr: gui.TextAttr
{
	LineAttrFlags m_flags;
	size_t m_iconIdx;
}

//.............................................................................

// represnetor-target pair

opaque class RepresenterTarget
{
	uint64_t dconst m_timestamp;
	uint_t dconst m_packetCode;
	LineAttr m_lineAttr;

	abstract void addPart (
		PartKind partKind,
		uint_t partCode,
		void const* p,
		size_t size
		);

	void addHyperText (
		uint_t partCode,
		char const* text
		)
	{
		addPart (PartKind.HyperText, partCode, text, strlen (text));
	}

	void addHyperText (char const* text)
	{
		addPart (PartKind.HyperText, m_packetCode, text, strlen (text));
	}

	void addBin (
		uint_t partCode,
		void const* p,
		size_t size
		)
	{
		addPart (PartKind.Bin, partCode, p, size);
	}

	void addBin (
		void const* p,
		size_t size
		)
	{
		addPart (PartKind.Bin, m_packetCode, p, size);
	}
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

class Representer
{
	abstract bool represent (
		RepresenterTarget* target,
		uint_t packetCode,
		void const* p,
		size_t size,
		uint64_t foldFlags
		);
}

//.............................................................................

// log engine

opaque class Log
{
	object* autoget property m_representer;

	writeEx (
		uint64_t timestamp,
		uint_t packetCode,
		void const* p,
		size_t size
		);

	write (
		uint_t packetCode,
		void const* p,
		size_t size
		)
	{
		writeEx (jnc.getTimestamp (), packetCode, p, size);
	}

	write (uint_t packetCode)
	{
		writeEx (jnc.getTimestamp (), packetCode, null, 0);
	}
}

//.............................................................................

} // namespace log {

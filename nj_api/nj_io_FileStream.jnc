//.............................................................................
//
// File stream class
//

namespace io {

//.............................................................................

fenum FileOpenFlags
{
	ReadOnly,
	OpenExisting,
	Exclusive,
	ShareWrite,
	DeleteOnClose,
}

//.............................................................................

enum FileStreamEvent
{
	Eof,
	IncomingData,
	ReadError,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct FileStreamEventParams
{
	SocketEvent m_eventKind;
	FileStream* m_sender;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class FileStream
{
	bool dconst m_isOpen;

	bool open (
		char const* name,
		FileOpenFlags flags = 0
		) throws;

	void close ();

	size_t read (
		void* p,
		size_t size
		) throws;

	size_t write (
		void const* p,
		size_t size
		) throws;

	event m_onFileStreamEvent (FileStreamEventParams const* params);

	void firePendingEvents (); // to process events happened after accept () and before assiging event handler
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

FileStream* createFileStream ();

//.............................................................................

} // namespace io {

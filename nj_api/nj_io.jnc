//.............................................................................
//
// Ninja I/O declarations
//

namespace io {

//.............................................................................

// serial

enum SerialStopBits
{
	_1  = 0,
	_15 = 1,
	_2  = 2
};

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum SerialParity
{
	None = 0,
	Odd,
	Even,
	Mark,
	Space,
};

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum SerialFlowControl
{
	None = 0,
	RtsCts,
	XOnXOff,
};

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

fenum SerialLines
{
	Dtr,
	Rts,

	Dsr,
	Cts,
	Dcd,
	Ring,

	Control = Dtr | Rts,
	Status  = Dsr | Cts | Dcd | Ring,
};

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class Serial
{
	uint_t autoget property m_baudRate;
	uint_t autoget property m_dataBits; // typically 5..8
	SerialStopBits autoget property m_stopBits;
	SerialParity autoget property m_parity;
	SerialFlowControl autoget property m_flowControl;

	bool autoget property m_dtr;
	bool autoget property m_rts;
	bool dconst m_isOpen;

	bool pitcher open (char const* name);
	void close ();

	size_t pitcher read (
		void* p,
		size_t size,
		nullable function* onCompleted (size_t size)
		);

	size_t pitcher write (
		void const* p,
		size_t Size,
		nullable function* onCompleted (size_t size)
		);
}

//.............................................................................

// sockets

enum Protocol
{
	Tcp = 6,
	Udp = 17,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum AddressFamily: uint16_t
{
	Ip4 = 2,
	Ip6 = 23,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct SocketAddress_Ip4
{
	bigendian uint16_t m_port;

	union
	{
		bigendian uint32_t m_ip32;
		bigendian uint8_t m_ip8 [4];
	}
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct SocketAddress_Ip6
{
	bigendian uint16_t m_port;
	bigendian uint32_t m_flow;

	union
	{
		bigendian uint16_t m_ip16 [8];
		bigendian uint8_t m_ip8 [16];
	}
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// layout matches berkely sockets sockaddr

struct SocketAddress
{
	AddressFamily m_family;

	union
	{
		SocketAddress_Ip4 m_ip4;
		SocketAddress_Ip6 m_ip6;
	}
}

//.............................................................................

bool pitcher resolveSocketAddress (
	char const* string,
	SocketAddress* address
	);

/*

opaque class AsyncSocketAddressResolver
{
	// async resolve

	uintptr_t pitcher resolve (
		char const* string,
		function* onCompleted (SocketAddress const* address)
		);

	cancel (uintptr_t cookie);
}

*/

//.............................................................................

enum SocketKind
{
	Connection = 0,
	Listener,
	Udp
}

enum SocketState
{
	Closed = 0,
	Zombie,
	Opened,
	Connecting,
	Connected,
	Listening,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

class Socket
{
	intptr dconst m_fd;
	SocketKind dconst m_socketKind;
	SocketAddress const property m_address;
	SocketState dconst m_state;

	bool pitcher open (nullable SocketAddress const* address = null);
	void close ();
}

//.............................................................................

opaque class ConnectionSocket: Socket
{
	SocketAddress const property m_peerAddress;

	bool pitcher connect (
		SocketAddress const* address,
		nullable function* onCompleted (bool result)
		);

	size_t pitcher read (
		void* p,
		size_t size,
		nullable function* onCompleted (size_t size)
		);

	size_t pitcher write (
		void const* p,
		size_t size,
		nullable function* onCompleted (size_t size)
		);
}

//.............................................................................

opaque class ListenerSocket: Socket
{
	bool pitcher listen (size_t backLog = 0); // 0 -- default

	ConnectionSocket* pitcher accept (nullable function* onCompleted (ConnectionSocket* socket));
}

//.............................................................................

opaque class UdpSocket: Socket
{
	size_t pitcher read (
		void* p,
		size_t size,
		SocketAddress* address,
		nullable function* onCompleted (size_t size)
		);

	size_t pitcher write (
		void const* p,
		size_t size,
		SocketAddress const* address,
		nullable function* onCompleted (size_t size)
		);
}

//.............................................................................

// create functions (to be removed after 'new operator' for opaque classes is implemented )

Serial* createSerial ();
ConnectionSocket* createConnectionSocket ();
ListenerSocket* createListenerSocket ();
UdpSocket* createUdpSocket ();

//.............................................................................

} // namespace io {

//.............................................................................
//
// Serial class
//

namespace io {

//.............................................................................

enum SerialStopBits
{
	_1  = 0,
	_15 = 1,
	_2  = 2
};

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum SerialParity
{
	None = 0,
	Odd,
	Even,
	Mark,
	Space,
};

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum SerialFlowControl
{
	None = 0,
	RtsCts,
	XOnXOff,
};

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

fenum SerialLines
{
	Dtr,
	Rts,

	Dsr,
	Cts,
	Dcd,
	Ring,

	Control = Dtr | Rts,
	Status  = Dsr | Cts | Dcd | Ring,
};

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class Serial
{
	uint_t autoget property m_baudRate;
	uint_t autoget property m_dataBits; // typically 5..8
	SerialStopBits autoget property m_stopBits;
	SerialParity autoget property m_parity;
	SerialFlowControl autoget property m_flowControl;

	bool autoget property m_dtr;
	bool autoget property m_rts;
	bool dconst m_isOpen;

	bool pitcher open (char const* name);
	void close ();

	size_t pitcher read (
		void* p,
		size_t Size
		);

	size_t pitcher write (
		void const* p,
		size_t Size
		);

	event m_onReadyRead ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// create functions (to be removed after 'new operator' for opaque classes is implemented )

Serial* createSerial ();
ConnectionSocket* createConnectionSocket ();
ListenerSocket* createListenerSocket ();
UdpSocket* createUdpSocket ();

//.............................................................................

} // namespace io {

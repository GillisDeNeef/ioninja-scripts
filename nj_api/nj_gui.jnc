//.............................................................................
//
// Ninja GUI declarations
//

namespace gui {

//.............................................................................

// colors

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

fenum ColorFlags
{
	Transparent  = 0x80000000,
	Index        = 0x40000000,
	IndexMask    = 0x0fffffff,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum StdColor
{
	Black        = 0x000000,
	White        = 0xffffff,
	Gray         = 0x808080,
	Red          = 0x800000,
	Green        = 0x008000,
	Blue         = 0x000080,
	Purple       = 0x800080,
	Cyan         = 0x008080,

	LightRed     = 0xff0000,
	LightGreen   = 0x00ff00,
	LightBlue    = 0x0000ff,
	LightPurple  = 0xff00ff,
	LightCyan    = 0x00ffff,

	PastelGray   = 0xefefef,
	PastelRed    = 0xffe4e1,
	PastelOrange = 0xfffacd,
	PastelYellow = 0xffffc0,
	PastelGreen  = 0xe1fada,
	PastelCyan   = 0xcdfaff,
	PastelBlue   = 0xe2edff,
	PastelPurple = 0xe2dafd,
}

//.............................................................................

// text

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

fenum FontFlags
{
	Bold,
	Italic,
	Underline,
	Strikeout,

	Transparent,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct TextAttr
{
	uint_t m_textColor;
	uint_t m_backColor;
	FontFlags m_fontFlags;
}

//.............................................................................

// icons

opaque class Icon
{
}

Icon* loadIcon (char const* fileName);

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// actions

opaque class Action
{
	bool autoget property m_isVisible;
	bool autoget property m_isEnabled;
	bool autoget property m_isCheckable;
	bool autoget bindable property m_isChecked;

	event m_onTriggered ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class Menu
{
	addAction (Action* action);
	addSeparator ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// combo box

opaque class ComboBox
{
	bool autoget property m_isVisible;
	bool autoget property m_isEnabled;
	bool autoget property m_isEditable;

	property m_editText
	{
		char const* autoget m_value;
		set (char const* value);
		alias bindable event m_onPropChanged () = m_onChanged;
	}

	char const* autoget property m_toolTipText;

	void addEditTextToHistory ();

	size_t addItem (
		char const* text,
		nullable object* data = null
		);

	char const* indexed property m_itemText (size_t index);
	object* indexed property m_itemData (size_t index);

	property m_currentIndex
	{	
		size_t autoget m_value;
		set (size_t value);
		alias bindable event m_onPropChanged () = m_onChanged;
	}

	property m_currentText
	{		
		char const* get ();
		alias bindable event m_onPropChanged () = m_onChanged;
	}

	property m_currentData
	{		
		object* get ();
		alias bindable event m_onPropChanged () = m_onChanged;
	}

	event m_onChanged ();
	event m_onEnter ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// toolbar

opaque class ToolBar
{
	addAction (Action* action);
	addLabel (char const* pText);
	ComboBox* addComboBox (uint_t width = 0);  // 0 = default, -1 = stretch
	addSeparator ();
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// properties

class Property
{
	protected uint_t m_id; // <-- tmp solution

	char const* autoget property m_name;
	char const* autoget property m_toolTipText;
	bool autoget property m_isEnabled;
}

opaque class BoolProperty: Property
{
	bool autoget bindable property m_value;
}

opaque class IntProperty: Property
{
	int autoget bindable property m_value;
}

opaque class StringProperty: Property
{
	char const* autoget bindable property m_value;
}

struct EnumPropertyOption
{
	char const* m_text;
	int m_value;
};

opaque class EnumProperty: Property
{
	property m_value
	{
		int autoget m_value;
		set (int value);
		alias bindable event m_onPropChanged () = m_onChanged;
	}

	property m_currentIndex
	{
		size_t autoget m_value;
		set (size_t value);
		alias bindable event m_onPropChanged () = m_onChanged;
	}

	setOptions (
		EnumPropertyOption const* optionArray,
		size_t count
		);

	event m_onChanged ();
}

opaque class GroupProperty
{
	addProperty (Property* prop);
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// property grid

opaque class PropertyGrid
{
	bool autoget property m_isVisible;

	addProperty (Property* prop);
}

//.............................................................................

// create functions (to be removed after 'new operator' for opaque classes is implemented )

Action* createAction (
	char const* text,
	nullable Icon* icon = null
	);

BoolProperty* createBoolProperty (char const* name);
IntProperty* createIntProperty (char const* name);
StringProperty* createStringProperty (char const* name);
EnumProperty* createEnumProperty (char const* name);
GroupProperty* createGroupProperty (char const* name);

//.............................................................................

} // namespace gui {

//.............................................................................
//
// Ninja document model
//

namespace doc {

//.............................................................................

enum DocumentKind
{
	Log,
	MonitorSession,
	StreamSession,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

class DocumentHost
{
	gui.Menu* m_menu;
	gui.ToolBar* m_toolbar;
	gui.PropertyGrid* m_propertyGrid;
	log.Log* m_log;
	jnc.Scheduler* m_mainThreadScheduler;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

class Document
{
	DocumentKind dconst m_documentKind;
	DocumentHost* dconst m_documentHost;

	construct (
		DocumentKind documentKind,
		DocumentHost* documentHost
		)
	{
		m_documentKind = documentKind;
		m_documentHost = documentHost;
	}
}

//.............................................................................

class MonitorSession: Document
{
	construct (DocumentHost* documentHost)
	{
		basetype.construct (DocumentKind.MonitorSession, documentHost);
	}
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

class StreamSession: Document
{
	construct (DocumentHost* documentHost)
	{
		basetype.construct (DocumentKind.StreamSession, documentHost);
	}

	abstract size_t transmit (
		void const* p,
		size_t size
		);

	event m_onReceived (
		void const* p,
		size_t size
		);
}

//.............................................................................

} // namespace doc {

//..............................................................................
//
// WebSocket properties
//

namespace ui {

//! \addtogroup common-ui
//! @{

//..............................................................................

enum WebSocketTransmitMode
{
	Auto,   // if it's valid UTF-8, send as text, otherwise as binary
	Text,   // always send as text
	Binary, // always send as binary
}

enum WebSocketCloseMode
{
	Abrupt,   // close socket immediately
	Close,    // send close frame, then close socket
	Graceful, // wait for close confirmation
}

class WebSocketUi
{
	bitflag enum SettingId
	{
		TransmitMode,
		CloseMode,
		CloseTimeout,

		All =
			TransmitMode |
			CloseMode |
			CloseTimeout,
	}

	enum Defaults
	{
		TransmitMode = WebSocketTransmitMode.Auto,
		CloseMode    = WebSocketCloseMode.Close,
		CloseTimeout = 3000,
	}

	ui.ComboBox* m_transmitModeCombo;
	ui.EnumProperty* m_transmitModeProp;
	ui.EnumProperty* m_closeModeProp;
	ui.IntProperty* m_closeTimeoutProp;

	void create(
		ui.ToolBar* toolBar,
		ui.PropertyGrid* propertyGrid,
		ui.GroupProperty* groupProp = null,
		ui.Property* insertBeforeProp = null,
		SettingId settingMask = SettingId.All
		);

	void load(doc.Storage* storage);
	void save(doc.Storage* storage);
	void updateProperties();
	void applyProperties();
	void restoreDefaultProperties();
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

void WebSocketUi.create(
	ui.ToolBar* toolBar,
	ui.PropertyGrid* propertyGrid,
	ui.GroupProperty* groupProp,
	ui.Property* insertBeforeProp,
	SettingId settingMask
	)
{
	static ui.EnumPropertyOption transmitModeTable[] =
	{
		{ "Auto",   WebSocketTransmitMode.Auto },
		{ "Text",   WebSocketTransmitMode.Text },
		{ "Binary", WebSocketTransmitMode.Binary },
	}

	static ui.EnumPropertyOption closeModeTable[] =
	{
		{ "Abrupt",   WebSocketCloseMode.Abrupt },
		{ "Close",    WebSocketCloseMode.Close },
		{ "Graceful", WebSocketCloseMode.Graceful },
	}

	if (settingMask & SettingId.TransmitMode)
	{
		m_transmitModeCombo = toolBar.addComboBox(
			"Transmit as:",
			transmitModeTable,
			countof(transmitModeTable)
			);

		m_transmitModeProp = propertyGrid.createEnumProperty(
			groupProp,,
			"Transmit mode",
			"Specify the WebSocket transmission mode",
			transmitModeTable,
			countof(transmitModeTable)
			);
	}

/*
	if (propMask & SettingId.BaudRate)
		m_baudRateProp = propertyGrid.createComboProperty(
			groupProp,,
			"Baud rate",
			"Enter a baud rate...",
			"Specify a serial baud rate",
			baudRateTable,
			countof(baudRateTable)
			);

	if (comboMask & SettingId.DataBits)
		m_dataBitsCombo = toolBar.addComboBox(
			"Data:",
			dataBitsTable,
			countof(dataBitsTable)
			);

	if (propMask & SettingId.DataBits)
		m_dataBitsProp = propertyGrid.createEnumProperty(
			groupProp,,
			"Data bits",
			"Serial data bit count (word size)",
			dataBitsTable,
			countof(dataBitsTable)
			);

	if (comboMask & SettingId.StopBits)
		m_stopBitsCombo = toolBar.addComboBox(
			"Stop:",
			stopBitsTable,
			countof(stopBitsTable)
			);

	if (propMask & SettingId.StopBits)
		m_stopBitsProp = propertyGrid.createEnumProperty(
			groupProp,,
			"Stop bits",
			"Serial stop bit count",
			stopBitsTable,
			countof(stopBitsTable)
			);

	if (comboMask & SettingId.Parity)
		m_parityCombo = toolBar.addComboBox(
			"Parity:",
			parityTable,
			countof(parityTable)
			);

	if (propMask & SettingId.Parity)
		m_parityProp = propertyGrid.createEnumProperty(
			groupProp,,
			"Parity",
			"Serial parity check",
			parityTable,
			countof(parityTable)
			);

	if (comboMask & SettingId.FlowControl)
		m_flowControlCombo = toolBar.addComboBox(
			"Flow:",
			flowControlTable,
			countof(flowControlTable)
			);

	if (propMask & SettingId.FlowControl)
		m_flowControlProp = propertyGrid.createEnumProperty(
			groupProp,,
			"Flow control",
			"Serial flow control",
			flowControlTable,
			countof(flowControlTable)
			); */
}

void WebSocketUi.load(doc.Storage* storage)
{
/*	m_baudRate = storage.readInt("baudRateVal", Defaults.BaudRate);
	m_dataBits = storage.readInt("dataBitsVal", Defaults.DataBits); // 8 bits
	m_stopBits = (io.SerialStopBits) storage.readInt("stopBitsVal", Defaults.StopBits);
	m_parity = (io.SerialParity) storage.readInt("parityVal", Defaults.Parity);
	m_flowControl = (io.SerialFlowControl) storage.readInt("flowControlVal", Defaults.FlowControl); */
}

void WebSocketUi.save(doc.Storage* storage)
{
/*	storage.writeInt("baudRateVal", m_baudRate);
	storage.writeInt("dataBitsVal", m_dataBits);
	storage.writeInt("stopBitsVal", m_stopBits);
	storage.writeInt("parityVal", m_parity);
	storage.writeInt("flowControlVal", m_flowControl); */
}

void WebSocketUi.updateProperties()
{
/*	if (m_baudRateProp && m_baudRateCombo)
		m_baudRateProp.m_value = m_baudRateCombo.m_editText;

	if (m_dataBitsProp && m_dataBitsCombo)
		m_dataBitsProp.m_currentIndex = m_dataBitsCombo.m_currentIndex;

	if (m_stopBitsProp && m_dataBitsCombo)
		m_stopBitsProp.m_currentIndex = m_dataBitsCombo.m_currentIndex;

	if (m_parityProp && m_parityCombo)
		m_parityProp.m_currentIndex = m_parityCombo.m_currentIndex;

	if (m_flowControlProp && m_flowControlCombo)
		m_flowControlProp.m_currentIndex = m_flowControlCombo.m_currentIndex; */
}

void WebSocketUi.applyProperties()
{
/*	if (m_baudRateProp && m_baudRateCombo)
		m_baudRateCombo.m_editText = m_baudRateProp.m_value;

	if (m_dataBitsProp && m_dataBitsCombo)
		m_dataBitsCombo.m_currentIndex = m_dataBitsProp.m_currentIndex;

	if (m_stopBitsProp && m_dataBitsCombo)
		m_dataBitsCombo.m_currentIndex = m_stopBitsProp.m_currentIndex;

	if (m_parityProp && m_parityCombo)
		m_parityCombo.m_currentIndex = m_parityProp.m_currentIndex;

	if (m_flowControlProp && m_flowControlCombo)
		m_flowControlCombo.m_currentIndex = m_flowControlProp.m_currentIndex; */
}

void WebSocketUi.restoreDefaultProperties()
{
/*	if (m_baudRateProp)
		m_baudRateProp.m_value = $"$(Defaults.BaudRate) bps";

	if (m_dataBitsProp)
		m_dataBitsProp.m_value = Defaults.DataBits;

	if (m_stopBitsProp)
		m_stopBitsProp.m_value = Defaults.StopBits;

	if (m_parityProp)
		m_parityProp.m_value = Defaults.Parity;

	if (m_flowControlProp)
		m_flowControlProp.m_value = Defaults.FlowControl; */
}

//..............................................................................

//! @}

} // namespace ui

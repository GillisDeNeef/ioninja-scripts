import "log_Representation.jnc"
import "std_String.jnc"

namespace log {

//..............................................................................

typedef char const* FormatFunc(void const* p);

char const* getDisplayName(jnc.ModuleItemDecl* decl)
{
	char const* displayName = decl.findAttributeValue("displayName");
	return displayName ? displayName : decl.m_name;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

void representStruct(
	Representation* representation,
	jnc.StructType* type,
	uint_t binPartRecordCode,
	void const* p,
	size_t baseOffset = 0,
	uint_t foldFlags = 1,
	uint_t foldFlagBase = 1,
	size_t indentLevel = 0
	)
{
	std.StringBuilder indent;
	indent.copy(' ', indentLevel * 4);

	if (!(foldFlags & foldFlagBase))
	{
		FormatFunc thin* formatDigestFunc = type.findAttributeValue("formatDigestFunc");

		representation.addHyperText($"%1[\e^+%2\e[34m+\e[m] \e[1m%3"(
			indent.m_sz,
			foldFlagBase,
			formatDigestFunc ? formatDigestFunc(p) : getDisplayName(type)
			));

		return;
	}

	representation.addHyperText($"%1[\e^-%2\e[34m-\e[m] \e[1m%3"(
		indent.m_sz,
		foldFlagBase,
		getDisplayName(type)
		));

	indent.append(' ', 4);

	size_t maxFieldNameLength = 0;
	size_t count = type.m_fieldCount;
	for (size_t i = 0; i < count; i++)
	{
		jnc.Field* field = type.m_fieldArray[i];
		size_t length = strlen(getDisplayName(field));
		if (length > maxFieldNameLength)
			maxFieldNameLength = length;
	}

	std.StringBuilder gap;

	for (size_t i = 0; i < count; i++)
	{
		jnc.Field* field = type.m_fieldArray[i];
		char const* displayName = getDisplayName(field);
		size_t length = strlen(displayName);
		gap.copy(' ', maxFieldNameLength - length);

		FormatFunc thin* formatFunc = field.findAttributeValue("formatFunc");

		char const* valueString = formatFunc ?
			valueString = formatFunc(p + field.m_offset) :
			field.m_type.getValueString(p + field.m_offset, field.findAttributeValue("formatSpec"));

		representation.addHyperText($"%1%2: %3\e^!0x%x,%5,%6\e[34m%7"(
			indent.m_sz,
			displayName,
			gap.m_sz,
			binPartRecordCode,
			baseOffset + field.m_offset,
			field.m_type.m_size,
			valueString
			));
	}
}

//..............................................................................

} // namespace log
